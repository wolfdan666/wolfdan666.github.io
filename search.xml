<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ARST打卡第80周[80/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC80%E5%91%A8-80-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/402_%E7%A7%BB%E6%8E%89K%E4%BD%8D%E6%95%B0%E5%AD%97.cpp" target="_blank" rel="noopener">LeetCode/402_移掉K位数字</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>如何保持更长时间的专注？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=800226157&bvid=BV1wy4y1z7bp&cid=254798413&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://github.com/apache/incubator-brpc/blob/master/docs/cn/server.md" target="_blank" rel="noopener">brpc-server基础</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/105471278" target="_blank" rel="noopener">VScode无法运行中文路径的cpp文件</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第79周[79/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC79%E5%91%A8-79-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/327_%E5%8C%BA%E9%97%B4%E5%92%8C%E7%9A%84%E4%B8%AA%E6%95%B0.cpp" target="_blank" rel="noopener">LeetCode/327_区间和的个数</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>你想过自杀吗？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=287669399&bvid=BV1Df4y1i7fp&cid=252872546&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>亲爱的朋友，很抱歉听到你曾经经历的一些很艰难的时刻，希望你能释怀，珍惜自己这个生命的奇迹，你的存在就是价值</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.vediotalk.com/archives/606" target="_blank" rel="noopener">LINUX | 谷歌云开启SSH及设置root密码</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/109548418" target="_blank" rel="noopener">Please ensure you can make a proper https connection to the IAP for TCP hostname:https://tunnel.clou</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第78周[78/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC78%E5%91%A8-78-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/140_%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%862.cpp" target="_blank" rel="noopener">LeetCode/140_单词拆分2</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么培养创业心态那么重要？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=885048654&bvid=BV1zK4y177ve&cid=250318476&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>建立创业者心态，自己对自己的人生负责，自己自负盈亏，自己享受独立做决定的自由，自己感受自己可以让世界变得更好的力量并感到快乐</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://zhuanlan.zhihu.com/p/268637430" target="_blank" rel="noopener">学CMake</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/109403926" target="_blank" rel="noopener">mac的obs录制不到全屏</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/109426068" target="_blank" rel="noopener">mac压缩视频，压缩obs录制的视频</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第77周[77/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC77%E5%91%A8-77-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="1024程序员节快乐"><a href="#1024程序员节快乐" class="headerlink" title="1024程序员节快乐"></a>1024程序员节快乐</h2><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/1024_%E8%A7%86%E9%A2%91%E6%8B%BC%E6%8E%A5.cpp" target="_blank" rel="noopener">LeetCode/1024_视频拼接</a></p><p>听说<br>2020 - 1024 = 996<br>2021 - 1024 = 997</p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>这2个问题，让你的生活更美好！</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=202536071&bvid=BV1sa411A7wY&cid=248077173&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>现在做什么让你的人生感到更好？<br>将来做什么让你的人生感到更好？<br>其实感觉还是制定好自己的人生目标，然后去实现</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="http://gdut_yy.gitee.io/doc-aposd/" target="_blank" rel="noopener">《软件设计的哲学》中文翻译</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/109262153" target="_blank" rel="noopener">reference to non-static member function must be called</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第76周[76/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC76%E5%91%A8-76-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/977_%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.cpp" target="_blank" rel="noopener">LeetCode/977_有序数组的平方</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么过早专攻并不意味着成功？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=797446780&bvid=BV1Ky4y1r7JD&cid=245287706&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>我们生来就有多种兴趣，而不是像这个邪恶的世界一样只有一种兴趣，所有的希腊哲学家都不专攻任何一门学科，他们对艺术、动物学、天文学、数学、等都很感兴趣。虽然现实生活中确实有很多通过过早专攻某个领域而成功的人，但并不代表过早“刻意练习”，能够使任何人都能成为某领域的天才。而延后专攻练习，早期广泛涉猎多个领域，也许才会真正帮助我们了解自己的兴趣和能力。</p><p>找到自己的兴趣，再刻意练习往往更加有效，所以不妨广泛尝试，然后投身自己感兴趣的事业</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://github.com/apache/incubator-brpc/blob/master/docs/cn/client.md" target="_blank" rel="noopener">brpc客户端基础框架</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/109136246" target="_blank" rel="noopener">brpc第二三周学习分享</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第75周[75/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC75%E5%91%A8-75-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/416_%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.cpp" target="_blank" rel="noopener">LeetCode/416_分割等和子集</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>人类的时代：当时间成为历史</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=884979833&bvid=BV19K4y1h7hp&cid=244620659&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>聚在一起，分享，创造更多的文明与进步</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/zhou373986278/article/details/82468610" target="_blank" rel="noopener">改变reduce输出文件名字的方法</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/108950960" target="_blank" rel="noopener">Mac外接磁盘使用哪种格式速度最快，NTFS?exFAT?HFS+?APFS?</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第74周[74/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC74%E5%91%A8-74-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.cpp" target="_blank" rel="noopener">LeetCode/1_两数之和</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么我们都是时间穷人？怎么办？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=202340881&bvid=BV1Jh41197Rb&cid=240193345&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>【时间不够用的原因】</p><ol><li>我们太过看重金钱；</li><li>我们的空闲时间变成了剩余价值，想要榨取它；</li><li>我们提前消费了未来的时间；</li></ol><p>【如何有足够的时间】</p><ol><li>把时间的优先级放在金钱之上；</li><li>尽情享受你的带薪假期；</li><li>花更多的时间享受生活；</li><li>花一些时间到有意义的活动中，锻炼、社交等，而不仅仅是工作；</li><li>把不喜欢的任务外包出去；</li><li>利用闲碎的空闲时间；</li></ol><p>【幸福货币】<br>收入等同于你做出的与时间相关的选择所体验到的幸福。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.codedump.info/post/20200605-how-to-read-code-v2020/" target="_blank" rel="noopener">如何阅读一份源代码？</a></p><p><a href="https://illx10000.github.io/2018/12/29/6.html" target="_blank" rel="noopener">brpc之iobuf</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/108918177" target="_blank" rel="noopener">brpc第一周学习分享</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第73周[73/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC73%E5%91%A8-73-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/113_%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C2.cpp" target="_blank" rel="noopener">LeetCode/113_路径总和2</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：忘掉大计划，从小习惯开始做出改变</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=372152271&bvid=BV1yZ4y1N7JE&cid=237622859&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>我们想要取得巨大的进步，我们需要的是习惯，尤其是小习惯，当我们养成一点一滴的小习惯，尽管我们不可能一次完成所有的事情，但是我们将会以一种非常可靠的方式、一种不会反弹的方式、一种不会让你想要放弃的方式，达到你想要的结果。你不需要提高动力，不需要提升意志力，你所要做的就是设计好这个小习惯。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/w790634493/article/details/80525238" target="_blank" rel="noopener">安装vmware tools时出错 ，Searching for a valid kernel header path… The path “” is not valid</a></p><p><a href="https://illx10000.github.io/2018/12/22/3.html" target="_blank" rel="noopener">brpc学习(一)</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/108735072" target="_blank" rel="noopener">vscode sftp permission denied</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第72周[72/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC72%E5%91%A8-72-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/78_%E5%AD%90%E9%9B%86.cpp" target="_blank" rel="noopener">LeetCode/78_子集</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：当一切未竟，该怎么办？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=754664711&bvid=BV1Mk4y117hY&cid=236886459&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>一切都未结束，在你体内所有坏的东西都可以修补</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.macdo.cn/28492.html" target="_blank" rel="noopener">干货！Windows To Go 完美制作教程</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/108695827" target="_blank" rel="noopener">macOS使用bits/stdc++.h</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第71周[71/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC71%E5%91%A8-71-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/79_%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2.cpp" target="_blank" rel="noopener">LeetCode/79_单词搜索</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么你常常感到孤独？如何克服孤独感？</p><p>观察自己的情绪，接收自己的情绪，拥抱自己的情绪</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=926952892&bvid=BV1iT4y1w7gW&cid=229958767&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://suixinblog.cn/2019/09/beautify-terminal.html" target="_blank" rel="noopener">iTerm2 + zsh + Oh My Zsh + Powerlevel10k 打造 Mac 下最强终端</a></p><p><a href="https://www.pianshen.com/article/36961148415/" target="_blank" rel="noopener">解决Mac上VSCdoe断点失效问题</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/108559551" target="_blank" rel="noopener">gyp: No Xcode or CLT version detected!问题解决</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第70周[70/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC70%E5%91%A8-70-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm-amp-Share"><a href="#Algorithm-amp-Share" class="headerlink" title="Algorithm &amp; Share"></a>Algorithm &amp; Share</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E9%A2%98/2020.9.2%E5%8D%8E%E4%B8%BA%E7%AC%94%E8%AF%95" target="_blank" rel="noopener">2020.9.2华为笔试</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：高效学习的关键</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=414472676&bvid=BV1yV41127JV&cid=232370306&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>1·番茄法<br>2·看完抬头回想学了什么<br>3·不断练习</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.jianshu.com/p/b0343bfd216e" target="_blank" rel="noopener">RPC简介及框架选择</a><br><a href="https://github.com/apache/incubator-brpc/blob/master/README_cn.md" target="_blank" rel="noopener">brpc</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第69周[69/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC69%E5%91%A8-69-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/557_%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D3.cpp" target="_blank" rel="noopener">557_反转字符串中的单词3</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>赛琳娜·戈麦斯演讲：相信自己！</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=626775589&bvid=BV13t4y1Q7mz&cid=227423276&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/freeking101/article/details/52471799" target="_blank" rel="noopener">Python 读写配置文件模块: configobj 和 configParser</a></p><p><a href="https://blog.csdn.net/shuihupo/article/details/79992615" target="_blank" rel="noopener">python 安装.whl、egg、zip、tar.gz安装包</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>“我觉得如果你专注于自己，而不是无法控制的事，这会对你有所帮助。”——（美剧《极品老妈》）</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/Think/focus_on_youself.jpg" alt="focus_on_youself"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第68周[68/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC68%E5%91%A8-68-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/201_%E6%95%B0%E5%AD%97%E8%8C%83%E5%9B%B4%E6%8C%89%E4%BD%8D%E4%B8%8E.cpp" target="_blank" rel="noopener">201_数字范围按位与</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：怎么才算成功的人生？如何才能走向成功？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=884348240&bvid=BV1AK4y1e7NH&cid=227584570&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>相信自己，超越自己</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.cnblogs.com/X-knight/p/9157814.html" target="_blank" rel="noopener">[区块链] 共识算法之争（PBFT，Raft，PoW，PoS，DPoS，Ripple）</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>参数校验(不懂就看schema官网：<a href="http://json-schema.org/understanding-json-schema/" target="_blank" rel="noopener">http://json-schema.org/understanding-json-schema/</a>)</p><h3 id="嵌套参数的参数校验"><a href="#嵌套参数的参数校验" class="headerlink" title="嵌套参数的参数校验"></a>嵌套参数的参数校验</h3><p>一般的简单参数校验, 其参数一般是没有嵌套的<br></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "status": "xxx",        //用户状态(enable启用/disable禁用)</span><br><span class="line">    "ids": ["xxx", "xxx"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>因此其校验文本为</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">VALID_OF_ACCOUT_UPDATE_MANY_STATUS = &#123;</span><br><span class="line">	<span class="string">"definitions"</span>: &#123;&#125;,</span><br><span class="line">	<span class="string">"$schema"</span>: <span class="string">"http://json-schema.org/draft-07/schema#"</span>,</span><br><span class="line">	<span class="string">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">	<span class="string">"required"</span>: [</span><br><span class="line">		<span class="string">"status"</span>,</span><br><span class="line">		<span class="string">"ids"</span></span><br><span class="line">	],</span><br><span class="line">	<span class="string">"properties"</span>: &#123;</span><br><span class="line">		<span class="string">"status"</span>: &#123;</span><br><span class="line">			<span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">			<span class="string">"enum"</span>: [<span class="string">"enable"</span>, <span class="string">"disable"</span>]</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">"ids"</span>: &#123;</span><br><span class="line">			<span class="string">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">			<span class="string">"items"</span>: &#123;</span><br><span class="line">				<span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">				<span class="string">"pattern"</span>: <span class="string">"^(.*)$"</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而面对比较复杂的参数，我们应该如何写参数校验？</p><ul><li>有嵌套</li><li>有限定值</li><li>有取值范围</li></ul><p>举例数据<br></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"模板名称"</span>,</span><br><span class="line">    <span class="attr">"desc"</span>: <span class="string">"模板策略描述"</span>,</span><br><span class="line">    <span class="attr">"redundancy_strategy"</span>: <span class="string">"rep2|ec"</span>,</span><br><span class="line">    <span class="attr">"small_file_merge"</span>: &#123;</span><br><span class="line">        <span class="attr">"small_file_merge_enable"</span>: <span class="string">"enable"</span>,</span><br><span class="line">        <span class="attr">"file_size"</span>: <span class="number">512</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"client_cache"</span>: &#123;</span><br><span class="line">        <span class="attr">"metadata_cache"</span>: <span class="string">"enable"</span>,</span><br><span class="line">        "data_cache": 0, // 0关闭 1读 2读写</span><br><span class="line">        "prefetch": "low"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>因此我们可以写校验文本如下</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">VALID_OF_STORAGE_STRATEGY_CREAT = &#123;</span><br><span class="line">    <span class="string">"definitions"</span>: &#123;&#125;,</span><br><span class="line">	<span class="string">"$schema"</span>: <span class="string">"http://json-schema.org/draft-07/schema#"</span>,</span><br><span class="line">	<span class="string">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">	<span class="string">"required"</span>: [</span><br><span class="line">		<span class="string">"name"</span>,</span><br><span class="line">		<span class="string">"redundancy_strategy"</span>,</span><br><span class="line">		<span class="string">"small_file_merge"</span>,</span><br><span class="line">        <span class="string">"client_cache"</span></span><br><span class="line">	],</span><br><span class="line">	<span class="string">"properties"</span>: &#123;</span><br><span class="line">		<span class="string">"name"</span>: &#123;</span><br><span class="line">			<span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">			<span class="string">"pattern"</span>: <span class="string">"^(.*)$"</span></span><br><span class="line">		&#125;,</span><br><span class="line">        <span class="string">"desc"</span>: &#123;</span><br><span class="line">			<span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">			<span class="string">"pattern"</span>: <span class="string">"^(.*)$"</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">"redundancy_strategy"</span>: &#123;</span><br><span class="line">			<span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">			<span class="string">"enum"</span>: [<span class="string">"rep2"</span>, <span class="string">"ec"</span>]</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">"small_file_merge"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">            <span class="string">"properties"</span>: &#123;</span><br><span class="line">                <span class="string">"small_file_merge_enable"</span>: &#123;</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">                    <span class="string">"enum"</span>: [<span class="string">"enable"</span>, <span class="string">"disable"</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"file_size"</span>: &#123;</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">                    <span class="string">"minimum"</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">"maximum"</span>: <span class="number">4096</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"required"</span>: [<span class="string">"small_file_merge_enable"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"client_cache"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">            <span class="string">"properties"</span>: &#123;</span><br><span class="line">                <span class="string">"metadata_cache"</span>: &#123;</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">                    <span class="string">"enum"</span>: [<span class="string">"enable"</span>, <span class="string">"disable"</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"data_cache"</span>: &#123;</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">                    <span class="string">"minimum"</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">"maximum"</span>: <span class="number">2</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"prefetch"</span>: &#123;</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">                    <span class="string">"enum"</span>: [<span class="string">"low"</span>, <span class="string">"middle"</span>, <span class="string">"high"</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"required"</span>: [<span class="string">"metadata_cache"</span>, <span class="string">"data_cache"</span>, <span class="string">"prefetch"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第67周[67/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC67%E5%91%A8-67-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/546_%E7%A7%BB%E9%99%A4%E7%9B%92%E5%AD%90.cpp" target="_blank" rel="noopener">LeetCode/546_移除盒子</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>如何成为强大的思考者？</p><p>让脑子里的思想做对抗，然后得到最终的思考，就是有点像深度学习里面的GAN学习方法</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=541635226&bvid=BV1Xi4y1u7iU&cid=224789578&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/younger_china/article/details/73412295" target="_blank" rel="noopener">Ganesha详解</a></p><p><a href="https://www.jianshu.com/p/ec7369a334ae" target="_blank" rel="noopener">nfs-ganesha</a></p><p><a href="https://zhuanlan.zhihu.com/p/34833897" target="_blank" rel="noopener">NFS-Ganesha 核心架构解读</a></p><p><a href="https://documentation.suse.com/ses/6/html/ses-all/cha-ceph-nfsganesha.html" target="_blank" rel="noopener">NFS Ganesha: Export Ceph Data via NFS</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/107448809" target="_blank" rel="noopener">匹配某行，在下一行添加</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/107579861" target="_blank" rel="noopener">git要把修改转移到另外的分支，但直接跳转分支失败</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第66周[66/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC66%E5%91%A8-66-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><strong>因为上周日晚骑已损坏的哈啰助力车遇到小坡飞出摔伤，右手舟状骨骨折，导致自己上周ARST打卡没有打</strong></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/26_unique_%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.cpp" target="_blank" rel="noopener">LeetCode/26<em>unique</em>删除排序数组中的重复项</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：金钱能买来幸福吗？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=841577203&bvid=BV1X54y1v7dS&cid=219317650&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>这又是一个关于给予他人更加能收获感到幸福的故事</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/lzg_zone/article/details/83863509" target="_blank" rel="noopener">spec文件知识整理</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>延迟加载配置项</p><p>有些时候我们需要对于一些常用变量提取到类变量，但是在<code>__init__()</code>的时候有些资源获取不到，这时我们就可以使用延迟加载，在第一个使用这个配置项的地方加载配置</p><p>非延迟加载<br></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXXTask</span><span class="params">(task.Task)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.node_client = NodeAgentClient(ip=self.__get_filestore_agent())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get_filestore_agent</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> clusterproxy.ClusterProxy().get_agent_work_ipaddr()</span><br></pre></td></tr></table></figure><p></p><p>后来的延迟加载<br></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXXTask</span><span class="params">(task.Task)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">()</span>:</span></span><br><span class="line">        self._node_client = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">node_client</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._node_client:</span><br><span class="line">            self._node_client = NodeAgentClient(ip=clusterproxy.ClusterProxy().get_agent_work_ipaddr())</span><br><span class="line">        <span class="keyword">return</span> self._node_client</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第65周[65/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC65%E5%91%A8-65-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/410_%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC.cpp" target="_blank" rel="noopener">LeetCode/410_分割数组的最大值</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：怎么才能活的更幸福？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=796424499&bvid=BV13C4y1b7Pn&cid=213959236&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>62周看的TED讲了： 幸福 = 期望 - 现实<br>63周说给予以及帮助他人，让我们感到幸福<br>这里65周讲的是，走神会让我变得不开心，但是我们除了做爱只有10%走神时间之外，做其他事情基本上都有30%以上的走神时间，所以我们应该适当控制走神时间来提高幸福感<em>_</em>也让我明白了为什么要<strong>不念过往，不负当下，不畏将来</strong>,这估计也是减少走神时间能让人感到更幸福的原因</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/qq_15437667/article/details/52479792" target="_blank" rel="noopener">git pull时遇到error: cannot lock ref</a></p><p><a href="https://www.cnblogs.com/lfxiao/p/9378763.html" target="_blank" rel="noopener">git commit之后，想撤销commit</a></p><p><a href="https://blog.csdn.net/qq_32452623/article/details/75645578" target="_blank" rel="noopener">Git-命令行-拯救“Your local changes to the following files would be overwritten by checkout”</a></p><p><a href="https://blog.csdn.net/bocai_xiaodaidai/article/details/103776753" target="_blank" rel="noopener">GIt冲突解决</a></p><p><a href="http://cw.hubwiz.com/card/c/543b2f3cf86387171814c026/1/1/7/" target="_blank" rel="noopener">mongodb_in方法</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/107579861" target="_blank" rel="noopener">Git常用命令(长期更新维护)</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第64周[64/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC64%E5%91%A8-64-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/312_%E6%88%B3%E6%B0%94%E7%90%83.cpp" target="_blank" rel="noopener">LeetCode/312_戳气球</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：你的大脑如何坠入爱河？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=498862363&bvid=BV1gK411J71M&cid=212099337&page=2" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.cnblogs.com/cyleon/p/11345425.html" target="_blank" rel="noopener">调用python脚本报错/usr/bin/env: python : No such file or directory</a></p><p><a href="https://docs.python.org/zh-cn/3/library/argparse.html" target="_blank" rel="noopener">argparse —- 命令行选项、参数和子命令解析器</a></p><p><a href="https://blog.csdn.net/u012450329/article/details/53012238" target="_blank" rel="noopener">oslo.config模块的使用</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/107448809" target="_blank" rel="noopener">匹配文件某一行起始字符，替换整行__自动化脚本</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第63周[63/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC63%E5%91%A8-63-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/315_%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0.cpp" target="_blank" rel="noopener">LeetCode/315_计算右侧小于当前元素的个数</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>怎样每天都过得快乐？</p><p>上周我们讲了怎么感到幸福，幸福 = 现实 - 期望<br>上周主要讲的是降低期望能够更加快乐，那么这周就是提高现实变得更加快乐<br>给予他人，帮助他人会让我们自己拥有价值感，于是会感觉现实值更高，从而变得幸福</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=968844840&bvid=BV18p4y1S7Lf&cid=210932765&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.cnblogs.com/molao-doing/articles/6541455.html" target="_blank" rel="noopener">LESS命令简单介绍以及使用</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/107153894" target="_blank" rel="noopener">“errmsg“ : “not master and slaveOk=false“_Mongo集群没有primary但有secondary时连接不上且不能读数据</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第62周[62/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC62%E5%91%A8-62-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p>上周本来是62周的，但是因为外出西安旅游，所以跳过了</p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/44_%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D.cpp" target="_blank" rel="noopener">LeetCode/44_通配符匹配</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么我们不快乐？<br>幸福 = 现实 - 期望</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=498599184&bvid=BV1hK411n7fk&cid=201598538&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.liaoxuefeng.com/wiki/897692888725344/923056941823072" target="_blank" rel="noopener">Web开发</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>网页后端学习资料分享<br><a href="https://www.cnblogs.com/an-wen/p/11180076.html" target="_blank" rel="noopener">HTTP协议超级详解</a></p><p><a href="https://www.runoob.com/python3/python-mongodb.html" target="_blank" rel="noopener">Python MongoDB</a></p><p><a href="https://www.liaoxuefeng.com/wiki/897692888725344" target="_blank" rel="noopener">Python</a></p><p><a href="https://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">mongoDB</a></p><p>以及上面Tips中的web开发</p><h1 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h1><p>《孩子，你慢慢来》</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/%E5%AD%A9%E5%AD%90%EF%BC%8C%E4%BD%A0%E6%85%A2%E6%85%A2%E6%9D%A5.jpg" width="20%" height="20%"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第61周[61/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC61%E5%91%A8-61-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/124_%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C.cpp" target="_blank" rel="noopener">LeetCode124_二叉树中的最大路径和</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>如何克服人生中最大的障碍？</p><ul><li>控制你的思想，然后去全力以赴完成事情，当你全力以赴，给自己要做的事情赋予意义的时候，别人的任何鼓励都会给予你巨大的意义感，然后你就会有莫名一种巨大的力量奔涌出来(感谢曾经的百里毅行给了我这种美好的体验)</li></ul><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=968608239&bvid=BV1Zp4y1D7PP&cid=202938241&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/cungudafa/article/details/105089003" target="_blank" rel="noopener">【GPU】win10 (1050Ti)+anaconda3+python3.6+CUDA10.0+tensorflow-gpu2.1.0</a></p><p><a href="https://blog.csdn.net/XunCiy/article/details/89070315" target="_blank" rel="noopener">Win10中CUDA、cuDNN的安装与卸载</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/106801332" target="_blank" rel="noopener">Win10+1050Ti配置Tensorflow教程<strong>不用GPU，真的GAN不动_</strong>配了两天</a></p><h1 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h1><p>《异类-不一样的成功启示录》</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/%E5%BC%82%E7%B1%BB.jpg" width="20%" height="20%"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第60周[60/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC60%E5%91%A8-60-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/25_K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.cpp" target="_blank" rel="noopener">LeetCode/25_K个一组翻转链表</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：若想有所作为，请停止和别人比较！</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=201014670&bvid=BV1Uz411i7Sc&cid=202019845&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://juejin.im/post/5ddb2476f265da7e0a3e2c85" target="_blank" rel="noopener">刷掉 90% 候选人的互联网大厂海量数据面试题</a></p><p><a href="https://www.jianshu.com/p/7a9ea6ece2af" target="_blank" rel="noopener">蓄水池抽样算法（Reservoir Sampling）</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/106750537" target="_blank" rel="noopener">个人C++面试准备_面试高频知识点集</a></p><h1 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h1><p>《事实》</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/%E4%BA%8B%E5%AE%9E.jpg" width="20%" height="20%"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第59周[59/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC59%E5%91%A8-59-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/126_%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%992.cpp" target="_blank" rel="noopener">LeetCode/126_单词接龙2</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么我们要勇敢地做古怪的自己？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=795915293&bvid=BV1TC4y1a7y9&cid=199608714&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>当我感到被认可时，我就会有一种联系的感觉<br>When I feel approved of, I feel a sense of connection</p><p><strong>但是我们努力成为一个正常人会让我们痛苦</strong></p><p>你能挑战自己把你的诅咒变成祝福吗?<br>can you challenge yourself to turn your curses into a blessing?</p><p>或是在你的诅咒中寻到祝福?<br>Or find the blessing within your curse?</p><p>我想在我们的童年时代,我们被取笑最多的东西,我们最尴尬的,最让我们羞愧的,通常是我们的天赋,通常是我们的古怪<br>I think once upon a time in our childhood,what we were madefun offor the most,what we were most embarrassed about,what we were shamedfor the most,it’s typically our gifts,It’s typically our weirdness</p><p>作为一个孩子，我们看着自己的古怪之处<br>As a child, we look at our weirdness</p><p>无论是否有人取笑我们<br>whether it’s someone who’s making fun of us</p><p>作为一个孩子，一旦我们感到“我是唯一的一个”,我们就会感觉“这是一种诅咒，负担”<br>As a child, we tendto experience a sense of “it’sa curse, it’s a burden” any time we have asense of “Tm the only one”</p><p>我们可以成为一个更完整的人,并且说，”是的，我是唯一的一个，这很棒”<br>we can be a more whole person today,and say “Yeah, I’m the only one, that’s amazing”</p><p>你是否愿意让你的痛苦有意义,发现其中好的部分，这样你就不必去逃避它了<br>Would you be willing to bring purpose to your pain,find the blessing ofit; so that you don’thave to avoid it?</p><p>我头和脖子很长，小时候常被人取笑，但我发现我也容易让人记住，现在开始欣赏自己的独特了，欣赏自己的一些特殊的品行，并感到快乐</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://kinsta.com/knowledgebase/dns_probe_finished_nxdomain/#change-dns-server" target="_blank" rel="noopener">How to Fix DNS_PROBE_FINISHED_NXDOMAIN in Chrome (7 Options)</a></p><p><a href="https://cloud.tencent.com/developer/article/1173761" target="_blank" rel="noopener">转发表(MAC表)、ARP表、路由表总结</a></p><p><a href="https://blog.csdn.net/gatieme/article/details/50899343" target="_blank" rel="noopener">C++成员函数的重载、覆盖与隐藏详解</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/106607212" target="_blank" rel="noopener">红黑树C++源码_学习笔记</a></p><h1 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h1><p>《给青年的十二封信》<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/%E7%BB%99%E9%9D%92%E5%B9%B4%E7%9A%84%E5%8D%81%E4%BA%8C%E5%B0%81%E4%BF%A1.jpg" width="20%" height="20%"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第58周[58/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC58%E5%91%A8-58-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/93_%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80.cpp" target="_blank" rel="noopener">LeetCode/93_复原IP地址</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：如何改变思维方式并选择自己的未来？</p><p></p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=668255654&bvid=BV1ba4y1e7u3&cid=194782965&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><br>是的，我们也许无法改变外界正在发生的事情，但是我们可以改变我们自己的想法，改变自己的行为，面对一些事情，我们可以用老子道德经中的结语”人之道，为而不争”，尽管有可能没有好的结果，尽管事情很可能不受我们个人的掌控，但仍然保持乐观，做自己觉得正确的事情. 这就有意义<p></p><p>就像演讲中说的一样：<br>Yes, living now feels out of control. It feels frightening and scary and new. But let’s not falter at this most crucial of transitions that is coming at us right now. Let’s face it with stubborn and determined optimism. Yes, seeing the changes in the world right now can be painful. But let’s approach it with love.</p><p>没错，当前的形势难免让我们感到手足无措。我们也因此感到惊恐、畏惧和意外。但是面对即将到来的一系列最重要的转变，我们要保持坚定的信念。让我们用顽固且坚定的乐观主义一起面对。没错，日睹当今世界上发生的变化可能会让人痛苦。但是，让我们用大爱来迎接它们。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/laoyang360/article/details/11908731" target="_blank" rel="noopener">深入浅出变长结构体</a></p><p><a href="https://zhuanlan.zhihu.com/p/34660259" target="_blank" rel="noopener">RAII原理介绍</a></p><p><a href="https://www.zhihu.com/question/22111546" target="_blank" rel="noopener">C++11的右值引用</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/106452956" target="_blank" rel="noopener">C++面试实现string类_一种正确写法</a></p><h1 id="Book-《穷查理宝典》"><a href="#Book-《穷查理宝典》" class="headerlink" title="Book-《穷查理宝典》"></a>Book-《穷查理宝典》</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/%E7%A9%B7%E6%9F%A5%E7%90%86%E5%AE%9D%E5%85%B8.jpg" width="20%" height="20%"></p><p>前面是精华，后面有点多，建议跳看</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第57周[57/521]-《爱的博弈》</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC57%E5%91%A8-57-521-%E3%80%8A%E7%88%B1%E7%9A%84%E5%8D%9A%E5%BC%88%E3%80%8B/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%B7%B1%E4%BF%A1%E6%9C%8Dcpp%E7%9A%84F%E5%8D%B7_2020.5.23%E5%81%9A" target="_blank" rel="noopener">深信服cpp的F卷</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：永不言弃！</p><ul><li>想想自己坚持完成一件事情之后，自己会因此而感到骄傲自豪</li></ul><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=328142481&bvid=BV1vA411t7PQ&cid=192263379&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.zhihu.com/question/29769130" target="_blank" rel="noopener">如何解决 GitHub 提交次数过多 .git 文件过大的问题？</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/Anton8801/article/details/94282363" target="_blank" rel="noopener">升级CMake版本从2.8.11到3.6.2 CentOS Linux</a></p><p><a href="http://reckful.studio/2018/04/04/Bo/Bo%2005%20-%20%E6%9B%BE%E5%8D%9A%E5%BD%92%E6%9D%A5%EF%BC%9A%E7%9F%A5%E4%B9%8E%E2%80%9C%E5%8B%83%E5%AD%A6%E2%80%9D%E4%BA%9A%E6%96%87%E5%8C%96%E7%9A%84%E6%A8%A1%E5%9B%A0%E4%B8%8E%E8%BF%B7%E6%80%9D%20-%20%20RMyzc/" target="_blank" rel="noopener">Bo 05 - 曾博归来：知乎“勃学”亚文化的模因与迷思</a></p><p><strong>看见更多思想的可能，取之精华，去其糟粕</strong></p><h1 id="Book《爱的博弈》"><a href="#Book《爱的博弈》" class="headerlink" title="Book《爱的博弈》"></a>Book《爱的博弈》</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/%E7%88%B1%E7%9A%84%E5%8D%9A%E5%BC%88.jpg" width="20%" height="20%"></p><p>感觉到的精髓:<br>先共情理解，思考对方的想法，然后再思考自己要表达什么，简直可以用在世界任何地方任何事情上(也许有点夸张，但真的感觉超好用)</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第56周[56/521]-《人生的智慧·如何度过幸福的一生》</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC56%E5%91%A8-56-521-%E3%80%8A%E4%BA%BA%E7%94%9F%E7%9A%84%E6%99%BA%E6%85%A7%C2%B7%E5%A6%82%E4%BD%95%E5%BA%A6%E8%BF%87%E5%B9%B8%E7%A6%8F%E7%9A%84%E4%B8%80%E7%94%9F%E3%80%8B/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%B7%B1%E4%BF%A1%E6%9C%8Dcpp%E8%BD%AF%E5%BC%80A%E5%8D%B7_2020.5.11%E5%81%9A/C%E6%A0%88%E5%BC%B9%E5%87%BA%E6%89%80%E6%9C%89%E5%8F%AF%E8%83%BD%E9%A1%BA%E5%BA%8F.cpp" target="_blank" rel="noopener">栈弹出所有可能顺序</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/mind-cafe/the-magic-of-the-early-morning-5a7ad5b16512" target="_blank" rel="noopener">The Magic of the Early Morning</a><br>其实也许有些人的静静时间是凌晨</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://juejin.im/entry/5cc270675188252d6809c6d3#comment" target="_blank" rel="noopener">为什么HTTPS比HTTP更安全？</a></p><p><a href="https://juejin.im/post/5c9b61576fb9a070f653557d" target="_blank" rel="noopener">初探布隆过滤器</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/106177162" target="_blank" rel="noopener">32g<em>2个2t文件_qq号交集</em>腾讯后台场景面试题</a></p><h1 id="Book《人生的智慧·如何度过幸福的一生》"><a href="#Book《人生的智慧·如何度过幸福的一生》" class="headerlink" title="Book《人生的智慧·如何度过幸福的一生》"></a>Book《人生的智慧·如何度过幸福的一生》</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/%E4%BA%BA%E7%94%9F%E7%9A%84%E6%99%BA%E6%85%A7.jpg" width="20%" height="20%"></p><h2 id="总的核心-怎么幸福"><a href="#总的核心-怎么幸福" class="headerlink" title="总的核心-怎么幸福"></a>总的核心-怎么幸福</h2><p>叔本华认为，人类有两大最常见的愚蠢，第一是“不是在他自身的本质中去寻求幸福，而是在别人看待‘他是什么’中寻求幸福”，也就是说，太在意别人的看法，为别人而活。第二是牺牲健康去谋求别的东西，不明白一个健康的乞丐比一位多病的国王要幸福得多。</p><p>在是否幸福这件事情上，个人的人格、气质、心态、信仰，比汽车、房子、珠宝等更为重要。也就是说，你的个性才是最宝贵的财富。你需要去追求物质、名誉，但你更需要追求的，是你独立而健康的个性。正是在这个意义上，叔本华才会说：“个性远比民族性更重要。”</p><h2 id="虚荣与骄傲"><a href="#虚荣与骄傲" class="headerlink" title="虚荣与骄傲"></a>虚荣与骄傲</h2><p>虚荣和骄傲的差别在于：骄傲是坚信自己在某一方面拥有至高无上的价值；而虚荣是渴望别人相信自己具有某方面的价值，通常还伴随着一种隐秘的希望—希望通过唤起别人的确信，最终能使自己同样确信。<br>骄傲源于内，是对自我的一种直接的欣赏。虚荣则是渴望能从外界间接获得这种自我欣赏。<br>虚荣自负的人通常喜欢夸夸其谈，而骄傲自大者则多半沉默寡言。但是虚荣的人既然一心争取别人的认可，那么就应当意识到，就算自己的确有很好的谈资，但也许保持适当的沉默，比聒噪更容易获得他人的好感。</p><p>不是任何人都能成为骄傲的人，普通人只能做做样子，他们很快就会放弃扮演骄傲，回到自己的本来面目。唯有坚定不移地确信自身具有无与伦比的价值和特殊的重要性，才会让一个人产生君临天下般骄傲的感觉。当然他的这份确信很有可能只是误会，或是性格使然，但只要他对自己的价值深信不疑，就无损他的骄傲。植根于信念的骄傲，就像其他形式的知识，已然成为一种客观存在的品质，而非我们的主观意识。<br>虚荣是骄傲最大的敌人，也是最大的障碍。骄傲的前提条件就是对自己的价值确信不疑，而虚荣则是为了博取他人的赞扬，从中获得对自我价值的肯定，处心积虑讨好别人，四处逢迎。<br>骄傲常常引来诋毁和抨击。但我猜想，诋毁抨击别人的，多是那些自身没什么可骄傲的人。<br>考虑到大多数人的厚颜无耻，但凡自己具有任何长处或优点，人们就应该把它们牢记于心—如果我们善意地忽略自己的优势，与其他人过从密切，那么那些人肯定会把我们当作同一级别的自己人来对待。</p><p>这样我们就可以理解，何以世上最虚荣的人总是喜欢谈论荣光，将之视为信仰，视为建功立业和创作出伟大作品的原动力。但从本质上来说，名气只是次要的，只是价值的衍生品，是贡献的回声或映射，就仿佛一个影子，或是标记。无论如何，使得别人崇拜你的，必定比崇拜本身更有价值。盛名不能带来幸福，但令人享有盛名的东西，也就是人们创造出的成绩或贡献，一定能让人感觉幸福。或者更确切地说，创造出这些成绩或贡献的，是人自身价值带来的思想和能力，无论是道德方面还是智力方面，这才是让人感觉幸福的根本所在。<br>一个人的天性中最好的一面，必定是对他自己要比对其他人更加重要。他反映在别人脑中的样子，以及别人对他的评价，只能对他产生十分次要的影响。应当出名却默默无闻的人，其实拥有了更重要的幸福元素，这样的幸福应当可以安慰他在其他方面的不如意。</p><h2 id="关于金钱"><a href="#关于金钱" class="headerlink" title="关于金钱"></a>关于金钱</h2><p>人们常常因为渴望金钱、热爱金钱胜过其他一切，而受到谴责。但实际上，人类天生就是热爱金钱，这种热爱是不可避免的。因为金钱啊，就像是不知疲倦的希腊海神，能够满足人类对一切物品的需求和各种欲望。其他的任何东西，一次只能满足一个愿望、一项需求：饿了才需要食物；想喝的时候，酒才醇美；病人需要药物；只有在冬天才需要穿裘皮大衣；而爱情，只对年轻人来说是绕不开的，诸如此类。所有这些都只是相对的“好”，只有金钱才是绝对意义上的“好”—它并不只是满足某一特定的具象的需求，金钱甚至可以满足一切抽象的需求。</p><h2 id="感受力与智慧"><a href="#感受力与智慧" class="headerlink" title="感受力与智慧"></a>感受力与智慧</h2><p>伟大的智力天赋往往意味着异常敏锐的特质，会对各种形式的痛苦有着高度的敏感。这样的天赋还意味着一种狂热执着的气质，对事物的认识更鲜明、更完整。伴随而来的卓越的思考能力，和与之相匹配的更猛烈的感知能力，使他们的情感比普通人更为强烈，并深受其苦—对他们来说，世间痛苦远甚于快乐。天资惊人的人极有可能疏远其他人和他们所做的事，因为一个人自身所拥有的越多，他从别人身上所能发现、得到的就越少；对别人来说乐此不疲的事，在他看来都是浅薄无聊的。</p><p>被大自然和命运赐予了智慧的人，会小心谨慎地维持内在的幸福源泉畅通无阻—为了确保这一点，独立和闲暇必不可少。为了得到独立和闲暇，他会心甘情愿节制欲望，珍藏自己的资源，不愿像其他人一样，让自己的快乐受限于外部世界。所以，他不会被领导的期待、金钱或同事的赞赏与掌声误导，不会让自己妥协、去配合低级的欲望和庸俗的趣味。他还会遵照贺拉斯写给梅塞纳斯的书信中的建议—千万不要牺牲自我的内在去换取外在，不要用一个人整个或绝大部分的安宁、闲暇和独立，去换取荣耀、地位、头衔和名气，否则就是最愚蠢的行为—歌德就是这么干的，而我则幸运地走了相反的方向。<br>(<del>感觉是叔本华对自己孤独的宽慰</del>)</p><h2 id="个人想法"><a href="#个人想法" class="headerlink" title="个人想法"></a>个人想法</h2><p>内心的丰盈是抵御一切的良药<br>无欲则刚<br>可以更多时间关注利而不害，为而不争<br>心外无物，知行合一</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第55周[55/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC55%E5%91%A8-55-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">LeetCode236_二叉树的最近公共祖先</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：拥有的越多，就会越快乐吗？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=200560642&bvid=BV1wz411q7XA&cid=186627022&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>是啊，我们应该更加清楚自己要什么，把更多的精力放到自己真正喜欢的事情上面，这样才不愧于自己的一生</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://juejin.im/post/5a3522e96fb9a04512390548" target="_blank" rel="noopener">利用 Android 系统原生 API 实现分享功能</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/105999159" target="_blank" rel="noopener">Python3 Byte类型字符串转string常规类型</a></p><p><a href="https://www.w3xue.com/exp/article/201811/7174.html" target="_blank" rel="noopener">PYQT5登录界面跳转主界面方法</a></p><p><a href="https://www.cnblogs.com/linyfeng/p/11832237.html" target="_blank" rel="noopener">PyQt5中数据表格控件QTableWidget使用方法</a></p><p><a href="https://blog.csdn.net/u014115390/article/details/82929719" target="_blank" rel="noopener">pyqt5中的tableWidget添加checkBox、comboBox</a></p><p><a href="https://www.runoob.com/python3/python3-mysql.html" target="_blank" rel="noopener">Python3 MySQL 数据库连接 - PyMySQL 驱动</a></p><h1 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h1><p>《PyQt5快速开发与实战》<br>链接：<a href="https://pan.baidu.com/s/1pgmHMQGdmpbNWweMGgs1gA" target="_blank" rel="noopener">https://pan.baidu.com/s/1pgmHMQGdmpbNWweMGgs1gA</a><br>提取码：ekjm</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第54周[54/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC54%E5%91%A8-54-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.cpp" target="_blank" rel="noopener">Leetcode53_最大子序和</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>【TED演讲】想成为一个优秀的人，最关键的是什么？</p><ul><li>认同成长型的思维(就是认同能力是可以成长的)</li><li>学习同时教授别人如何提升自己的能力(有利于强化成长思维)</li><li>倾听自己固定型思维的内心声音，然后用认同成长型思维去反驳这些声音<div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=44870211&bvid=BV1Sb411t7hn&cid=78573568&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div></li></ul><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.lagou.com/lgeduarticle/109104.html" target="_blank" rel="noopener">PyQt完整入门教程</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/C%2B%2B/learn/%E7%8E%8B%E9%81%93OS" target="_blank" rel="noopener">王道OS学习笔记</a></p><h1 id="Book《生命因你而火热》"><a href="#Book《生命因你而火热》" class="headerlink" title="Book《生命因你而火热》"></a>Book《生命因你而火热》</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/%E7%94%9F%E5%91%BD%E5%9B%A0%E4%BD%A0%E8%80%8C%E7%81%AB%E7%83%AD.jpg" width="20%" height="20%"></p><p>这本书是新裤子乐队的主唱彭磊，键盘手庞宽写的他们的乐队的经历，时间跨度从1995年左右到2017年左右，记录了中国和国际摇滚乐的一些他们看到的变化，然后也能看到一些中国的生活痕迹和外国的生活痕迹</p><p>给我的感受是，他们都是一些怪才，有很多的行为我甚至可能都不理解，但是我羡慕他们，他们有热爱，知道自己想要什么，人生的大部分时间都花在了自己想做的事情上面，而只有很少的时间是为了生存而做一些事情，更多的是自己喜欢的创作</p><p>让我看到了人生的多种可能，让我能够更加包容地看待一些别人的行为，并且让我自己更坚定了找寻自我，做自我的想法</p><p>感谢这本书</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第53周[53/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC53%E5%91%A8-53-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/23_%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.cpp" target="_blank" rel="noopener">LeetCode23_合并K个排序链表</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：如何成长为“人”？</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>个人成长对每个人都很重要，“个人”没有人可以代替你，“成长”则意味着数百万个微不足道的小进步，个人成长的整个过程困难多了，甚至可以说“糟透了”，但如果我们不断地用新的思维模式打破旧的思维模式，不再急于批评自己，不再浪费生命，我们会等到“彻底改变”那一刻。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>正如视频中说的，如果你骨折了，那么你打石膏，让你好起来的是你的腿脚自己的自愈能力，而不是让你又不能动又痒的石膏，但是石膏是一个保证你专心自愈的外力，所以我们生活的恶习其实也是可以治愈的，只要我们让自己装上<strong>思想的石膏</strong>，那我们的思想就能够自愈—-<strong>当然这很痛苦，不过如果你撑过来了，那么你将获得新生！</strong></p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=795448405&bvid=BV1HC4y1W7Vj&cid=182618348&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.cnblogs.com/yamin/p/7111397.html" target="_blank" rel="noopener">Anoconda安装后Python环境混乱怎么办</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/105739314" target="_blank" rel="noopener">Anoconda(python3.7)安装pyQt5会导致Spyder无法使用的一些建议</a></p><h1 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h1><p>2019 王道考研 操作系统—-个人认为讲的真好，非常适合OS入门</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=70156862&bvid=BV1YE411D7nH&cid=121505884&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第52周[52/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC52%E5%91%A8-52-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/466_%E7%BB%9F%E8%AE%A1%E9%87%8D%E5%A4%8D%E4%B8%AA%E6%95%B0.cpp" target="_blank" rel="noopener">466_统计重复个数</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么70%的成功者都是性格内向？<br>从小我们接受的教育，大概就是要外向，内向则以为着孤僻，不快乐，融进集体，但你真正了解内向性格的力量吗？我们以为外向者更容易成功，但其实，70%的成功者都是性格内向的。例如爱因斯坦、比尔•盖茨、沃伦•巴菲特、斯皮尔伯格、村上春树……</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=45896253&bvid=BV1ob411Y7cS&cid=80434897&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>我感觉这个演讲的逻辑还可以改善一点点，可能是我们的思维方式不太相同</p><p>这个演讲主要是讲我们应该合理地处理独处的时间，学会探索自己的内心深处的想法，学习独立思考，这样更容易提高成功的概率</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/Quincylk/article/details/84973962" target="_blank" rel="noopener">Chrome 开发者工具(DevTools)中所有快捷方式列表</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/C%2B%2B/learn/4_%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86" target="_blank" rel="noopener">内存管理学习笔记</a></p><h1 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h1><p>设计模式</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=59120504&bvid=BV11t411V7vT&cid=103025925&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第51周[51/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC51%E5%91%A8-51-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98_16.03._%E4%BA%A4%E7%82%B9.cpp" target="_blank" rel="noopener">LeetCode/面试题<em>16.03.</em>交点</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>If you do that journey(disciplined life) , you will get to have the life you deserve.<br>TED演讲：如何摆脱“快乐陷阱”？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=370245910&bvid=BV1aZ4y1x7CB&cid=175516248&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/105470743" target="_blank" rel="noopener">vscode中编译c++文件No such file or directory</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/105471046" target="_blank" rel="noopener">null character(s) ignored</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/105471278" target="_blank" rel="noopener">VScode无法运行中文路径的cpp文件</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/105439314" target="_blank" rel="noopener">sizeof()计算嵌套结构体</a></p><h1 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h1><p>侯捷 讲解C++内存管理（全60集）</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=59382146&bvid=BV1st411G7b7&cid=103472778&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第50周[50/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC50%E5%91%A8-50-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/460_LFU%E7%BC%93%E5%AD%98.cpp" target="_blank" rel="noopener">LeetCode/460_LFU缓存</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：你想做什么样的工作?<br>No asking other what you want to be? Just ask other what’s your story?<br>Do what makes you happy rather than a job.</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=752714217&bvid=BV1Tk4y1R79d&cid=174258431&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="http://boolan.com/jjhou" target="_blank" rel="noopener">走进侯捷的程序人生</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/C%2B%2B/learn/2_C%2B%2BSTL%E4%B8%8E%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7-%E4%BE%AF%E6%8D%B7" target="_blank" rel="noopener">C++STL与泛型编程高级-侯捷_学习笔记</a></p><h1 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h1><p>侯捷——C++11新特性</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=51863195&bvid=BV1p4411v7Dh&cid=90793002&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第49周[49/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC49%E5%91%A8-49-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/203_%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.cpp" target="_blank" rel="noopener">LeetCode/203_移除链表元素</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/@krisgage/8-things-i-learned-reading-50-books-a-year-for-7-years-cb11c4acffb1" target="_blank" rel="noopener">8 Things I Learned Reading 50 Books A Year For 7 Years</a><br>Once you get enough of an answer to act on, stop reading and start doing.<br>是啊，读书如果是为了获取答案的话，那么获取到了答案之后请立马付诸于行动</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/105121373" target="_blank" rel="noopener">C++ 向上与向下类型转换（static_cast与dynamic_cast）</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/105082711" target="_blank" rel="noopener">函数指针，指针函数，数组指针，指针数组_核心剖析</a></p><h1 id="Book-《C-STL与泛型编程高级-侯捷》"><a href="#Book-《C-STL与泛型编程高级-侯捷》" class="headerlink" title="Book 《C++ STL与泛型编程高级-侯捷》"></a>Book 《C++ STL与泛型编程高级-侯捷》</h1><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=48068999&bvid=BV1Yb411p7UK&cid=84206168&page=46" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>讲解细致入微，真滴对cpp理解的提升帮助很大</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第48周[48/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC48%E5%91%A8-48-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/945_%E4%BD%BF%E6%95%B0%E7%BB%84%E5%94%AF%E4%B8%80%E7%9A%84%E6%9C%80%E5%B0%8F%E5%A2%9E%E9%87%8F.cpp" target="_blank" rel="noopener">LeetCode/945_使数组唯一的最小增量</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>这个部分看了好多TED,发现有的真的感觉不太能感受他们的思想,所以只选择了如下两个分享心得<br><a href="https://www.bilibili.com/video/av97547446" target="_blank" rel="noopener">TED演讲：专注的艺术</a></p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=97547446&cid=166526459&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>是的，我们可以自己选择我们是否专注，只要我们愿意</p><p><a href="https://www.bilibili.com/video/av97268607" target="_blank" rel="noopener">6个迹象表明，你该离开最好的朋友了</a></p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=97268607&cid=166048416&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>是的，我们自己才是陪伴自己一辈子的人，对自己好一点，如果出现如下情况你就可以选择离开你的朋友了</p><ul><li>你在怀疑你们的友谊(双方没有话题硬是尬聊等等事情造成不适的感觉)</li><li>你们再也不交流(即是你主动发消息别人也不回)</li><li>想要追求的东西不同，并且差别很大，劝对方为了自己放弃他们的目标，到头来只会让对方恨你(<strong>不要轻易劝别人改变生活方式</strong>)</li><li>对方辜负了你的信任，欺骗你</li><li>你是唯一坚持的人，这样会收到很多拒绝，很不喜欢你的人待在一起会伤害你的自尊</li></ul><p><strong>放弃一个自己喜欢的人，是你这辈子做过的最困难最痛苦的决定之一，在接受现实之前，你可以会经历一个由愤怒，拒绝，悲伤不同阶段组合而成的伤心循环，但是经历了这一切，你心里会明白这是一个正确的决定，生活总会翻篇</strong></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104972297" target="_blank" rel="noopener">深入理解指针数组、数组指针、函数指针、函数指针数组、指向函数指针数组的指针</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104945622" target="_blank" rel="noopener">从复数类实现中看到精髓—面向对象高级开发学习系列</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104960554" target="_blank" rel="noopener">从String类实现中看到精髓—面向对象高级开发学习系列</a></p><h1 id="Book《侯捷-C-面向对象高级开发（全集）》"><a href="#Book《侯捷-C-面向对象高级开发（全集）》" class="headerlink" title="Book《侯捷 C++面向对象高级开发（全集）》"></a>Book《侯捷 C++面向对象高级开发（全集）》</h1><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=63151451&cid=121467060&page=11" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>对于只会C++刚入门的同学是非常好的学习资料，可以深入理解面向对象中的一些操作，可以看我的Share(我的学习笔记)</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第47周[47/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC47%E5%91%A8-47-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/695_%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF.cpp" target="_blank" rel="noopener">LeetCode/695_岛屿的最大面积</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/better-programming/why-rust-d52516e70ab8" target="_blank" rel="noopener">Why Should You Learn Rust?</a><br>曾经我认为C/C++不安全没什么大不了的，我觉得每一个优秀的工程师都应该去理解那些细枝末节。<br>所以每当我看到<strong>Java等其他语言总是说他们很安全的时候，可以让工程师们更加专注地关注业务方向的逻辑代码</strong>，我总是不以为然，最近以来越来越觉得其实有安全保护是一件好事情，这其实是一种进步，一种趋势，就像操作系统把复杂的和各种外设打交道的代码封装成为一个个系统API，系统功能开发商把自己能提供的技术支持封装成为SDK一样，这确实大大减少开发成为，提高了生产力，这是一种趋势，就像我们人类进化历史一样，不断地使用着更高级的工具，所以我现在也越来越赞同这种行为了，不过我觉得一个专家级别的工程师还是应该知道工具是怎么造出来的，这样才能够更好的使用甚至改造工具。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.zhihu.com/question/32087709" target="_blank" rel="noopener">如何正确通过 C++ Primer 学习 C++？</a></p><p><a href="https://www.zhihu.com/question/22608820/answer/21968467" target="_blank" rel="noopener">Linux C++ 服务器端这条线怎么走？一年半能做出什么？ - 陈硕的回答 - 知乎</a></p><p><a href="https://tding.top/archives/73ce4e7.html" target="_blank" rel="noopener">Hexo-NexT7.x 新增友链</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/jsdelivr%E5%8A%A0%E9%80%9F%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD-raw-github%E8%A2%ABban%E4%B9%8B%E5%90%8E%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AEgithub%E8%B5%84%E6%BA%90/">jsdelivr加速资源加载_raw.github被ban之后如何访问github资源</a></p><h1 id="Book《饱食穷民》"><a href="#Book《饱食穷民》" class="headerlink" title="Book《饱食穷民》"></a>Book《饱食穷民》</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/%E9%A5%B1%E9%A3%9F%E7%A9%B7%E6%B0%91.jpg" width="20%" height="20%"></p><p>读完这本书之后，心里一阵又一阵的恶心感翻涌起来</p><p>虽然本书在国内出版距原作在日本上市有近二十五年的时间差，书中所述的不少事情也已经过去了三十多年甚至更久(1980-1990年的故事—日本的计算机革命比我国早很多很多)，但读过本书的读者一定会发现，如今发生在我们身边的一些社会现象和书中所述存在惊人的相似之处。<br>比如，日本当年盘踞在车站前的小微贷，如今早已将阵地转移到了手机和互联网上。日本当年红极一时的自我启发活动，如今也包装成精美的个人提升、企业培训课程粉墨登场，令许多企业管理层与普通白领趋之若鹜，不惜花高价去学习。从近来引发社会广泛关注的“996工作制”中，译者也仿佛看到了很多日本上班族日夜拼命工作的身影。</p><p>书中说：酒精成瘾、赌博成瘾、购物成瘾、药物成瘾、拒食过食呕吐、工作成瘾、性成瘾，甚至还有偷窃成瘾、从贷款公司借贷和刷信用卡成瘾，人类的成瘾行为多种多样。</p><p>其中主要描述了四个大块</p><h2 id="高价的个人提升课程"><a href="#高价的个人提升课程" class="headerlink" title="高价的个人提升课程"></a>高价的个人提升课程</h2><p>摘录其中两段:</p><p>“在这样一种氛围里，讲师开始让我们讲异性关系，还有性经历。后来我回想起来特别厌恶，但是当时不知怎么的，就把和前男友的关系，还有自己的性经历全都一五一十地说了出来，有个女人还说曾经被父亲性侵……整个现场，就是那种虽然是陌生人，但完全不陌生的感觉，人与人之间没有任何壁垒，好像大家的关系都变得无比亲密一样。所有人情绪都很激动，甚至男女也会拥抱，还有亲吻的场面发生。我也说了很多难为情的话……之后，先后有三个人对我说想和我交往。我明明说了好多前男友的坏话，也不知道他们是怎么想的，还想和我交往，我也没有答应他们……”</p><p>从由香里的讲述中我们可以看出，这种活动可以让那些苦恼于“不会珍爱自己的人们”通过这种不可思议的感情体验——尽管是一种人工营造出来的虚拟的感情体验——爱上自己，能够接受自己是世界上独一无二、无可替代的存在，并享受其中的快感。<br><strong>我从其他参加者口中也听说过类似的感想——自从参加过活动之后，体会了温柔的情感，在邂逅了自己之后能够爱上自己了，自己也变得更能够接受其他人了。也就是说，其实很多人都存在自卑心理，他们的内心被自己的刑具折磨得血流不止，还要苛责自己：“为什么你这么没用！”</strong><br><strong>脑子聪不聪明，学习、工作成绩好不好，有没有能力迅速完成任务，对公司有没有贡献……他们内心的刑具，就是这些丈量、判断个体价值高低的价值观、人生观。也可以说，正是这些价值观建构的体系驱赶着人们陷入无限竞争的社会。</strong></p><h2 id="借贷成瘾"><a href="#借贷成瘾" class="headerlink" title="借贷成瘾"></a>借贷成瘾</h2><ul><li>证券行业和保险行业的人们为了业绩为了升值从贷款公司借贷和刷信用卡成瘾破产</li><li>还有一些人因为借贷而感觉突然有钱的感觉很爽，于是就很挥霍，然后借贷成瘾破产</li></ul><p>这章的结尾是这样写的：</p><p>“为什么人们不顾自己的偿还能力，也要从信贷公司借贷，或是用信用卡购物呢？这绝不仅仅是表面上的虚荣心在作怪，而是出于一种人们在苦闷中试图证明自己的心理，证明自己能够融入这个社会，证明自己没有落后，证明自己不低人一等……”X先生如是说。但是，为了证明自己而买的东西，是不是真的能带来幸福，这才是最大的问题。X先生用希腊神话中点石成金的迈达斯国王来举例。<br>“国王点石成金，明明是一个求之而不得的大好事。但是他想喝水，却连杯子带水一起变成了金子，而根本喝不到真正想喝的水……这则希腊神话的故事，难道不是跟我们现在面临的状况非常相似吗？<strong>我们追求物质上的富裕，但当这个世界真正被物质上的财富所充斥的时候，我们却得不到真正想要的东西……这才是真正的贫困。</strong> 退一步讲，如果像迈达斯国王一样能够点石成金倒也还好，然而我们所碰触的东西非但不能成金，反而会成为无用的垃圾……”</p><h2 id="工作成瘾而被同质化"><a href="#工作成瘾而被同质化" class="headerlink" title="工作成瘾而被同质化"></a>工作成瘾而被同质化</h2><ul><li>这里主要讲的是计算机工程师们，导致我都惊呆了，不过感觉应该没有那么夸张吧</li></ul><h3 id="一开始我感觉还挺好"><a href="#一开始我感觉还挺好" class="headerlink" title="一开始我感觉还挺好"></a>一开始我感觉还挺好</h3><p>“跟计算机打交道的工作，跟一般人想象中的‘劳动’是完全不同的。这首先是因为工作内容非常有趣，也可以说充满创造的乐趣。它会刺激人的好奇心。从事过这个行业的人不用我说就能明白，而没从事过的人恐怕就很难理解。”<br>川越和臣是一名从业二十年的老资历工程师。为什么工程师的工作强度明明这么大，却还会有人奋不顾身地投入其中呢？他回答了我的疑问。<br>“编程的时候，就像是屏住呼吸向前猛跑一样，会彻底忘记时间。将自己设计出来的逻辑输入电脑之后，无论是否正确，电脑都会给出结果。如果出现问题，就会停下来思考，然后再次输入自己设计的逻辑，电脑马上又会输出结果。这种你来我往的过招实在太有趣了，渐渐地，这种趣味就会像毒品一样作用于你的身体。这样一来，无论你在终端机前坐几个小时，身体都不会觉得疲劳。只要是软件技术人员，无论是谁几乎都会有相同的感觉。”<br>不知道是不是因为这个工作产生了一种像是吸毒一样的沉醉之感，工程师们仿佛把自己装进了一个透明的胶囊一样，不愿再和外界接触。<br>“编程时会在脑海里一直沿着逻辑进行思考，一旦思考被打断，重新回到正轨是非常浪费时间的。所以在工作中如果跟程序员搭话，虽然他表面上会理你，但心里其实很不情愿。也就是说，感觉和人打交道特别麻烦。因为他们都是这样的人，所以就算晚上放下手头的工作准备回家，写了一半的程序也会跟过来。不是说把程序放进公文包拿回家，而是说会在脑海中挥之不去。”</p><p>虽然程度上有深有浅，但有一点可以肯定，那就是工程师们都十分热爱自己的工作。<br>据资深工程师川越和臣说，开发计算机软件的工作会刺激人对知识的好奇心，独具趣味。不仅如此，每名工程师编程都有其独特的个性，如果有一百名工程师同时开发一个系统，那这个系统中就会有一百种独具个性的程序。软件开发就是这样一种富于创造性和个性的工作。<br>“说得稍微夸张一些，自己写的程序只有自己才能看懂。自己可以成为程序的主角，我感觉软件开发和其他工作相比起来最大的魅力就在于此。”</p><h3 id="后面看得有点想哭"><a href="#后面看得有点想哭" class="headerlink" title="后面看得有点想哭"></a>后面看得有点想哭</h3><p>“计算机的世界里，不是1就是0，不是正确就是错误，不是黑就是白。所谓的‘中间’‘灰色’‘暧昧地带’是不存在的。”<br>从早到晚面对计算机，在沉重的心理压力下，连思考方式都要和机器合一。长此以往，人会产生什么变化呢？</p><p>“我回了父母家，跟他们聊天。然后，我就觉得明明对话的内容跟以前没什么两样，但心里却忽然焦躁起来。你们说话再干脆一点！再快点，别绕弯子，先告诉我结论！是对是错，是黑是白给我个确切说法！就是这样的感觉。”<br>因为计算机是一个逻辑关系的世界，不是黑就是白，不是正确就是错误，不是A就是B。村林说他担心如果从早到晚与计算机为伴，人类的思想会不会也逐渐被计算机同化，但他却没发现，自己已经开始了被同化的进程。</p><p>“父母大概也察觉到了我的变化。我妈对我说：‘你以前都挺乖的，怎么现在变得这么急躁了，像变了个人一样？’被她这么一说，我才猛然回过神来。我的生活，每天二十四个小时里，有十多个小时都在跟一个不允许‘暧昧’的人对话，剩下的时间都是独处，也没有人说个话。”</p><p>像村林这样的经历绝非个例。我还采访了多位从业二十多年的资深工程师，他们也有过类似的体验。<br>“如果一件事不是黑白分明，我心里就会着急得不行。一件事非得分出个是非对错不可。所以看人的时候，心里总觉得非得给他定性、分群才舒服。潜意识里就会认为必须给一个人定下来是喜欢还是厌恶……跟妻子对话的时候，也会忍不住呵斥她，说‘给我个确切说法！’‘结论是什么！’之类的话。本来，我就不喜欢那些乱七八糟的烦心事。平时除了‘洗澡’‘吃饭’‘睡觉’这些必要的话以外，我都懒得张嘴。”</p><h3 id="后来甚至有点害怕"><a href="#后来甚至有点害怕" class="headerlink" title="后来甚至有点害怕"></a>后来甚至有点害怕</h3><h4 id="强迫下属成为女友"><a href="#强迫下属成为女友" class="headerlink" title="强迫下属成为女友"></a>强迫下属成为女友</h4><p>“也许坐在终端机前就是他们唯一的兴趣。和电脑打交道，就能获得心灵的安宁——这种体验我也有过。机器就是自己存在的意义，没了机器，就没了一切——这样的男人太多了。他们只要坐在计算机前，就不再孤独。对于这种男人，我感觉不像是什么‘男人’，倒是觉得……像植物一样。”<br>“会这样觉得吗？”<br>“会的，这种感觉很强。”<br>大概是以前发生过什么事情，给她留下了深刻的印象。正当我观察她的面部表情，想要一窥端倪的时候，她忽然讲了一件很奇怪的事情。<br>在她的公司，每当有新人加入进来，都会有一名男性老员工对新人进行一对一的指导。负责指导她的，是一名三十三岁的单身男人。<br>“他也是个无比喜欢计算机的人。有一次他把我带进一个能从里面反锁的机房……”<br>他把身子紧紧地贴在她身上，强迫她和自己交往。她说“不行，我已经有心上人了”，然后从机房里跑了出来。然而第二天，他又把她叫进了机房。<br>“我忍无可忍，大声对他说：‘看到你的脸我就想吐！’但是，他却面不改色地看着我……”<br>没过多久，癫狂的求爱以电子邮件的形式发到了她的邮箱里。<br>“我要先杀了你然后再自杀！”<br>“我要在你面前从楼上跳下来给你看！”<br>“你给我记着！我一定会报仇的！”<br>面对屏幕上整齐排列的文字，她坐在计算机前不寒而栗。<br>“和计算机打交道，说白了就是一个人让机器服从自己的过程。听起来是不是和强奸有相似之处呢？所以，他对女性也会用同样的手段……”<br>植物一样的男人内心深处潜伏着狂暴的黑暗。她的故事，是另一缕照亮“计算机社会与人类”这幅画卷的光线。</p><h4 id="压力发泄在家庭里"><a href="#压力发泄在家庭里" class="headerlink" title="压力发泄在家庭里"></a>压力发泄在家庭里</h4><p>“白天做了这么多事情，到了晚上我也很累。只要他回来的时候我已经躺下了，他就会故意把我叫起来，坐在床边吃起开水泡饭来，还跟我说：‘你看看你，就给我吃这个’……”<br>有一次，他还故意把夏子买来的白衬衫撕得粉碎，扔进垃圾桶，并把她的衣柜用油性笔涂得漆黑。<br>“前几天他在外面喝醉了，回家之后不小心碰倒了花瓶。也不知道花瓶里的花怎么惹到他了，他把花扯得稀烂，然后哗啦哗啦地把花瓶里的水全部泼在了地毯上。我根本管不了他，只好任他在那胡作非为。接着他竟然从自己的衣柜里拿出出门用的西装，用西装擦地。真是精神错乱……”<br>夏子说着，神情中充满了失落。<br>丈夫在外面积攒了满腹压力，将它们全部带回家发泄在妻子身上。那么，夏子究竟是怎样看待自己的丈夫的呢？<br>“他从来没正眼看过我。一般人结婚之前，不是都要去约会吗？大概也就是去喝个咖啡，在一起聊聊天，彼此眉来眼去什么的。但他却从来不这样……”<br>两个人见面之后，他总是一言不发地走起来。夏子只好跟着他走。他并没有什么目的地，只是自顾自地走着。<br>“只要一出去约会，他就走个不停。我们走到哪都是并排，从来没有面对面相处过。那段时间，真是被他拉着走了好多路……”<br>夏子微微笑了。她回忆起以前和丈夫的经历后对我说，他是一个从不关心自己妻子内心世界的人。<br>“他是个特别自顾自的人。我们同房的时候也是……前一阵，我才刚看过关注两性问题的心理咨询师……”<br>夏子主动提起了他们夫妻关系中最敏感的部分，继续向我讲道。<br>“我经常听其他计算机工程师的妻子说，已经好几年都没有和丈夫有过性生活。我们家不是这样，我们家那口子恨不得每天晚上都要亲热。但是，和他亲热根本不是‘两个人’‘一起’，他总是只顾自己满足，完全不顾我的感受。无论我怎么跟他提意见都不管用，他还是只管自己。最近我已经懒得跟他说这些了，就权当我帮他解决生理需要吧……”</p><p>濑山夏子向我揭开了夫妻性生活外蒙着的面纱，展示出赤裸裸的真相。<br>“上次，我还特意找了一些成人电影来给他看……虽然身为一个女人去做这种事情，说出来怕是要惹人笑话，但最后还是徒劳。他完全没有任何改变，还是只顾自己。说到底，对于他来说，我不过就是一个发泄欲望的工具而已……”<br>她的话语中全无悲伤，仿佛已经看透了一切。但这样反而更加让我感受到了她的绝望和无奈。<br>和她的对话，让我忽然想起了另一位下定决心离婚的女性。</p><p>夏子的丈夫修一，每天都要长时间、高强度地和计算机打交道。或许在如此生活的往复循环中，他在无意识中也在为自己人性的消失而焦躁不安，并将情绪向最容易屈服的妻子爆发，以此来发泄。他半夜离奇的感情爆发和对妻子近乎强奸一样的性行为，或许都是他内心悲痛的呐喊使然。<br>社会的计算机化会给人类带来怎样的变化呢？在对这一问题的不断深入采访中我发现，透过一张张看似幸福、从容的面容，却可以窥见暗示人类自身变异的世相变迁。<br>这些现象为什么会发生，我们从中又可以发现怎样的前兆呢？</p><h4 id="求高效的工作颓废了交际"><a href="#求高效的工作颓废了交际" class="headerlink" title="求高效的工作颓废了交际"></a>求高效的工作颓废了交际</h4><p>“我们人类究竟在通过计算机追求什么呢？归根结底，还是‘缩短时间’这一永无止境的任务。我们的工作就是使用各种技术，不断寻找缩短处理问题的时间的方法。所以，就连我们自身也变得急躁了起来，就连一秒、两秒的时间都无比在意……有时候就连计算机显示屏反应的时间都等不及，有人不耐烦地用手指敲打桌面，还有些人甚至使劲拍打终端机，嘴里小声咒骂着：‘这个废物，怎么这么慢’……”<br>河原千绘是公司里屈指可数的资深工程师。她回忆起多年的从业经历，向我描绘了以上这样一幅栩栩如生的软件工程师们的日常生活图景。</p><p>“虽然我们天天跟机器拼命，最终都是我们让机器按照我们的意思工作，但不知为什么，我们会觉得这是我们和机器通力协作而产生的成果。我们会觉得计算机真是惹人怜爱——既不会说人的坏话，也不会两面三刀，比人类好处多了。所以，我们坐在终端机前面的时候都会感觉浑身轻松。特别是人际关系处得不顺的时候，甚至会觉得计算机的世界简直是完美。”<br>这样一来，人际关系逐渐荒废也是自然而然的事情。甚至有很多女性系统工程师不仅不结婚，就连同居都觉得麻烦。虽然河原已经结婚，但也能非常明显地感受到，系统工程师们和异性间的性关系正变得越来越淡漠。</p><p>“这种所谓的完美主义，在人和人交往的过程中也会表露出来。很多人都无法容忍别人的缺点和错误，缺少体谅和容忍，变得跟机器一样。”</p><p>“我们人类获得生存价值感有两个条件：一是职业活动中的成就感，另一个是人际关系中获得亲密性带来的满足感。然而现代工业社会却强迫人们仅通过职业活动的成就感去获得人生的满足。极端来说，就是只要有工作，其他什么都无所谓了，根本无暇顾及排解寂寞、充实自己等方面的需求。”<br>但是，当人们因为一些原因在事业上遇到挫折，停下脚步回头看看时才发现，妻子、孩子、朋友之中，竟然没有一个能够和自己交心的人。只有坠落进孤独的无间地狱，在深不见底的寂寞之中，人们才会认识到，自己原来从来没有构建起能够在心灵上支撑自己的人际关系。<br>为什么没能够构建起正常的人际关系呢？有专家表示，个体的成长史对于人际关系的形成影响最大。</p><h2 id="呕吐"><a href="#呕吐" class="headerlink" title="呕吐"></a>呕吐</h2><p>因为一些童年原因和社会原因，有部分女性经常快速暴饮暴食然后催吐出来…</p><p>因为想到自己曾经为了医院检查吃泻药然后反胃导致的不受控制的呕吐，自己整个人都不好了，所以这一部分就不展开了</p><h2 id="本书的结尾"><a href="#本书的结尾" class="headerlink" title="本书的结尾"></a>本书的结尾</h2><p>宫崎骏导演的电影《千与千寻》中的无面男，在充满欲望的环境中失去了自我、任凭外力摆布，最后没有得到充实，仅留下了无尽的空虚。而只有拥有并坚持住自己信念的千寻和白龙，才在纷繁复杂的环境中成功找回了自己。</p><h2 id="自己的想法"><a href="#自己的想法" class="headerlink" title="自己的想法"></a>自己的想法</h2><p>感觉本书描述的东西虽然有发生，但我认为普遍上来说我观察到世界好像没有书中说的这么严重，而且我觉得凡事都具有两面性，而且书中都是用的弗洛伊德的原因论</p><p>我觉得我们应该从<a href="https://www.wolfdan.cn/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC43%E5%91%A8-43-521/">《被讨厌的勇气》那本书</a>中去发现另外一种可能</p><p>只是因为书中人物的特殊背景，看似造成了他们的悲惨畸形，但是从《被讨厌的勇气》中的目的论来思考，他们因为害怕别人的看法，所以不敢改变，不敢守住幸福的本心，所以最终成了这个样子，所以我觉得虽然环境很恶劣</p><p>但是我们依然拥有自己的选择的权利，我们可以勇敢地被别人讨厌，我们可以大胆地选择自己想要的幸福，我们可以选择保持善良和美好，去体验，去感受，去经历人生的无数的可能</p><p>所以一切都有可能，请勇敢地生活下去</p><h2 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h2><p>由于这一节的读书分享写得很长，然后自己想干脆开一个专栏，然后<br><code>hexo new &quot;每周读书分享-饱食穷民&quot;</code><br>结果打开页面不对劲，<code>layout:w</code>是个什么奇怪的属性，尝试了两次都这样，然后想想</p><p>可能是hexo都觉得我太菜了:)</p><p>后面想想好像也是，等我能写出很好的读书分享之后再开专栏吧，这里就当做自己每周个人成长看书总结分享的地方吧，233</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>jsdelivr加速资源加载_raw.github被ban之后如何访问github资源</title>
    <url>/jsdelivr%E5%8A%A0%E9%80%9F%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD-raw-github%E8%A2%ABban%E4%B9%8B%E5%90%8E%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AEgithub%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li>raw.github被ban之后如何访问github资源</li><li>jsdelivr做图床</li></ol><h1 id="raw-github被ban之后如何访问github资源"><a href="#raw-github被ban之后如何访问github资源" class="headerlink" title="raw.github被ban之后如何访问github资源"></a>raw.github被ban之后如何访问github资源</h1><p>由于<strong>众所周知</strong>的原因，raw.github无法访问了，那么我们如何下载githua上的资源呢？</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>原来的资源链接是这样的<br><code>https://raw.githubusercontent.com/wolfdan666/BlogPic/master/test.jpg</code><br>后来的资源链接就可以这样访问<br><code>https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/test.jpg</code><br>或者<br><code>https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic@master/test.jpg</code></p><h2 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h2><h3 id="CDN简介"><a href="#CDN简介" class="headerlink" title="CDN简介"></a>CDN简介</h3><p>内容分发网络（英语：Content Delivery Network或Content Distribution Network，缩写：CDN）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p><h3 id="jsdelivr简介"><a href="#jsdelivr简介" class="headerlink" title="jsdelivr简介"></a>jsdelivr简介</h3><p>jsDelivr是一款公共免费 CDN ，调用多家 CDN 保证全球服务质量、拥有多层缓存和灾后保障。也是为数不多的有 ICP 备案，提供许多中国节点的海外 CDN 服务商。</p><p>有搜索引擎，支持一键复制文件 URL 和标签，支持分发 NPM、GitHub、WordPress SVN 的文件</p><h3 id="食用姿势"><a href="#食用姿势" class="headerlink" title="食用姿势"></a>食用姿势</h3><p>把<code>https://raw.githubusercontent.com/username/repoName/branch/file</code><br>改成<br><code>https://cdn.jsdelivr.net/gh/username/repo@branch/file</code> 的形式</p><p>当然，如果你放在仓库的默认分支，还可以直接将 branch 这个关键字直接删了，变成 <code>https://cdn.jsdelivr.net/gh/username/repo/file</code> 获取</p><p>另外，如果是一些比较稳定的文件，后面不会频繁地改动，还可以发布release成一个版本，然后在 repo 后 @version 就可以引用对应的版本。</p><h2 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h2><ul><li>可以加速访问，当然现在是从无法访问变成加速访问，233</li><li>不限带宽：曾经被自己的小机的1M带宽气哭</li><li>缺点是内容大小不能超过50M，这个一般影响不是很大</li></ul><h1 id="jsdelivr做图床"><a href="#jsdelivr做图床" class="headerlink" title="jsdelivr做图床"></a>jsdelivr做图床</h1><p>看了上面的操作之后，小伙伴们有没有萌生出一种jsdelivr容许的薅羊毛姿势呢？</p><p>对了，就是当图床，<strong>当然，我们要爱护github网站，尽量少做图床使用，毕竟github好像明文推荐不这样做</strong>，朋友们适当抉择，我这里只是提供一种方式，可以自己去购买好用的CDN</p><h2 id="使用姿势"><a href="#使用姿势" class="headerlink" title="使用姿势"></a>使用姿势</h2><p>就是建立github仓库然后上传图片，这个建立仓库的这些操作相信大家能找到教程</p><p>然后就是批量修改链接，请朋友们看我的一个朋友的一片文章<br><a href="https://www.wolfdan.cn/%E8%84%9A%E6%9C%AC%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E4%B8%AD%E9%93%BE%E6%8E%A5%E7%9A%84%E6%A0%BC%E5%BC%8F/">脚本批量修改文件中链接的格式</a></p><p>当然大家也可以配合PicGO加强使用，虽然我很少这样食用，但是还是挺方便的<br>这里再推荐我朋友的文章<a href="https://www.wolfdan.cn/markdown%E5%86%99%E4%BD%9C%E8%B6%85%E6%96%B9%E4%BE%BF%E7%9A%84%E5%9B%BE%E7%89%87%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/">markdown写作超方便的图片使用方式</a><br><img data-src="https://img-blog.csdnimg.cn/20200312141832273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ldmVfZ2l2ZV91cF9kYW4=,size_16,color_FFFFFF,t_70" alt="PicGo"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://zhuanlan.zhihu.com/p/95772354" target="_blank" rel="noopener">jsDelivr | 免费加速图片等静态资源</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第46周[46/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC46%E5%91%A8-46-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/322_%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.cpp" target="_blank" rel="noopener">LeetCode/322_零钱兑换</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/on-the-couch/20-things-i-wish-id-known-in-my-20s-but-i-had-to-learn-by-myself-3ffa5525d584" target="_blank" rel="noopener">20 Things I Wish I’d Known In My 20s (But I Had To Learn By Myself)</a></p><ul><li>Holding onto things you can’t change will destroy you though, so train your eyes on the road in front.</li><li>Hurt, rejection and pain are part of the human deal. But keep learning to let go, or at least loosen your grip on it.</li><li>People you love and care about will be lost to you, and you have to find ways to deal with it. It takes way longer than you think, sometimes forever. But you need to know that you can live a good, even great, life alongside it.</li><li>其实最近有点失意，因为一些自己在意的东西(自己的技术能力被aly面试官diss..自己每天夜聊的朋友说我们想法不同而离去)都面目全非，所以看了一些其他文章都觉得没什么意思，最终看到这个，觉得很有道理</li></ul><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/qq_23974323/article/details/80067250" target="_blank" rel="noopener">nginx实现简单的图片服务器（windows）+静态文件服务器</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%EF%BC%8C%E5%B1%95%E7%A4%BAgit%E4%BB%93%E5%BA%93%E7%9A%84%E5%9B%BE%E7%89%87/">服务器搭建个人图床，展示git仓库的图片</a></p><h1 id="Book《谷歌时间管理课》"><a href="#Book《谷歌时间管理课》" class="headerlink" title="Book《谷歌时间管理课》"></a>Book《谷歌时间管理课》</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/Google_time_manage.jpg" width="20%" height="20%"></p><ul><li>“时间策略”与“时间规划”的最终结果是将通过效率化所创造的时间与精力运用到无法效率化的工作上. “人与人之间的信赖关系”,还有阅读书籍、与家人共同生活、为一些事物感动落泪、放松心情的时间等，它们都属于无法进行效率化的范畴。</li><li>瞄准自己无法掌控的终点（目标）没有任何意义</li><li>谷歌旗下还聚集了有着以下文化特征的优秀人才。例如，“Thank God，It’s Friday.（感谢上帝，星期五来啦！）”这样的句子，取开头的字母组成TGIF作为一种独有的公司文化用语。意思是出于对平安度过这一周抱着感激之心和相互慰问之意，周五晚上在办公室举行聚会。在聚会上大家就如何为社会做贡献、解决社会问题畅所欲言，这些都是发自内心的言论。例如，参观福利院之后大家发表意见，提出谷歌公司可以从哪方面提供改善手段，以此造福更多的人。虽然TGIF属于休闲的时间，但是这样的讨论却极其认真而热烈，每个人都会发自内心地考虑如何为社会做贡献，这就是谷歌公司特殊的企业文化。</li><li>吃饭睡觉打高尔夫这样的生活对社会没有任何贡献。那些漂亮话就不提了，这样的生活只能算是我一味地享受时光。更恰当地说，一想到自己成了一个只消费不生产的人，不由得感到眼前一片黑暗。与刹那间的欢乐相比，全心全意为社会做贡献，这样的生活才能长期维系下去，并能体会到真正的美。这就是我当时所确立的信念。</li><li>站在另外一个角度来看，如果基于为社会做贡献这一理念为目标全身心投入工作，就算最终失败，也能告诉世人“我这种方式会失败”的教训。这样也是为社会做贡献，我的失败也有了价值。明白这一点就会更自然而然地身负使命感，更易于下定决心采取果断行动。在我看来，将工作与为社会解决课题、为社会做贡献结合起来这样的思路，其实对自己也有益处。</li><li>上面这段话不就是马云曾经回忆创业初心时说的，我觉得这种方式能够改善我们的生活，我想把这种东西推广到中国，我不成功，有人会成功，我希望中国人早点成功</li><li><strong>有必要明确认识的是，“过于在意他人的看法会剥夺自己的时间”。—- 不要去做他人的课题(来自《被讨厌的勇气》的观点)</strong></li><li>“不客套”是一个加分项。改变在意他人看法的自己，就会减少为揣摩他人所消耗的时间，也意味着能挤出新的时间</li><li>在谷歌公司，如果认为出席某个会议没有实际意义，随时可以取消会议；或者在会议中途觉得自己没有必要参与，可以随时退出会场。这种做法已经在公司制度上做出了明文规定</li><li><strong>学习时即使还有懵懂的地方也不必在意，首先完成一个周期的工作。“虽然还有部分没弄清楚，但是拿出了成果！”“差不多弄明白了！”——必须要在最短的期间体会到类似这样的成就感与充实感，这也是我能够维持高度的工作热情，坚持走完3个月周期的秘诀。尽早享受成就感，不要纠结细节。</strong></li><li>时至今日，AI开始在各个领域崭露头角，但是这种批判新潮流的意见，无论在哪个时代都不曾缺席过。<strong>负面思想会限制自己的眼界，而且这种思想会破坏新生事物的萌芽，从这个角度来看，这样的思想得不偿失。</strong></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器搭建个人图床，展示git仓库的图片</title>
    <url>/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%EF%BC%8C%E5%B1%95%E7%A4%BAgit%E4%BB%93%E5%BA%93%E7%9A%84%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="设立多location的nginx映射"><a href="#设立多location的nginx映射" class="headerlink" title="设立多location的nginx映射"></a>设立多location的nginx映射</h1><p>原来自己的Nginx已经搭建了自己的网站，所以需要配置多个location，用第二个location来展示自己的图片，因此<strong>location如果要一个特定的url(不是<code>/</code>的时候)要使用别名，不能用root，alias指定的目录是准确的，直接指向目标文件的物理地址</strong></p><p>主要是要注意自己的第二个location下面一定要有对应的目录,<strong>然后要启动图片浏览，文件下载，就必须使用<code>autoindex on;</code></strong></p><p>需要添加的location格式如下<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原来的网站的节点</span></span><br><span class="line">location / &#123;</span><br><span class="line">    root /var/www/blog;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 为了搞自己的图床，2020年3月4日13:56:42 再来折腾</span></span><br><span class="line"><span class="comment"># 一定要在www建立img目录--这是你去访问才能看到绿锁，然后加入index.html才能看到内容</span></span><br><span class="line">location /img &#123;</span><br><span class="line">    <span class="comment">#img /var/www/img;</span></span><br><span class="line">    <span class="comment"># 好像只能使用alias，不然连nginx -t都过不了</span></span><br><span class="line">    <span class="built_in">alias</span> /var/www/img;</span><br><span class="line">    <span class="comment"># index index.html index.htm;</span></span><br><span class="line">    autoindex on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="搭建git服务器并添加git-hooks"><a href="#搭建git服务器并添加git-hooks" class="headerlink" title="搭建git服务器并添加git-hooks"></a>搭建git服务器并添加git-hooks</h1><p>看完注意点再操作<br><a href="https://segmentfault.com/a/1190000016106584#articleHeader16" target="_blank" rel="noopener">添加githooks可以看这个</a><strong> <font color="red">这里要仿造这个链接的教程再在别的目录里面进行git图片仓库的操作，然后自己之后就可以每次像给github提交一样给自己的服务器提交了(看下面我的代码)</font></strong></p><p>linux版本<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个只要做一次</span></span><br><span class="line">git remote add pic@huaweiyun git@xxxx.32.xxx.17:/home/git/img.git</span><br><span class="line">git push pic@huaweiyun master</span><br><span class="line"><span class="comment"># 之后每次的提交</span></span><br><span class="line">git pull pic@huaweiyun master</span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">"`date '+%Y-%m-%d %H:%M:%S'`"</span></span><br><span class="line">git push pic@huaweiyun master</span><br></pre></td></tr></table></figure><p></p><p>windows版本<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个只要做一次</span></span><br><span class="line">git remote add pic@huaweiyun git@xxxx.32.xxx.17:/home/git/img.git</span><br><span class="line">git push pic@huaweiyun master</span><br><span class="line"><span class="comment"># 之后每次的提交</span></span><br><span class="line">git pull pic@huaweiyun master</span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">"%date%"</span></span><br><span class="line">git push pic@huaweiyun master</span><br></pre></td></tr></table></figure><p></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>一定要让git/.ssh的所有文件的拥有者是git，否则可能导致无法免密登录<br>就是要操作<code>sudo chown -R git:git /home/git/.ssh</code></li><li>还有我们后面要启用githooks，所以不要把git的运行目录降权，否则无法使用</li><li>也可以给git添加root权限<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure></li></ul><p>找到以下内容：<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure><p></p><p>在下面添加一行：git ALL=(ALL) ALL</p><p>保存退出后改回权限：chmod 400 /etc/sudoers</p><h2 id="思考代码"><a href="#思考代码" class="headerlink" title="思考代码"></a>思考代码</h2><p>了解到了裸库上的文件是看不到的，必须通过web转化成可以看见的链接，所以现在就很好理解下面的代码了<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">GIT_REPO=/home/git/img.git</span><br><span class="line">TMP_GIT_CLONE=/tmp/img</span><br><span class="line">PUBLIC_WWW=/var/www/img</span><br><span class="line">rm -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class="line">git <span class="built_in">clone</span> <span class="variable">$GIT_REPO</span> <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line">rm -rf <span class="variable">$&#123;PUBLIC_WWW&#125;</span>/*</span><br><span class="line">cp -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class="variable">$&#123;PUBLIC_WWW&#125;</span></span><br></pre></td></tr></table></figure><p></p><h1 id="成功图展示"><a href="#成功图展示" class="headerlink" title="成功图展示"></a>成功图展示</h1><p><img data-src="https://img-blog.csdnimg.cn/20200304170709667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ldmVfZ2l2ZV91cF9kYW4=,size_16,color_FFFFFF,t_70" alt="爽"></p><h1 id="nginx配置易错点回顾"><a href="#nginx配置易错点回顾" class="headerlink" title="nginx配置易错点回顾"></a>nginx配置易错点回顾</h1><ul><li><strong>location如果要一个特定的url要使用别名，不能用root，alias指定的目录是准确的</strong></li><li><strong>然后要启动图片浏览，文件下载，就必须使用<code>autoindex on;</code></strong></li></ul><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/lizhiyuan_eagle/article/details/90639448" target="_blank" rel="noopener">Nginx一个server配置多个location</a><br><a href="https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664" target="_blank" rel="noopener">搭建Git服务器</a><br><a href="https://segmentfault.com/a/1190000016106584#articleHeader16" target="_blank" rel="noopener">添加githooks可以看这个</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>shell</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第45周[45/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC45%E5%91%A8-45-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://leetcode-cn.com/problems/implement-stack-using-queues/solution/225_cyong-dui-lie-shi-xian-zhan-by-linmin/" target="_blank" rel="noopener">LeetCode225_C++用队列实现栈</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/better-programming/10-things-every-developer-should-learn-72697ed5d94a" target="_blank" rel="noopener">10 Things Every Developer Should Learn</a><br>我的感受是”在什么山上唱什么歌”,对于特定需求,写特定代码</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/xiaohan2909/article/details/50152997" target="_blank" rel="noopener">JNI调用C++类的方式</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104531272" target="_blank" rel="noopener">脚本批量修改文件中链接的格式</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104541134" target="_blank" rel="noopener">apue中memstr.c的究极困惑解决</a></p><h1 id="Book-《人人都在说慌》"><a href="#Book-《人人都在说慌》" class="headerlink" title="Book_《人人都在说慌》"></a>Book_《人人都在说慌》</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/everybody_lies.jpg" width="20%" height="20%"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这本书主要是对于人们在google上搜索的数据信息以及平时的采访信息做对比,然后发现google上的查找数据更加精确的反应了人们内心真实的想法,特别是在私密浏览模式时候的访问数据更加如此</p><p>截取书中的一段话 :</p><p>公司可以学习如何获得更多的客户，政府可以学习如何使用报销来最大限度地提升医生的工作积极性，学生可以了解哪些学校是最有价值的。这些试验证明了大数据 能够替代 猜测、传统智慧和与实际效果相关的伪劣关系——因果关系。</p><h2 id="观点内核探讨"><a href="#观点内核探讨" class="headerlink" title="观点内核探讨"></a>观点内核探讨</h2><p>我觉得这本书和我<a href="https://www.wolfdan.cn/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC43%E5%91%A8-43-521/">之前介绍的一本哲学类的书《被讨厌的勇气》</a>从不同的角度论证了相同的观点就是说人们面对公众时总是在说谎</p><p>其实《被讨厌的勇气》更加观点深刻,因为它的观点是人们甚至对自己说话,只是自己没有发现自己对自己说谎</p><p>举一个小例子: 就是一个人说自己有童年阴影,然后就一直不和外人来往</p><p>上面的谎言是典型的原因论,认为事情都是由过去造成的</p><p>然而《人人都在说慌》这本书讲究相关性,会告诉你: 数据表明这些人和经常搜索”如何和别人来往”这些记录的人相关性极高</p><p>而《被讨厌的勇气》这本书讲究”目的论”而抛弃”原因论”,会告诉你: 这个人不敢和别人来往,怕别人不喜欢自己,所以一个人不和别人来往对于自己是”善”(有好处的),所以不和别人来往</p><p>其实这里抛弃原因论,还是会用到一些因果关系,所以这里否定原因论不是去否定因果关系,而是探求更真实的世界和更真实的自己</p><h2 id="书本评价"><a href="#书本评价" class="headerlink" title="书本评价"></a>书本评价</h2><p>此书用了大量的例子说明同一个道理,但是很多例子我并不是很感兴趣,所以我会跳读这本书,然后了解这本书的内核,自己反而更喜欢《被讨厌的勇气》这本书,当然,《被讨厌的勇气》这本书更加值得多读几次</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>关于求职面试的思考</title>
    <url>/%E5%85%B3%E4%BA%8E%E6%B1%82%E8%81%8C%E9%9D%A2%E8%AF%95%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p>自己从19年11月底听说专业里有个学后端和一个学前端的同学去了附近的某康威视实习了，然后自己也开始了关注工作招聘，一开始写简历写得很挫，加上自己长沙那边头部的一个公司正好实习生招聘，然后我就准备了一个月的算法和简历上项目的再熟悉，在截止日期前10天左右投了简历，C++开发实习，5天后进度显示<code>简历不匹配</code>，一开始心灰意冷，悲痛欲绝</p><hr><p>好了，我是菜鸡</p><hr><p>然后后面心灰意冷，准备先在学校附近找个公司历练一下，然后就在某算公司拿到了实习offer，结果本来2月10号去上班，现在因为疫情的原因，hhh，那边hr总是忽略我能不能远程办公的提问…就说过一次说开学后再去实习</p><p>然后春招来了，自己投了某里的提前内推，投了2个部门，一个收了我的简历，一个没收，一开始是没收的消息先到，然后我就以为先投那个肯定早就凉了，结果过了几天打电话来了，然后说让我准备准备，大概2月底面试</p><p>还投了之前长沙那个拒我简历的公司的测试岗，想看看里面到底有多牛逼，结果前几天一面，感觉一般，然后到现在7天了还没有消息(今天2020.2.28)</p><p>某里的面试让我很慌，因为我在网上找到仅有的两篇面经，感觉真的是难得不行，多次有放弃的念头，然后自己整个人的心态都很不好，有几天看书的状态都很差劲，直接8个小时的学习时间被我搞得每天只学习了1个小时一样…</p><p>然后这几天终于想开了</p><p>其实找工作就像谈恋爱(虽然我好像也没恋爱)，应该是一个相互挑选的过程，不应该当舔狗，因为舔狗不得好死，而且自己会很虚，而且自己并没有得到实质的实力提升，而且很容易面挂(虽然当前的实力面挂也很正常)，所以就会陷入一个怀疑人生的恶性循环之中</p><p>而且就算你面试过了，你还是为了提升自己的水平，而不是混经历，所以得出了总的核心思想是:<br><strong>快，滚去学习，静下心的专注学习，把书啃下去，就算错过了所有的面试，只要在秋招前把自己的水平提升到真正让自己有信心的水平就算自己是成功的</strong></p><p>当然如果某里最近找我面试，我也会去好好准备，不会浪费一次锻炼自己的机会，然后继续<strong>疯狂学习，疯狂啃书</strong>，如果失败了就总结经验，如果偶尔进去了，就要更加努力地啃书了，不然到时候没有把事情做好就太对不起别人了</p><p>现在还是没有面试，也还没有通知(虽然那个前辈让我准备好了和他说，但我感觉我可能要准备一万年…),所以暂时不发这篇文章，等某里的面试完了再发</p><p>总结 :</p><ul><li>找工作是双方选择的过程，一定要Peer，对等<ul><li>不对等的话，成交机会很低，会浪费双方很多时间和精力</li><li>不对等的成交也很可能会出现不愉快，就会产生不好的影响</li></ul></li><li>不管什么时候都要努力提升自己，只有自己真正有水平，有底气了，才能和更好的平台对等谈条件，而不是整天焦虑</li><li>如果水平不够，那就不要焦虑，先选择和自己Peer的平台，然后提升自己，将来有实力了才去做更有挑战的事情</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>总有一些事值得</tag>
      </tags>
  </entry>
  <entry>
    <title>脚本批量修改文件中链接的格式</title>
    <url>/%E8%84%9A%E6%9C%AC%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E4%B8%AD%E9%93%BE%E6%8E%A5%E7%9A%84%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p><strong><font color="red">着急的朋友可以直接看下面的编写脚本目录项</font></strong></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近<code>https://raw.githubusercontent.com/</code>被墙了,然后<strong>众所周知</strong>我们就无法访问上面的内容了,所以我自己用github当图床,然后我的博客现在的图片全都无法正常加载了<br><img data-src="https://img-blog.csdnimg.cn/20200227104322672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ldmVfZ2l2ZV91cF9kYW4=,size_16,color_FFFFFF,t_70" alt></p><p>所以我需要更改到国内的链接仓库或者自己自己服务器搭建的仓库,那么我就要修改我现在整整131篇博文的图片链接,我想我会烦死的,<strong>所以我就想到了自己之前学的shell脚本,自动化批量修改文件链接的格式</strong><br><img data-src="https://img-blog.csdnimg.cn/20200227104418753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ldmVfZ2l2ZV91cF9kYW4=,size_16,color_FFFFFF,t_70" alt></p><h1 id="背景二"><a href="#背景二" class="headerlink" title="背景二"></a>背景二</h1><p><strong><font color="red">我今天浏览我的blog的时候突然发现一些照片无法正常访问，然后突然想到自己之前从gitee搬迁到github的原因，就是因为gitee有1M大小的显示，一旦图片大于1M就无法正常展示</font></strong></p><p>所以2020年3月4日17:20 又一次批处理我的文件链接，并且在此之前花了整整一个下午去<a href="https://blog.csdn.net/neve_give_up_dan/article/details/104652870" target="_blank" rel="noopener">搭建我的私有服务器图床</a></p><h1 id="背景三"><a href="#背景三" class="headerlink" title="背景三"></a>背景三</h1><p>发现了cdn.jsdelivr无缝衔接github仓库，而且带宽无限，然后就用上了，毕竟自己的服务器带宽只有1M</p><h1 id="单文件测试"><a href="#单文件测试" class="headerlink" title="单文件测试"></a>单文件测试</h1><h2 id="非插入测试"><a href="#非插入测试" class="headerlink" title="非插入测试"></a>非插入测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -e <span class="string">"s/https:\/\/raw.githubusercontent.com\/wolfdan666\/BlogPic\/master\//https:\/\/gitee.com\/wolfdan\/BlogPic\/raw\/master\//g"</span> ARSTB打卡第44周-44-521.md</span><br></pre></td></tr></table></figure><h3 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h3><ul><li><code>-e</code>是表示用后面的脚本执行</li><li><code>s/./../</code>表示用<code>.</code>替换<code>..</code>,然后最后加一个<code>g</code>表示全局替换</li><li>其中对于链接中用到的每一个<code>/</code>都要在前面添加<code>\</code>来转义</li><li>最后的是要执行脚本的文件名</li><li><strong>当然这个脚本是sed执行流处理,所以不会修改文件内容,只是把修改结果打印到stdout,这里的stdout就是我们的命令行终端</strong></li><li>我们要修改文件的话,就要把<code>-e</code>改成<code>-i</code></li></ul><h3 id="结果截取片段"><a href="#结果截取片段" class="headerlink" title="结果截取片段"></a>结果截取片段</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改前</span></span><br><span class="line">(https://raw.githubusercontent.com/wolfdan666/BlogPic/master/books/%E4%B8%80%E7%A6%85_%E4%BD%A0%E6%80%BB%E8%AF%B4%E6%B2%A1%E4%BA%8B.jpg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行上面的脚本之后</span></span><br><span class="line">(https://gitee.com/wolfdan/BlogPic/raw/master/books/%E4%B8%80%E7%A6%85_%E4%BD%A0%E6%80%BB%E8%AF%B4%E6%B2%A1%E4%BA%8B.jpg)</span><br></pre></td></tr></table></figure><h2 id="插入测试-总感觉哪里怪怪的"><a href="#插入测试-总感觉哪里怪怪的" class="headerlink" title="插入测试(总感觉哪里怪怪的)"></a>插入测试(总感觉哪里怪怪的)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">"s/https:\/\/raw.githubusercontent.com\/wolfdan666\/BlogPic\/master\//https:\/\/gitee.com\/wolfdan\/BlogPic\/raw\/master\//g"</span> ARSTB打卡 第44周-44-521.md</span><br></pre></td></tr></table></figure><h3 id="解读-1"><a href="#解读-1" class="headerlink" title="解读"></a>解读</h3><p>这里就是上面的脚本把<code>-e</code>改成<code>-i</code></p><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p>sed修改文件,git查看差异<br><img data-src="https://img-blog.csdnimg.cn/20200227105615280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ldmVfZ2l2ZV91cF9kYW4=,size_16,color_FFFFFF,t_70" alt></p><h1 id="文件批处理"><a href="#文件批处理" class="headerlink" title="文件批处理"></a>文件批处理</h1><p>操作前请备份,或者有git仓库,可以回滚</p><h2 id="测试find"><a href="#测试find" class="headerlink" title="测试find"></a>测试find</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `find . -name <span class="string">"*.md"</span>`;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$n</span>;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200227111151689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ldmVfZ2l2ZV91cF9kYW4=,size_16,color_FFFFFF,t_70" alt></p><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wolfdan@wolfdan-PC $ vim chlink.sh</span><br><span class="line">wolfdan@wolfdan-PC $ cat chlink.sh</span><br><span class="line"><span class="meta">#!bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请开始你的表演---脚本出自:www.wolfdan.cn  , 作者: 单林敏"</span></span><br><span class="line">sum=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `find . -name <span class="string">"*.md"</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        ((sum++))</span><br><span class="line">        sed -i <span class="string">"s/https:\/\/raw.githubusercontent.com\/wolfdan666\/BlogPic\/master\//https:\/\/gitee.com\/wolfdan\/BlogPic\/raw\/master\//g"</span> <span class="variable">$n</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"操作了&#123;<span class="variable">$sum</span>&#125;个文件"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请仔细核查,建议使用VScode的git工具查看更改差异更香"</span></span><br><span class="line"> wolfdan@wolfdan-PC $ bash chlink.sh</span><br><span class="line">请开始你的表演---脚本出自:www.wolfdan.cn  , 作者: 单林敏</span><br><span class="line">操作了&#123;143&#125;个文件</span><br><span class="line">请仔细核查,建议使用VScode的git工具查看更改差异更香</span><br></pre></td></tr></table></figure><h2 id="背景二的代码编写"><a href="#背景二的代码编写" class="headerlink" title="背景二的代码编写"></a>背景二的代码编写</h2><p>发现windows使用git的bash处理速度比linux下面的原生bash处理速度相差甚远！<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">单林敏@DESKTOP-A7T3V67 MINGW64 /f/hexo/blog/<span class="built_in">source</span> (master)</span><br><span class="line">$ ls</span><br><span class="line">_drafts  _posts  about  ads.txt  alipay.jpg  categories  chlink.sh  CNAME  links  tags  捐赠  下雪了</span><br><span class="line"></span><br><span class="line">单林敏@DESKTOP-A7T3V67 MINGW64 /f/hexo/blog/<span class="built_in">source</span> (master)</span><br><span class="line">$ vim chlink.sh</span><br><span class="line"></span><br><span class="line">单林敏@DESKTOP-A7T3V67 MINGW64 /f/hexo/blog/<span class="built_in">source</span> (master)</span><br><span class="line">$ cat chlink.sh</span><br><span class="line"><span class="meta">#!bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请开始你的表演---脚本出自:www.wolfdan.cn  , 作者: 单林敏"</span></span><br><span class="line">sum=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `find . -name <span class="string">"*.md"</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        ((sum++))</span><br><span class="line">        <span class="comment">#sed -i "s/https:\/\/raw.githubusercontent.com\/wolfdan666\/BlogPic\/master\//https:\/\/gitee.com\/wolfdan\/BlogPic\/raw\/master\//g" $n</span></span><br><span class="line">        sed -i <span class="string">"s/https:\/\/gitee.com\/wolfdan\/BlogPic\/raw\/master/https:\/\/www.wolfdan.cn\/img/g"</span> <span class="variable">$n</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"操作了&#123;<span class="variable">$sum</span>&#125;个文件"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请仔细核查,建议使用VScode的git工具查看更改差异更香"</span></span><br><span class="line"></span><br><span class="line">单林敏@DESKTOP-A7T3V67 MINGW64 /f/hexo/blog/<span class="built_in">source</span> (master)</span><br><span class="line">$ bash chlink.sh</span><br><span class="line">请开始你的表演---脚本出自:www.wolfdan.cn  , 作者: 单林敏</span><br><span class="line">操作了&#123;146&#125;个文件</span><br><span class="line">请仔细核查,建议使用VScode的git工具查看更改差异更香</span><br></pre></td></tr></table></figure><p></p><p><strong><font color="red">真香</font></strong><br><img data-src="https://img-blog.csdnimg.cn/20200304172636510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ldmVfZ2l2ZV91cF9kYW4=,size_16,color_FFFFFF,t_70" alt></p><h2 id="背景三代码编写"><a href="#背景三代码编写" class="headerlink" title="背景三代码编写"></a>背景三代码编写</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">单林敏@DESKTOP-A7T3V67 MINGW64 /f/hexo/blog/<span class="built_in">source</span> (master)</span><br><span class="line">$ vim chlink.sh</span><br><span class="line"></span><br><span class="line">单林敏@DESKTOP-A7T3V67 MINGW64 /f/hexo/blog/<span class="built_in">source</span> (master)</span><br><span class="line">$ cat chlink.sh</span><br><span class="line"><span class="meta">#!bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请开始你的表演---脚本出自:www.wolfdan.cn  , 作者: 单林敏"</span></span><br><span class="line">sum=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `find . -name <span class="string">"*.md"</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        ((sum++))</span><br><span class="line">        <span class="comment">#sed -i "s/https:\/\/raw.githubusercontent.com\/wolfdan666\/BlogPic\/master\//https:\/\/gitee.com\/wolfdan\/BlogPic\/raw\/master\//g" $n</span></span><br><span class="line">        <span class="comment">#sed -i "s/https:\/\/gitee.com\/wolfdan\/BlogPic\/raw\/master/https:\/\/www.wolfdan.cn\/img/g" $n</span></span><br><span class="line">        sed -i <span class="string">"s/https:\/\/www.wolfdan.cn\/img/https:\/\/cdn.jsdelivr.net\/gh\/wolfdan666\/BlogPic/g"</span> <span class="variable">$n</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"操作了&#123;<span class="variable">$sum</span>&#125;个文件"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请仔细核查,建议使用VScode的git工具查看更改差异更香"</span></span><br><span class="line"></span><br><span class="line">单林敏@DESKTOP-A7T3V67 MINGW64 /f/hexo/blog/<span class="built_in">source</span> (master)</span><br><span class="line">$ bash chlink.sh</span><br><span class="line">请开始你的表演---脚本出自:www.wolfdan.cn  , 作者: 单林敏</span><br><span class="line">操作了&#123;149&#125;个文件</span><br><span class="line">请仔细核查,建议使用VScode的git工具查看更改差异更香</span><br><span class="line"></span><br><span class="line">单林敏@DESKTOP-A7T3V67 MINGW64 /f/hexo/blog/<span class="built_in">source</span> (master)</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200312143417669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ldmVfZ2l2ZV91cF9kYW4=,size_16,color_FFFFFF,t_70" alt></p><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><h3 id="VScode初步检查"><a href="#VScode初步检查" class="headerlink" title="VScode初步检查"></a>VScode初步检查</h3><p>用vscode的git查看十分方便,还可以随时撤销更改<br><img data-src="https://img-blog.csdnimg.cn/2020022711331780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ldmVfZ2l2ZV91cF9kYW4=,size_16,color_FFFFFF,t_70" alt></p><h3 id="hexo-s检查"><a href="#hexo-s检查" class="headerlink" title="hexo s检查"></a>hexo s检查</h3><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>检查<br><img data-src="https://img-blog.csdnimg.cn/20200227113653692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ldmVfZ2l2ZV91cF9kYW4=,size_16,color_FFFFFF,t_70" alt></p><h1 id="Have-fun-with-shell"><a href="#Have-fun-with-shell" class="headerlink" title="Have fun with shell"></a>Have fun with shell</h1><p>shell真的好爽,自动化脚本,减去人工频繁操作</p><h2 id="我因为背景二更新文章小插曲"><a href="#我因为背景二更新文章小插曲" class="headerlink" title="我因为背景二更新文章小插曲"></a>我因为背景二更新文章小插曲</h2><p>因为hexo没有文章分类，我100多篇博文，所以很难找，然后用shell查找非常愉悦</p><p><img data-src="https://img-blog.csdnimg.cn/20200304173712259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ldmVfZ2l2ZV91cF9kYW4=,size_16,color_FFFFFF,t_70" alt></p><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>由于CSDN写技术博文越来越方便了,所以以后自己的技术博文可能都会放到CSDN上面,今后本网站偶尔发布比较重要的技术博文的图片也可能将直接是链接到CSDN上的(因为加载更快),然后自己的网站将会趋向于发表自己的一些心得体会</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第44周[44/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC44%E5%91%A8-44-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/3_%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2_%E4%BA%8C%E6%AC%A1.cpp" target="_blank" rel="noopener">LeetCode/3_无重复字符的最长子串</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/better-programming/a-list-of-fun-things-you-can-build-as-a-developer-bc07fd21c6e3" target="_blank" rel="noopener">A List of Fun Things You Can Build as a Developer</a><br>这个博主分享了一些小的项目,我们可以用来练手,让自己的技术有所成长</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104376551" target="_blank" rel="noopener">设置用户ID位是什么意思</a></p><p><a href="https://www.debian.org/doc/manuals/debian-reference/ch02.zh-cn.html#_literal_apt_literal_vs_literal_apt_get_literal_literal_apt_cache_literal_vs_literal_aptitude_literal" target="_blank" rel="noopener">Debian系<em>_命令行中的基础软件包管理操作</em>来自Debian官网</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104456787" target="_blank" rel="noopener">函数指针和指针函数_整理</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104362202" target="_blank" rel="noopener">apue.h不存在,以及apue源码下载编译的解决方法</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104401236" target="_blank" rel="noopener">外排序-处理极大量数据的排序算法—5 亿整数的大文件排序的思路</a></p><h1 id="Book-《你总说没事-但我知道你偷偷哭过很多次》"><a href="#Book-《你总说没事-但我知道你偷偷哭过很多次》" class="headerlink" title="Book_《你总说没事,但我知道你偷偷哭过很多次》"></a>Book_《你总说没事,但我知道你偷偷哭过很多次》</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/%E4%B8%80%E7%A6%85_%E4%BD%A0%E6%80%BB%E8%AF%B4%E6%B2%A1%E4%BA%8B.jpg" width="20%" height="20%"></p><p>这本书很有治愈功能,写尽人生善良,挺好的,虽然人生险恶,但总会有人做正确的事情</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第43周[43/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC43%E5%91%A8-43-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/22_%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90.cpp" target="_blank" rel="noopener">LeetCode/22_括号生成</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/better-programming/4-tells-whether-youre-a-great-software-engineer-b0e496ed8f3b" target="_blank" rel="noopener">Four Ways to Know if You’re a Great Software Engineer</a><br>是啊，对于问题和代码核心，要有主人翁意识</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.bilibili.com/watchlater/?spm_id_from=333.6.b_62696c692d6865616465722d6d.16#/av37065233/p7" target="_blank" rel="noopener">北京大学肖臻老师《区块链技术与应用》公开课</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><h2 id="Code哲学"><a href="#Code哲学" class="headerlink" title="Code哲学"></a>Code哲学</h2><p>来自Golang语言的学习中的截图</p><h3 id="ack接纳错误去改善"><a href="#ack接纳错误去改善" class="headerlink" title="ack接纳错误去改善"></a>ack<em>接纳错误</em>去改善</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/Code%E5%93%B2%E5%AD%A6/ack_%E6%8E%A5%E7%BA%B3%E9%94%99%E8%AF%AF_%E5%8E%BB%E6%94%B9%E5%96%84.jpg" alt="ack_接纳错误_去改善"></p><h3 id="在错误中成长"><a href="#在错误中成长" class="headerlink" title="在错误中成长"></a>在错误中成长</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/Code%E5%93%B2%E5%AD%A6/%E5%9C%A8%E9%94%99%E8%AF%AF%E4%B8%AD%E6%88%90%E9%95%BF20200211174257.jpg" alt="在错误中成长"></p><h3 id="接收失败可能是件好事至少可以重来而非一直阻塞"><a href="#接收失败可能是件好事至少可以重来而非一直阻塞" class="headerlink" title="接收失败可能是件好事至少可以重来而非一直阻塞"></a>接收失败可能是件好事<em>至少可以重来</em>而非一直阻塞</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/Code%E5%93%B2%E5%AD%A6/%E6%8E%A5%E6%94%B6%E5%A4%B1%E8%B4%A5%E5%8F%AF%E8%83%BD%E6%98%AF%E4%BB%B6%E5%A5%BD%E4%BA%8B_%E8%87%B3%E5%B0%91%E5%8F%AF%E4%BB%A5%E9%87%8D%E6%9D%A5_%E8%80%8C%E9%9D%9E%E4%B8%80%E7%9B%B4%E9%98%BB%E5%A1%9E.jpg" alt="接收失败可能是件好事_至少可以重来_而非一直阻塞"></p><h3 id="未来未可知-多做准备"><a href="#未来未可知-多做准备" class="headerlink" title="未来未可知_多做准备"></a>未来未可知_多做准备</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/Code%E5%93%B2%E5%AD%A6/%E6%9C%AA%E6%9D%A5%E6%9C%AA%E5%8F%AF%E7%9F%A5_%E5%A4%9A%E5%81%9A%E5%87%86%E5%A4%87.jpg" alt="未来未可知_多做准备"></p><h3 id="测试期疯狂试错，以让将来正式发布能稳定-爱情和生活应该也一样"><a href="#测试期疯狂试错，以让将来正式发布能稳定-爱情和生活应该也一样" class="headerlink" title="测试期疯狂试错，以让将来正式发布能稳定(爱情和生活应该也一样)"></a>测试期疯狂试错，以让将来正式发布能稳定(爱情和生活应该也一样)</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/Code%E5%93%B2%E5%AD%A6/%E6%B5%8B%E8%AF%95%E6%9C%9F%E7%96%AF%E7%8B%82%E8%AF%95%E9%94%99%EF%BC%8C%E4%BB%A5%E8%AE%A9%E5%B0%86%E6%9D%A5%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83%E8%83%BD%E7%A8%B3%E5%AE%9A_%E7%88%B1%E6%83%85%E5%92%8C%E7%94%9F%E6%B4%BB%E5%BA%94%E8%AF%A5%E4%B9%9F%E4%B8%80%E6%A0%B7.jpg" alt="测试期疯狂试错，以让将来正式发布能稳定(爱情和生活应该也一样)"></p><h2 id="《被讨厌的勇气》"><a href="#《被讨厌的勇气》" class="headerlink" title="《被讨厌的勇气》"></a>《被讨厌的勇气》</h2><p>这周的share就是下面的book，因为我觉得这周最大的技术收获也是下面书中说的一些人生观点</p><h1 id="Book《被讨厌的勇气》"><a href="#Book《被讨厌的勇气》" class="headerlink" title="Book《被讨厌的勇气》"></a>Book《被讨厌的勇气》</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94.jpg" width="20%" height="20%"></p><p>书中说书中的观点要真正做到知行合一要很久</p><p>甚至也有人说要想真正理解阿德勒心理学直至改变生活方式，需要“相当于自身岁数一半的时间”。也就是说，如果40岁开始学的话，需要20年也就是到60岁才能学会。20岁开始学的话，加上10年，得到30岁才能学会。你还年轻，学得越早就越有可能早日改变。在能够早日改变这个意义上，你比世上的长者们都要超前一步。为了改变自己创造一个新的世界，在某种意义上你比我更超前。可以迷路也可以走偏，只要不再从属于纵向关系，不畏惧惹人讨厌地自由前行就可以。如果所有人都能够认为“年轻人更超前”的话，世界就会发生重大改变。</p><hr><p>感知到的观点如下：</p><h2 id="使用目的论看世界，而非原因论"><a href="#使用目的论看世界，而非原因论" class="headerlink" title="使用目的论看世界，而非原因论"></a>使用目的论看世界，而非原因论</h2><ul><li>使用原因论去说自己因为心灵创伤所以不敢，是对于自己不去改变的当下有”善”(有好处)</li><li>心理创伤的原因论其实是可以不成立的，自己可以懦弱地选择原因论而不去改变成为更好的自己，而可以选择目的论，接纳自己是因为不敢去做的目的才选择的说自己有心灵的创伤.</li><li>如果我们想要改变我们的生活，我们可以勇敢地接受目的论，因为我想干什么，所以我选择这样做</li></ul><p>这一点很像我的人生格言中的”心外无物”(自己可以选择一切的看法),然后知行合一(实则是对于当下的”善”，只有真正认知了目的论，选择了改变成更好的自己，才能不选择小”善”，而是选择大”善”)</p><h2 id="自由，课题分离，横向关系"><a href="#自由，课题分离，横向关系" class="headerlink" title="自由，课题分离，横向关系"></a>自由，课题分离，横向关系</h2><p>一切的烦恼来自于人际间的关系<br>在人际关系中，我们不在乎他人的看法便为自由<br>我们做好自己认为正确的事情，对于他们做到自己应该做的，不用去管对方怎么看你就是课题分离，因为我们自己的课题是我们自己对别人做什么，而别人怎么看我们是别人的课题，如果我们太在乎别人的课题就会让我们陷入困境，让我们费尽心力，同时也不会让我们感到自由，而且也会让别人感受不到平等<br>因为对别人的课题进行干涉的人一般有点像家人对自己的孩子进行干涉一样，是纵向关系，而非平等的横向关系<br>所以我们应该做好自己的课题，对于他人给予关心，让对方知道你在，可以能够获取到你的帮助就好，剩下的看别人怎么操作<br>就像把马引导到水边，喝不喝水由它自己决定</p><h2 id="人际关系三板斧"><a href="#人际关系三板斧" class="headerlink" title="人际关系三板斧"></a>人际关系三板斧</h2><p><strong>自我接纳，他者信赖，他者贡献</strong></p><h3 id="自我接纳"><a href="#自我接纳" class="headerlink" title="自我接纳"></a>自我接纳</h3><p>接纳自己的，只要存在就有价值—&gt;可以看后文</p><h3 id="他者信赖"><a href="#他者信赖" class="headerlink" title="他者信赖"></a>他者信赖</h3><p>并不是说做到了肯定性达观的自我接纳就可以获得共同体感觉。这是事实。还要把”对自己的执著”变成”对他人的关心”，这就是绝对不可以缺少的第二个关键词——“他者信赖”。</p><p>在相信他人的时候不附加任何条件。即使没有足以构成信用的客观依据也依然相信，不考虑抵押之类的事情，无条件地相信。这就是信赖。青年：无条件地相信？又是先生您津津乐道的邻人爱吗？哲人：当然，无条件地相信他人有时也会遭遇背叛。就好比贷款保证人有时也会蒙受损失一样。即使如此却依然继续相信的态度就叫作信赖。青年：这是缺心眼儿的老好人！先生也许支持性善说，但我却主张性恶说，无条件地相信陌生人会遭人利用！哲人：也许会被欺骗、被利用。但是，请你站在背叛者的立场上去想一想。如果有人即使被你背叛了，也依然继续无条件地相信你，无论遭受了什么样的对待依然信赖你。你还能对这样的人屡次做出背信弃义的行为吗？</p><p>信赖的反义词？是怀疑。假设你把人际关系的基础建立在”怀疑”之上。怀疑他人、怀疑朋友、甚至怀疑家人或恋人，生活中处处充满怀疑。那么，这样究竟会产生什么样的关系呢？对方也能够瞬时感觉到你怀疑的目光，会凭直觉认为”这个人不信赖我”。你认为这样还能建立起什么积极的关系吗？只有我们选择了无条件的信赖，才可以构筑更加深厚的关系。青年：嗯。哲人：阿德勒心理学的观点很简单。你现在认为”无条件地信赖别人只会遭到背叛”。但是，决定背不背叛的不是你，那是他人的课题。你只需要考虑”我该怎么做”。”如果对方讲信用我也给予信任”，这只不过是一种基于抵押或条件的信用关系。<br>青年：您是说这也是课题分离？<br>哲人：是的。就像我反复提到的一样，如果能够进行课题分离，那么人生就会简单得令你吃惊。但是，即使理解课题分离的原理和原则比较容易，实践起来也非常困难。这一点我也承认。</p><h3 id="他者贡献"><a href="#他者贡献" class="headerlink" title="他者贡献"></a>他者贡献</h3><p>就是通过为共同体也就是他人服务能够体会到”我对别人有用”，不是被别人评价说”很好”，而是主观上就能够认为”我能够对他人做出贡献”，只有这样我们才能够真正体会到自己的价值。之前讨论到的”共同体感觉”或”鼓励”的话题也与此紧密相关。</p><p>他者贡献的意思并不是自我牺牲。相反，阿德勒把为他人牺牲自己人生的人称作”过度适应社会的人”，并对此给予警示。并且，请你想一想。我们只有在感觉到自己的存在或行为对共同体有益的时候，也就是体会到”我对他人有用”的时候，才能切实感受到自己的价值。是这样吧？也就是说，他者贡献并不是舍弃”我”而为他人效劳，它反而是为了能够体会到”我”的价值而采取的一种手段。</p><p><strong>幸福感是自己体会到自己的他者贡献，而非他人”评价”感受到了</strong></p><h2 id="共同体，归属感"><a href="#共同体，归属感" class="headerlink" title="共同体，归属感"></a>共同体，归属感</h2><p>如果按照字面意思把阿德勒所说的”共同体”概念想象成实际的宇宙或非生物的话，那就会很难理解。当前我们可以理解成共同体范围”无限大”。<br>因为共同体足够大，那我们在小的范围内遇到的都是不喜欢自己的人的话，还可以在其他的地方获得”可以在这里”的感受，也就是总能找到一个地方让自己有归属感</p><h2 id="存在标准而非行为标准"><a href="#存在标准而非行为标准" class="headerlink" title="存在标准而非行为标准"></a>存在标准而非行为标准</h2><p>存在标准上的感谢就是这么回事。病危状态的母亲尽管什么都做不了，但仅仅她活着这件事本身就可以支撑你和家人的心，发挥巨大的作用。你也是一样。如果你危在旦夕的时候，周围的人也会因为”你还存在着”这件事本身而感到无比高兴，也就是并不要求什么直接行为，仅仅是平安无事地存在着就非常难能可贵。至少没有不可以这样想的理由。对于自己，不要用”行为”标准去考虑，而要首先从”存在”标准上去接纳。</p><p>我们对于孩子的期待，不能用理想化的100分开始评价孩子，然后没有一项就减一分，而应该使用加法，孩子有一项优点就加一些分数，这也类似于存在标准的角度去思考而非行为标准去思考</p><h2 id="人生的意义，此时此刻"><a href="#人生的意义，此时此刻" class="headerlink" title="人生的意义，此时此刻"></a>人生的意义，此时此刻</h2><p>人生的意义没有普世的结论，每个人都可以给自己的人生赋予不同的人生意义</p><p>请你这样想。人生就像是在每一个瞬间不停旋转起舞的连续的刹那。并且，暮然四顾时常常会惊觉：“已经来到这里了吗？”在跳着小提琴之舞的人中可能有人成了专业小提琴手，在跳着司法考试之舞的人中也许有人成为律师，或许还有人跳着写作之舞成了作家。当然，也有可能有着截然不同的结果。但是，所有的人生都不是终结“在路上”，只要跳着舞的“此时此刻”充实就已经足够。</p><p>旅行的目的是什么？例如你要去埃及旅行。这时候你会想尽早尽快地到达胡夫金字塔，然后再以最短的距离返回吗？如果是这样的话，那就不能称为旅行。跨出家门的那一瞬间，“旅行”已经开始，朝着目的地出发途中的每一个瞬间都是旅行。当然，即使因为某些事情而没能够到达金字塔，那也并非没有旅行。这就是现实性的人生。</p><p>如果登山的目的是登上山顶，那它就是潜在性的行为。说得极端点儿，乘坐电梯登上山顶，逗留5分钟，然后再乘电梯回来也可以。当然，如果没能到达山顶的话，其登山活动就等于失败。但是，如果登山的目的不是登顶而是登山本身，那就可以说是现实性的活动。最终能不能登上山顶都没有关系。</p><p>青年：是的，我承认！认真过好“此时此刻”、不去设定根本不存在的线，这些我的确认同！但是先生，我找不到理想和目标，就连应该跳什么舞都不知道，我的“此时此刻”只有一些毫无用处的刹那！<br>哲人：没有目标也无妨。认真过好“此时此刻”，这本身就是跳舞。不要把人生弄得太深刻。请不要把认真和深刻混为一谈。<br>青年：认真但不深刻。<br>哲人：是的。人生很简单，并不是什么深刻的事情。如果认真过好了每一个刹那，就没有什么必要令其过于深刻。并且还要记住一点。站在现实性角度的时候，人生总是处于完结状态。<br>青年：完结状态？<br>哲人：你还有我，即使生命终结于“此时此刻”，那也并不足以称为不幸。无论是20岁终结的人生还是90岁终结的人生，全都是完结的、幸福的人生。</p><p>青年：当人生是连续刹那的时候，当人生只存在于“此时此刻”的时候，人生的意义究竟是什么呢？我是为了什么出生、经受满是苦难的生命、最后迎来死亡的呢？我不明白这其中的原因。<br>哲人：人生的意义是什么？人为了什么而活？当有人提出这个问题的时候，阿德勒的回答是：“并不存在普遍性的人生意义。”<br>青年：人生没有意义？<br>哲人：例如战祸或天灾，我们所居住的世界充满了各种不合理的事情。我们也不可能在被卷入战祸而丧命的孩子们面前谈什么“人生意义”。也就是说，人生并不存在可以作为常识来讲的意义。但是，如果面对这种不合理的悲剧而不采取任何行动的话，那就等于是在肯定己经发生的悲剧。无论发生何种状况，我们都必须采取一些行动，必须对抗康德所说的倾向性。</p><p>哲人：所以阿德勒在说了“并不存在普遍性的人生意义”之后还说：“人生意义是自己赋予自己的。”<br>青年：自己赋予自己？什么意思？<br>哲人：年轻时，我祖父的脸部曾受到了重创，这实在是不合理、非人道的灾难。当然，也可能有人会因此而选择“世界太残酷”或者“人们都是我的敌人”之类的生活方式。但是，我相信祖父一定是选择了“人们都是我的伙伴，世界非常美妙”这样的生活方式。阿德勒所说的“人生的意义是由你自己赋予自己的”，就正是这个意思。人生没有普遍性的意义。但是，你可以赋予这样的人生以意义，而能够赋予你的人生以意义的只有你自己。</p><h2 id="知行合一"><a href="#知行合一" class="headerlink" title="知行合一"></a>知行合一</h2><p>希望认真生活非常重要，但仅仅如此还不够。阿德勒说：”人的烦恼皆源于人际关系。“如果不懂得如何构筑良好的人际关系，有时候就会因为想要满足他人期待或者不想伤害他人而导致虽有自己主张但无法传达，最终不得不放弃自己真正想做的事情。这样的人的确很受周围人的欢迎，或许讨厌他（她）们的人也很少；但另一方面，他（她）们也无法过自己的人生。对于像本书中出现的青年一样，已经接受了现实洗礼、烦恼多多的年轻人来说，哲人所说的”这个世界无比简单，任何人都可以随时获得幸福。“这样的话也许很不可思议。自称”我的心理学是所有人的心理学“的阿德勒也像柏拉图一样没有使用专业术语，而且提出了改善人际关系的”具体对策“。如果有人认为难以接纳阿德勒思想，那是因为这种思想是反常识观点的集大成者，<strong>而且要想理解它也需要日常生活中的实践：即使没有语言方面的难度，或许也会有像在严冬里想象酷暑一样的困难。</strong>但我还是希望大家能够掌握解开人际关系问题的关键。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARSTB打卡第42周[42/521]</title>
    <url>/ARSTB%E6%89%93%E5%8D%A1%E7%AC%AC42%E5%91%A8-42-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>坚持ARST打卡已经到了第42周了，我想我受益良多，最近看了《富兰克林自传》，深感看书的重要性，因此决定在自己的ARST每周打卡中加上一项，就是每周看一本书(尽量每天挤出一小时)</p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/21_%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.cpp" target="_blank" rel="noopener">LeetCode/21_合并两个有序链表</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/swlh/stop-spending-so-much-time-in-your-head-76b62942f878" target="_blank" rel="noopener">Stop Spending So Much Time In Your Head</a><br>看这篇文章的时候自己是有点困的，所以看了好久<br>感觉写得挺糟糕的<br>不过此文要表达的观点我还是get到了<br>就是99%的大脑想法都是无用的，继续想它们会让我们浪费时间，所以我们只需要接纳这些想法，然后开始做事</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://juejin.im/entry/5d3644ef6fb9a07ed137136a" target="_blank" rel="noopener">IDEA开发Spark应用实战(Scala)</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104168055" target="_blank" rel="noopener">虚拟机Centos6开机黑屏解决方法</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104168406" target="_blank" rel="noopener">VM复制粘贴不生效</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104169136" target="_blank" rel="noopener">Centos6更改默认Python2.x为Python3.x以及注意事项_yum，ibus的异常处理</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104183722" target="_blank" rel="noopener">HDFS性质探索</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104185374" target="_blank" rel="noopener">Idea本地运行spark，操作HDFS（spark-without-hadoop版的spark）</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104193455" target="_blank" rel="noopener">spark-submit运行idea生成的jar包无法找到主类</a></p><h1 id="Book《富兰克林自传》"><a href="#Book《富兰克林自传》" class="headerlink" title="Book《富兰克林自传》"></a>Book《富兰克林自传》</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/Franklin.jpg" width="20%" height="20%"></p><p>看了这本书之后，让我感受到富兰克林先生也是一个普通的人，因为他也有七情六欲，他也会冲动，他也会上当受骗，他也会犯错，也会交到一些不好的朋友，同样的，我也能看到富兰克林先生通过自己的积极思考，不断学习不断改进，不断认识自己的错误，改正自己的错误，最终通过自己的勤勉努力，积极思考，保持谦卑好奇，远离错误，最终成就了自己的一番事业</p><p>因此我感谢这本书，让我知道了一个普通的人也可以通过自己坚持不懈地思考和正确地努力来成就自己，成为更好的自己，也能对社会做出自己的贡献，这也是很好的生命的意义</p><p>他们以前以书会友，我现在信息社会却越来越孤立<br>他们以前用航船漂洋过海，我现在宅在家里却只想回到家乡过上养老般的生活</p><p>所以我需要反思自己，跨出自己的舒适圈，睁眼看世界</p><p>学最好的别人，做最好的自己，让他人让社会也因自己而有所改善，那么此生就足矣、加油。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARSTB</category>
      </categories>
      <tags>
        <tag>ARSTB</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第41周[41/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC41%E5%91%A8-41-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/19_%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.cpp" target="_blank" rel="noopener">LeetCode/19_删除链表的倒数第N个节点</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://codeburst.io/10-top-programming-languages-in-2019-for-developers-a2921798d652" target="_blank" rel="noopener">10 top Programming Languages in 2020 for Businesses</a><br>语言一直在变，唯一不变的是，我们学习的方法，解决问题的思考方式，我们不仅仅是一个程序员，更是一个让世界变得更加美好的Problem Solver.</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://zhuanlan.zhihu.com/p/99398378" target="_blank" rel="noopener">深入浅出理解 Spark 部署与工作原理</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104127477" target="_blank" rel="noopener">linux常用命令</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104127028" target="_blank" rel="noopener">我的vim使用技巧</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104125190" target="_blank" rel="noopener">给Vim配置Scala语法高亮显示_vim粘贴模式防止复制粘贴的内容不一致（vim中无格式的粘贴方式）</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104122017" target="_blank" rel="noopener">kafka实操笔记</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104122623" target="_blank" rel="noopener">VM虚拟机系统时间同步网络时间并登录用户自动校正时间</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104113283" target="_blank" rel="noopener">Spark SQL学习笔记</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104106841" target="_blank" rel="noopener">RDD编程学习笔记3_数据读写</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104108696" target="_blank" rel="noopener">HBase1.1.x部署在Hadoop2.6.0上(3台vm虚拟机的部分分布式)</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104105386" target="_blank" rel="noopener">RDD编程学习笔记2<em>键值对RDD</em>综合案例-计算每种图书的每天平均销量</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104104462" target="_blank" rel="noopener">RDD编程基础学习笔记1_Spark优雅的wordCount</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104100638" target="_blank" rel="noopener">scp不覆盖同名文件，覆盖同名文件，彻底覆盖（个人实践所得）</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104094490" target="_blank" rel="noopener">Exception in thread “main” java.lang.NoClassDefFoundError: org/apache/hadoop/fs/FSDataInputStream</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104094259" target="_blank" rel="noopener">yum的默认安装路径</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
        <tag>Spark</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第40周[40/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC40%E5%91%A8-40-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/18_%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.cpp" target="_blank" rel="noopener">LeetCode/18_四数之和</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://www.bilibili.com/video/av84773184" target="_blank" rel="noopener">当涉及高效能时，为什么大多数人都会犯错？</a><br>【当涉及高效能时，为什么大多数人都会犯错？】马可·奥勒留曾说，人生的目标不是与大多数人为伍，而是避免让自己加入那些精神错乱的人的行列。如果你做每个人都在做的事，你就没有突出自我，甚至可能陷入泥沼。<strong>百分之三的人能够达成非凡的成就，如果你不能打破常规，打破行规，你就会变成剩下的百分之九十七。</strong></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://zhuanlan.zhihu.com/p/56658358" target="_blank" rel="noopener">vmware 虚拟机三种网络模式—“桥接、NAT 、仅主机”区别？</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/104081117" target="_blank" rel="noopener">VM虚拟机仅主机模式上网络</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第39周[39/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC39%E5%91%A8-39-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/17_%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E5%92%8C%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.cpp" target="_blank" rel="noopener">LeetCode17_电话号码和字母组合</a></p><p>主要是char单个字符转化到string类型自己竟然不会…<br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c = C[id][i];</span><br><span class="line"><span class="built_in">string</span> tp;</span><br><span class="line"><span class="built_in">stringstream</span> stream;</span><br><span class="line">stream &lt;&lt; c;</span><br><span class="line">tp = stream.str();</span><br></pre></td></tr></table></figure><p></p><p>然后自己最近学的Scala和Go都没有分号，导致自己写C++的时候老是忘了写分号..</p><h1 id="Reviews"><a href="#Reviews" class="headerlink" title="Reviews"></a>Reviews</h1><p><a href="https://medium.com/the-post-grad-survival-guide/5-signs-you-are-wasting-your-life-44e474935a53" target="_blank" rel="noopener">5 Signs You Are Wasting Your Life</a><br>If you routinely worry about what your friends, family, peers, or pop culture thinks of you, you may be letting your life slip by. Instead of doing what others approve of, find a guiding purpose that you can be true to even when the world turns against you.<br>对啊，如果我们太在意别人的看法，那我们很可能将会丢掉自己</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.icourse163.org/learn/XMU-1205811805?tid=1206617233#/learn/announce" target="_blank" rel="noopener">林子雨主讲-《Spark编程基础》</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>这周的分享非技术分享，而是自己的一些心得(接Review)</p><p><strong>如果我们太在意别人的看法，那我们很可能将会丢掉自己</strong><br>以前总是觉得这个事情很容易做到，但是我发现我之前太年轻了，没有什么经历，因为我现在发现我之前理解的其他人是不包括自己很亲密的人的，直到最近，我表弟和我的一些姐姐们都说要好好珍惜假期放松，享受生活，不要把假期切割出来去提前实习上班，但是我觉得自己这一年是秋招的一年，要像考研的同学那样全力以赴，拼尽全力，也符合自己成为一名技术专家的目标，虽然被他们说的时候也会有纠结，也时常被他们看成憨憨，但是我觉得值得，所以做自己吧</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第38周[38/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC38%E5%91%A8-38-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/38-hu.jpg" alt="hu-38周考试结束,寒假快乐"></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/16_%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.cpp" target="_blank" rel="noopener">LeetCode/16_最接近的三数之和.cpp</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/@kevalpatel2106/why-should-you-learn-go-f607681fad65" target="_blank" rel="noopener">Why should you learn Go?</a></p><p>我认为将来的代码运行都是在大规模分布式集群服务器上，跑云应用程序SaaS(Soft as a Serive),现在很火的大数据，云计算，以及区块链都是主流使用golang开发，所以将来golang将成为必备工具之一了</p><p>解决好问题，让世界变得更加美好，自己也要拥有一些好的尚方宝剑，与你们共勉</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="http://dblab.xmu.edu.cn/blog/spark/" target="_blank" rel="noopener">子雨大数据之Spark入门教程（Scala版）</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/next5-1%E5%8D%87%E7%BA%A7%E5%88%B0next7-7%E9%97%B2%E8%AE%B0%E6%97%A5%E5%BF%97/">next5.1升级到next7.7闲记日志</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>next5.1升级到next7.7闲记日志</title>
    <url>/next5-1%E5%8D%87%E7%BA%A7%E5%88%B0next7-7%E9%97%B2%E8%AE%B0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="图片测试"><a href="#图片测试" class="headerlink" title="图片测试"></a>图片测试</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/beauty/water/lang.jpg" alt="lang"></p><h1 id="小感觉"><a href="#小感觉" class="headerlink" title="小感觉"></a>小感觉</h1><ul><li>valine-admin因为语法解析风格变化的原因，我无法使用个性化表情了</li><li>友链样式也是因为语法解析风格变化的原因，导致无法使用</li><li>内置了fanybox3</li><li>内置了很多以前要自己动手的东西</li><li>描述字段还是不能放照片</li><li>对于neat压缩js文件极其不友好,因为自己因此而得到<code>Asset render failed: js/utils.js</code>的各种文件压缩错误提示</li><li>图片可以显示描述字段了</li><li>相关文章好评</li><li>原来<code>math.enable:</code> <code>false</code>才是全部开始渲染—-由于之前自己写题解，很多都用了公式，所以就不贪图这一点渲染时间了，现在省事是重点(主要是花不了多久)</li><li>手机端的体验比起next5.1好太多了</li></ul><h1 id="大感觉"><a href="#大感觉" class="headerlink" title="大感觉"></a>大感觉</h1><ul><li>速度好像提升了一点点</li><li>语法解析风格大变(可能这就是为了提升速度而牺牲了一些灵活的扩展性吧)</li><li>所以扩展没有以前那么灵活了</li></ul><p><del>一天8小时都在折腾这个小破站了,真香</del></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>next</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第37周[37/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC37%E5%91%A8-37-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>中序非递归遍历树 实现 树的中序迭代器<br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">TreeNode *root = new TreeNode(1);</span></span><br><span class="line"><span class="comment">root-&gt;left = new ... 2</span></span><br><span class="line"><span class="comment">....</span></span><br><span class="line"><span class="comment">// Please implement a class called NodeIterator, so that:</span></span><br><span class="line"><span class="comment">NodeIterator i(root);</span></span><br><span class="line"><span class="comment">i.hasNext(); // true</span></span><br><span class="line"><span class="comment">i.next(); // 4</span></span><br><span class="line"><span class="comment">i.next(); // 2</span></span><br><span class="line"><span class="comment">i.next(); // 1</span></span><br><span class="line"><span class="comment">i.next(); // 5</span></span><br><span class="line"><span class="comment">i.next(); // 3</span></span><br><span class="line"><span class="comment">i.hasNext(); // false</span></span><br><span class="line"><span class="comment">i.next(); // throw</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">TreeNode &#123;</span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">  TreeNode *left;</span><br><span class="line">  TreeNode *right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeIterator</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line">        NodeIterator(TreeNode * root)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            TreeNode * tp = root;</span><br><span class="line"></span><br><span class="line">            check();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建议使用着先访问hasNext函数</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">hasNext</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !s.empty();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!hasNext()) <span class="keyword">throw</span> exception(<span class="string">"No more data."</span>);</span><br><span class="line"></span><br><span class="line">            tp = s.top();</span><br><span class="line">            <span class="keyword">int</span> ans = tp -&gt; val;</span><br><span class="line"></span><br><span class="line">            s.pop();</span><br><span class="line"></span><br><span class="line">            tp = tp -&gt; right;</span><br><span class="line"></span><br><span class="line">            check();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 自己不为nullptr放入</span></span><br><span class="line">            <span class="keyword">while</span>(tp != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                s.push(tp);</span><br><span class="line">                tp = tp -&gt; left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; s;</span><br><span class="line">        TreeNode * tp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/the-ascent/how-i-learned-to-5x-my-income-10x-my-confidence-and-create-a-future-of-unlimited-possibility-d51620009fc7" target="_blank" rel="noopener">How I Learned to 5x My Income, 10x My Confidence, and Create a Future of Unlimited Possibility</a></p><p>这篇文章一点都不引人入胜，是一片鸡汤文，而且还是标题党水文，不过证明了自己阅读能力上升了一点点，看出了这是一篇大水文</p><p>不过有一个观点值得肯定的是 ： <strong>接纳自己，寻找自己的长处，然后为此感到自信，然后勇敢地挑战自己的边界</strong></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/jxq0816/article/details/103201600" target="_blank" rel="noopener">张小龙-年薪近3亿的微信之父，他是如何做到的？</a></p><p>情怀有时候真的能够当饭吃</p><p><del>其实之前自己看过一次类似内容的</del></p><h2 id="linux显示指定行的3种方法"><a href="#linux显示指定行的3种方法" class="headerlink" title="linux显示指定行的3种方法"></a>linux显示指定行的3种方法</h2><h3 id="一，从第3000行开始，显示1000行。即显示3000-3999行"><a href="#一，从第3000行开始，显示1000行。即显示3000-3999行" class="headerlink" title="一，从第3000行开始，显示1000行。即显示3000~3999行"></a>一，从第3000行开始，显示1000行。即显示3000~3999行</h3><p><code>cat filename | tail -n +3000 | head -n 1000</code></p><h3 id="二，显示1000行到3000行"><a href="#二，显示1000行到3000行" class="headerlink" title="二，显示1000行到3000行"></a>二，显示1000行到3000行</h3><p><code>cat filename| head -n 3000 | tail -n +1000</code></p><p><strong>注意两种方法的顺序</strong></p><p>分解：<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示最后1000行</span></span><br><span class="line">    tail -n 1000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从1000行开始显示，显示1000行以后的</span></span><br><span class="line">    tail -n +1000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示前面1000行</span></span><br><span class="line">    head -n 1000</span><br></pre></td></tr></table></figure><p></p><h3 id="三，用sed命令"><a href="#三，用sed命令" class="headerlink" title="三，用sed命令"></a>三，用sed命令</h3><p><code>sed -n &#39;5,10p&#39; filename</code></p><p>这样你就可以只查看文件的第5行到第10行</p><h3 id="参考自"><a href="#参考自" class="headerlink" title="参考自"></a>参考自</h3><p>苏轶然： suanec - <a href="http://www.cnblogs.com/suanec/" target="_blank" rel="noopener">http://www.cnblogs.com/suanec/</a></p><h1 id="Share-看书分享"><a href="#Share-看书分享" class="headerlink" title="Share 看书分享"></a>Share 看书分享</h1><p>《Linux命令行与shell脚本编程大全》<br>在考试周的前一周，也是2020年的第一周，我把这本看了1/4的书定为本周读完计划，然后这一周没有复习，下周挑战5天三门考试的挑战(DSP数字信号处理,高频,单片机)<br>不过看完这本书是真香，自己对于linux命令行和shell脚本的理解有了一个大的框架，以后什么地方出了问题，我都能找到问题出在哪里了，这样非常有利于我更加熟练的使用linux操作系统，以及linux服务器，也为我后面看APUE(《Unix环境高级编程》)提供更加坚实的基础，为自己以后成为一个更加优秀的IT技术创造美好生活提供了一把瑞士军刀，冲冲冲</p><p>听说2020是程序员的本命年？ 2020-1024 = 996 ？ 233，但是<strong>我们不是普通的程序员，我们可以用技术创造更加美好的生活，让世界变得更好，更便捷，更安全，更智能</strong></p><p>推荐你们看这本书</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/linux-shell.jpg" alt></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第36周[36/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC36%E5%91%A8-36-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/%E5%89%91%E6%8C%87offer/%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">单链条选择排序极其探讨</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/inc./after-10-years-studying-sleep-the-u-s-military-just-revealed-something-eye-opening-about-caffeine-e7a9340e9998" target="_blank" rel="noopener">After 10 Years Studying Sleep, the U.S. Military Just Revealed Something Eye-Opening About Caffeine</a><br>我不太赞同文章里面狂喝咖啡保持警觉的观点，我也对咖啡因延长寿命持不同看法，至少我体验到的是喝完咖啡会很困，然后很精神，最后是不困但腰子痛…所以我觉得可能还有害身体，可能是我喝的咖啡品种不对吧</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/DrifterJ/article/details/7841810" target="_blank" rel="noopener">JNI与JNA性能比较</a><br><a href="https://blog.csdn.net/liming0931/article/details/7726590" target="_blank" rel="noopener">单链表排序之选择排序（赞）</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/%E5%A4%8D%E5%88%B6%E7%A1%AC%E7%9B%98%E4%B8%AD%E7%9A%84Ubuntu%E5%88%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98-%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98Deepin-Ubunntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/">复制硬盘中的Ubuntu/Deepin到移动硬盘_实现移动硬盘Deepin+Ubunntu双系统(本周更新版)</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第35周[35/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC35%E5%91%A8-35-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/f37611657bf21e0ca32fca2db04b9fadb696a314/%E5%89%91%E6%8C%87offer/%E6%A0%91/%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E9%81%8D%E5%8E%86%E6%A0%91/%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91.cpp" target="_blank" rel="noopener">非递归实现前中后序遍历二叉树</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://gen.medium.com/you-shouldnt-have-to-be-good-at-your-job-cb9dff706d7d" target="_blank" rel="noopener">You Shouldn’t Have to Be Good at Your Job</a><br>这篇文章有太多的生僻词，看了很久…对于下面这句讲中产阶层的话语感到印象极其深刻<br>A middle class must, by definition, have middling people in it. Middling people are not winners. Is that a crime?<br>根据定义，中产阶级必须有中产阶级。中间人不是赢家。那是犯罪吗？</p><p><strong>深刻的原因之一是因为自己昨天意识到自己没有走错ACM竞赛失败的阴影，今天冬至，又发现自己的简历被某个自己想去的公司直接刷掉了(原本以为至少能面试一下的)</strong></p><p><strong>当然这些都是因为自己想要走捷径，自己存在侥幸心理，所以从今天开始，winter always here, 脚踏实地地努力</strong></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/mxsgoden/article/details/8821936" target="_blank" rel="noopener">进程和线程的区别？</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/%E5%89%91%E6%8C%87offer/%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">各种排序的整理</a></p><p><a href="https://www.wolfdan.cn/eclipse%E6%90%AD%E5%BB%BAMapReduce%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/">eclipse搭建MapReduce代码编译环境+java.lang.NoClassDefFoundError-org/apache/hadoop/yarn/util/Apps</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第34周[34/521]-思考专家的意义</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC34%E5%91%A8-34-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/%E5%89%91%E6%8C%87offer/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%92%8C" target="_blank" rel="noopener">连续子数组最大和</a><br><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/%E4%B8%93%E9%A2%98%E7%BB%83%E4%B9%A0_%E8%B5%9B%E5%89%8D%E8%8A%B13%E5%91%A8%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86%E6%88%90%E6%9D%BF%E5%AD%90/FFT" target="_blank" rel="noopener">FFT</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/better-marketing/want-to-be-successful-in-your-20s-do-these-9-things-3568d92090eb?" target="_blank" rel="noopener">9 Things You Should Work on in Your 20s If You Want to Be Successful</a><br>Life only gets busier.<br>Too often, people say the phrase, “I will once I’m a bit further along.” But then they get a bit further along, and nothing changes. They just keep saying, “I’ll do it when I’m older. Later, when I have more time.”<br>But this is a dangerous cycle. Take five or 10 minutes, per day, and start practicing the habit of working on your emotional health now.<br>是啊，生命永远会变得更加忙碌，所以从现在就应该开始让自己变得更好，学会感恩，爱，与成长</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5ODYwMjI2MA==&amp;mid=2649744953&amp;idx=1&amp;sn=2023b6eb67c667db526ea5f4e60ee7fe&amp;chksm=bed3754289a4fc54baf472d259874f2fe5cea3eaa5971acf9149e923626f6336018905cbdcdc&amp;scene=0&amp;xtrack=1&amp;key=34d777dd6e51b793b82dd77b79dcbdc3e5637f07b5ac5fc5a9c5d51952361bd08fefd8ec54586493e4fd18ab7ec65798f3779b765e04a7a50340ae5bfcf98e50aa1a2eb22ea26268621893dda770a1b6&amp;ascene=1&amp;uin=NTg3MTYyNDY%3D&amp;devicetype=Windows+10&amp;version=62070158&amp;lang=zh_CN&amp;exportkey=AXeRnsy7oH8Lkj%2FKemNATms%3D&amp;pass_ticket=i6rdaLuhvvUMsMsdak82r7hcH32bF0SBUHoAvpEWpcQ%3D" target="_blank" rel="noopener">把你的 VS Code 打造成 C++ 开发利器</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/SQL/%E5%85%B3%E4%BA%8Ecollation%E5%88%97%E9%A1%BA%E5%BA%8F%E7%9A%84%E6%80%9D%E8%80%83/%E5%85%B3%E4%BA%8Ecollation%E5%88%97%E9%A1%BA%E5%BA%8F%E7%9A%84%E6%80%9D%E8%80%83.sql" target="_blank" rel="noopener">ERROR 1215 (HY000)-Cannot add foreign key constraint中关于collation 列顺序思考排错过程</a></p><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/SQL/%E7%BB%8F%E5%85%B8/%E5%8F%8C%E9%87%8D%E5%90%A6%E5%AE%9A.sql" target="_blank" rel="noopener">SQL双重否定</a></p><p><a href="https://www.wolfdan.cn/SQL%E4%B8%AD%E5%9B%A0%E4%B8%BAnull%E5%AF%BC%E8%87%B4%E7%9A%84%E7%A9%BA%E7%BB%93%E6%9E%9C/">SQL中因为null导致的空结果</a></p><p><a href="https://www.wolfdan.cn/vector%E5%8F%96size%E9%97%AE%E9%A2%98/">vector取size问题</a></p><h1 id="自己的小思考"><a href="#自己的小思考" class="headerlink" title="自己的小思考"></a>自己的小思考</h1><p>专家就是在一个相对较小的领域内把所有坑都踩过了的人,<strong>但是自己踩坑效率是很低的，所以平常一定要多看书，看源码分析，从使用工具的内核层面去了解，这样才能长期有效地避免掉入毫无头绪的坑中，这样的效率才是最高的，才能更快地成为一个方面的专家</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>vector取size问题</title>
    <url>/vector%E5%8F%96size%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>最近迷上了<code>sizeof</code>,感觉比<code>sizeof()</code>炫酷多了<br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> buff[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">// 对buff一系列操作</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span> buff;</span><br></pre></td></tr></table></figure><p></p><h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h1><p>然后我就习惯性地使用着<code>sizeof</code>,直到我写了如下代码<br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tmp[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">-2</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">-4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">-5</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(tmp,tmp+<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">array</span>.empty()) n = <span class="keyword">sizeof</span> <span class="built_in">array</span>;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">cout</span>&lt;&lt; <span class="built_in">array</span>[i] &lt;&lt; <span class="string">" "</span>; <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output :</span></span><br><span class="line"><span class="comment">// 1 -2 3 10 -4 7 2 -5 0 0 -1864443732 469806420 1 0 1376592 0 -1046104771 16040918 -1864443732 402697557 1385904 0 1376592 0</span></span><br></pre></td></tr></table></figure><p></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>原因分析:</p><h2 id="sizeof是对精确的数据类型操作"><a href="#sizeof是对精确的数据类型操作" class="headerlink" title="sizeof是对精确的数据类型操作"></a>sizeof是对精确的数据类型操作</h2><p>sizeof(type)<br>sizeof expression</p><p>1) Yields the size in bytes of the object representation of type.<br>2) Yields the size in bytes of the object representation of the type of expression, if that expression is evaluated.</p><h2 id="而vector是一个类"><a href="#而vector是一个类" class="headerlink" title="而vector是一个类"></a>而vector是一个类</h2><p>A std::vector is a class. It’s not the actual data, but a class that manages it.<br>Use std::vector.size() to get the size of the actual data.</p><p>所以应该是<br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tmp[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">-2</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">-4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">-5</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(tmp,tmp+<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">array</span>.empty()) n = <span class="built_in">array</span>.size();</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">cout</span>&lt;&lt; <span class="built_in">array</span>[i] &lt;&lt; <span class="string">" "</span>; <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// output : 1 -2 3 10 -4 7 2 -5</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL中因为null导致的空结果</title>
    <url>/SQL%E4%B8%AD%E5%9B%A0%E4%B8%BAnull%E5%AF%BC%E8%87%B4%E7%9A%84%E7%A9%BA%E7%BB%93%E6%9E%9C/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>无论SQL执行怎么样，都是得到空结果<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SQL/null.png" alt></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>原因是 <code>group by</code> 和 <code>where</code> 之后只认识<code>true</code> or <code>false</code> ， 然而我的数据里面有null, <strong>null 和 比较运算符得到的结果是 <code>UNKNOW</code></strong> , 所以就会像上图中任何运算符都没有结果，所以大家如果遇到了同样的问题可以查看一下自己的数据</p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>我用一个干净的数据测试了一下确实是这样的<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SQL/%E9%AA%8C%E8%AF%81.jpg" alt></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><h2 id="这里有很详细的探讨和代码，建议有兴趣的拓展阅读"><a href="#这里有很详细的探讨和代码，建议有兴趣的拓展阅读" class="headerlink" title="这里有很详细的探讨和代码，建议有兴趣的拓展阅读"></a>这里有很详细的探讨和代码，建议有兴趣的拓展阅读</h2><p><a href="https://www.cnblogs.com/killkill/archive/2010/09/04/1817266.html" target="_blank" rel="noopener">https://www.cnblogs.com/killkill/archive/2010/09/04/1817266.html</a></p><h3 id="提取上文大佬的结论"><a href="#提取上文大佬的结论" class="headerlink" title="提取上文大佬的结论"></a>提取上文大佬的结论</h3><ul><li>in/not in 的结果是依赖于“=”等值判断的结果；exists/not exists 虽然是判断集合是否为空，但通常里面的子查询做的是值判断</li><li>minus消灭了重复行！这就是前文所说的 not in 和 not exists 并非真正意义上的差集。</li></ul><h1 id="优化-写出鲁棒性更好的SQL！"><a href="#优化-写出鲁棒性更好的SQL！" class="headerlink" title="优化(写出鲁棒性更好的SQL！)"></a>优化(写出鲁棒性更好的SQL！)</h1><h2 id="优化依据"><a href="#优化依据" class="headerlink" title="优化依据"></a>优化依据</h2><p>in/not in 的结果是依赖于“=”等值判断的结果；exists/not exists 虽然是判断集合是否为空，但通常里面的子查询做的是值判断</p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>所以在<code>group by</code>之前都执行以下<code>where \*.\* is not null</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> student.sno,sname,<span class="keyword">avg</span>(Grade)</span><br><span class="line"><span class="keyword">from</span> student,sc</span><br><span class="line"><span class="keyword">where</span> student.sno=sc.sno</span><br><span class="line">    <span class="keyword">and</span> sdept=<span class="string">'CS'</span></span><br><span class="line">    <span class="keyword">and</span> sc.Grade <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sc.sno <span class="keyword">having</span> <span class="keyword">avg</span>(grade) &gt;=</span><br><span class="line">    <span class="keyword">all</span>(</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">avg</span>(grade) <span class="keyword">from</span> student,sc <span class="keyword">where</span></span><br><span class="line">            student.sno=sc.sno</span><br><span class="line">            <span class="keyword">and</span> sdept=<span class="string">'CS'</span></span><br><span class="line">            <span class="keyword">and</span> sc.grade <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> student.sno);</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SQL/%E4%BC%98%E5%8C%96.jpg" alt></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下导入导出数据库</title>
    <url>/Windows%E4%B8%8B%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h1><p>在<strong>管理员</strong>cmd(命令行下)</p><p><code>mysqldump -u 数据库用户名 -p 数据库名称 &gt; 导出的数据库文件</code></p><p>或者</p><p><code>mysqldump -u 数据库用户名 -p密码 数据库名称 &gt; 导出的数据库文件</code></p><p>例如:<br><code>mysqldump -u root -proot school &gt; C:/Users/wolfdan666/Desktop/Blog/SQL/数据库/school.sql</code></p><h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><h2 id="创建空数据库"><a href="#创建空数据库" class="headerlink" title="创建空数据库"></a>创建空数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql -u 用户名 -p密码</span></span><br><span class="line">mysql -u root -proot</span><br><span class="line"><span class="comment"># create database 数据库名;</span></span><br><span class="line">create database school;</span><br></pre></td></tr></table></figure><h2 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h2><p>退出sql，回到cmd，导入数据库<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 退出sql</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># mysql -u 数据库用户名 –p密码 数据库名称 &lt; 导入的数据库文件</span></span><br><span class="line">mysql -u root -proot school &lt; C:/Users/wolfdan666/Desktop/Blog/SQL/数据库/school.sql</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第33周[33/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC33%E5%91%A8-33-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/%E5%89%91%E6%8C%87offer/%E4%B8%AD%E4%BD%8D%E6%95%B0" target="_blank" rel="noopener">数据流中的中位数</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/better-programming/2020-programming-trend-predictions-a5d6b70bec26" target="_blank" rel="noopener">2020 and Beyond Programming Trend Predictions</a><br>互联网更新换代很快很快，新的语言啊，新的技术啊，看起来很难，其实如果有了一定的经验后，会很容易找到迁移学习的路径，很容易上手的</p><p>所以应对变化，我们只要做好不变的就行了: 掌握内核思想,终身学习</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>我一直难受Hexo的生成速度,然后看到了一篇好文章—<a href="https://ojbk.im/posts/2018/whats-next-about-this-site/" target="_blank" rel="noopener">关于本站的未来</a></p><h2 id="详细心路过程"><a href="#详细心路过程" class="headerlink" title="详细心路过程"></a>详细心路过程</h2><p>之前一直觉得wordpress很重，带不动，太慢了(当时用的还是国外的小机机)，现在虽然用上了国内的服务器(<del>大机机</del>)，但还是担心可能会很重</p><p>然后Hexo生成速度真的越来越慢了，感觉每次都重新生成一次真的太太太折腾了，更何况我觉得我之后还要做很多修缮，想想有点难<br>所以有点想考虑换一个生成速度快一点的网站了，然后正好看到了一个大佬的文章</p><p><a href="https://ojbk.im/posts/2018/whats-next-about-this-site/" target="_blank" rel="noopener">关于本站的未来</a></p><p>Hugo暂时来说生态不如Hexo好，而且主题暂时还得等待大佬们制作，而且之后从Hexo迁移到Hugo应该会越来越方便(主要是舍不得自己定制了好久的主题和评论系统吧)</p><p>所以再等等</p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/eclipse%E6%90%AD%E5%BB%BAMapReduce%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/">eclipse搭建MapReduce代码编译环境</a></p><p><a href="https://www.wolfdan.cn/ICP%E5%A4%87%E6%A1%88%E7%BB%8F%E5%8E%86%E4%B8%8E%E5%90%8E%E7%BB%AD-%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D%EF%BC%8C%E5%8D%8E%E4%B8%BA%E4%BA%91%E4%B8%BB%E6%9C%BA%EF%BC%8C%E5%9C%A8%E5%8D%8E%E4%B8%BA%E4%BA%91%E5%A4%87%E6%A1%88/">ICP备案经历与后续-腾讯云的域名，华为云主机，在华为云备案</a></p><p><a href="https://www.wolfdan.cn/Windows%E4%B8%8B%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E5%BA%93/">导出导入数据库</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
        <tag>Hexo</tag>
        <tag>Wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>ICP备案经历与后续-腾讯云的域名，华为云主机，在华为云备案</title>
    <url>/ICP%E5%A4%87%E6%A1%88%E7%BB%8F%E5%8E%86%E4%B8%8E%E5%90%8E%E7%BB%AD-%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D%EF%BC%8C%E5%8D%8E%E4%B8%BA%E4%BA%91%E4%B8%BB%E6%9C%BA%EF%BC%8C%E5%9C%A8%E5%8D%8E%E4%B8%BA%E4%BA%91%E5%A4%87%E6%A1%88/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="无法解析困境与解答"><a href="#无法解析困境与解答" class="headerlink" title="无法解析困境与解答"></a>无法解析困境与解答</h2><p>为了自己的小站能有极速体验，然后就一直想搞一台国内的服务器，然后就入手了华为云学生机，之前折腾了好长一段时间的域名解析到华为云，但是一直有问题，然后一直找不到原因，后面看到某个帖子才发现，原来我自闭了8个多小时去找bug为什么不行的原因是因为没有备案的域名不能解析到国内的服务器！</p><h2 id="备案疑惑"><a href="#备案疑惑" class="headerlink" title="备案疑惑"></a>备案疑惑</h2><p>然后自己就决定要去备案了，奈何自己的域名在腾讯云，然后自己的服务器在华为云，然后我就想着把腾讯云的域名转移到华为云(<del>虽然说华为云的cn域名每年39,腾讯云每年35让自己纠结了好久，真屌丝行为</del>)，然后发现一个致命的问题就是: <code>竟然因为他们的域名都是托管在新网的，所以导致无法转移域名</code>, 在网上找了半天的解决方案都没有人有相似的经历，可能我是个奇葩吧</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>既然没有人经历过，那就让我来成为这个第一吃螃蟹的人吧</p><p>于是我开始了<code>腾讯云的域名，华为云主机，在华为云备案</code> 的进程，进入华为云备案，然后按照提示以及客服的提醒备案</p><h2 id="开始焦灼后备案成功"><a href="#开始焦灼后备案成功" class="headerlink" title="开始焦灼后备案成功"></a>开始焦灼后备案成功</h2><p>等待10天左右的时候还没有什么感觉，等到15天还没有备案成功(<del>其实是备案太久会导致SEO掉分，以及自己正在准备一个公司的实习面试的简历，我想在简历上写上我的网站</del>)，然后就开始每天看看，在网上看看别人备案了多久，然后直到今天有点焦灼了，还在LZ聊天间隙问我SEO是不是很赚钱的时候和她抱怨了一下备案怎么还没有成功，结果没有过一个小时就成功了，哈哈哈哈哈哈哈哈哈，好爽!!!</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/%E5%A4%87%E6%A1%88/%E5%A4%87%E6%A1%88%E6%88%90%E5%8A%9F.png" alt="备案成功"></p><h1 id="添加备案号和图案到页面下"><a href="#添加备案号和图案到页面下" class="headerlink" title="添加备案号和图案到页面下"></a>添加备案号和图案到页面下</h1><p>在<code>hexo\blog\themes\{你的主题名}\layout\_partials\footer.swig</code>中加入</p><p><code>&lt;a href=&quot;http://www.beian.miit.gov.cn/&quot;&gt;湘ICP备19025607号&lt;/a&gt;</code> (注意修改成为自己的备案号)</p><p>我的是下面这样的</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"copyright"</span>&gt;</span>&#123;#</span><br><span class="line">#&#125;&#123;% set current = date(Date.now(), "YYYY") %&#125;&#123;#</span><br><span class="line">#&#125;&amp;copy; &#123;% if theme.footer.since and theme.footer.since != current %&#125;&#123;&#123; theme.footer.since &#125;&#125; &amp;mdash; &#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"copyrightYear"</span>&gt;</span>&#123;&#123; current &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"with-love"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-&#123;&#123; theme.footer.icon &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"author"</span> <span class="attr">itemprop</span>=<span class="string">"copyrightHolder"</span>&gt;</span>&#123;&#123; theme.footer.copyright || config.author &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;% if theme.post_wordcount.totalcount %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-area-chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;% if theme.post_wordcount.item_text %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>&#123;&#123; __('post.totalcount') &#125;&#125;&amp;#58;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.totalcount') &#125;&#125;"</span>&gt;</span>&#123;#</span><br><span class="line">    #&#125;&#123;&#123; totalcount(site, '0,0.0a') &#125;&#125;&#123;#</span><br><span class="line">  #&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.beian.miit.gov.cn/"</span>&gt;</span>湘ICP备19025607号<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="把自己的网站解析放回去"><a href="#把自己的网站解析放回去" class="headerlink" title="把自己的网站解析放回去"></a>把自己的网站解析放回去</h1><p>因为自己是首次备案，所以备案期间不准解析，然后一直用着<code>wolfdan666.coding.me</code>猥琐发育,并且最近写的文章的相互连接也用的这个，所以我备案成功之后要</p><ul><li>把自己的域名解析放出来</li><li>然后再把最近写的一些文章的链接改一下(之前想到会有这一天，所以记录了)</li></ul><h1 id="将Hexo解析部署到华为云"><a href="#将Hexo解析部署到华为云" class="headerlink" title="将Hexo解析部署到华为云"></a>将Hexo解析部署到华为云</h1><h2 id="这个时候最好不要使用谷歌浏览器"><a href="#这个时候最好不要使用谷歌浏览器" class="headerlink" title="这个时候最好不要使用谷歌浏览器"></a>这个时候最好不要使用谷歌浏览器</h2><p>别问我怎么知道的,看下面的图(<del>有时候使用谷歌浏览器不是会让自己自闭很多个小时而找不到原因,因为谷歌不显示是备案未成功的错误</del>)<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/write%E6%8A%80%E5%B7%A7/%E5%A4%87%E6%A1%88/%E6%9C%89%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8D%E6%98%AF%E4%BC%9A%E8%AE%A9%E8%87%AA%E5%B7%B1%E8%87%AA%E9%97%AD%E5%BE%88%E5%A4%9A%E4%B8%AA%E5%B0%8F%E6%97%B6%E8%80%8C%E6%89%BE%E4%B8%8D%E5%88%B0%E5%8E%9F%E5%9B%A0%2C%E5%9B%A0%E4%B8%BA%E8%B0%B7%E6%AD%8C%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%98%AF%E5%A4%87%E6%A1%88%E6%9C%AA%E6%88%90%E5%8A%9F%E7%9A%84%E9%94%99%E8%AF%AF.jpg" alt></p><h2 id="一些参考教程"><a href="#一些参考教程" class="headerlink" title="一些参考教程"></a>一些参考教程</h2><p><a href="https://segmentfault.com/a/1190000016106584#articleHeader16" target="_blank" rel="noopener">自己是看这篇博文搭的，但是之前因为没有备案所以没成功</a></p><p><a href="https://blog.csdn.net/staunchkai/article/details/82878928" target="_blank" rel="noopener">但是自己按照上面文章还是出了点问题，所以又参考了另一个大佬的</a></p><p><a href="https://blog.csdn.net/StaunchKai/article/details/82901437" target="_blank" rel="noopener">SSL配置</a></p><h1 id="后续体验"><a href="#后续体验" class="headerlink" title="后续体验"></a>后续体验</h1><ol><li>将Hexo解析部署到华为云之后,每次文章deploy之后去网站查看,改动都是响应都特别特别快,特别爽! (因为之前deploy完之后要等半天才能看到改动)</li><li>图片加载速度提升了超级多，分析能够知道应该是服务器帮我们先去拉取链接(如果是本来就是自己拉取的话应该不会变化这么大)，之前托管在github或者coding的pages服务的服务器都是很慢的，所以用了VPS之后就拉取和展示图片的速度都快很多</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>备案</tag>
        <tag>华为云</tag>
        <tag>腾讯云</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>eclipse搭建MapReduce代码编译环境+java.lang.NoClassDefFoundError-org/apache/hadoop/yarn/util/Apps</title>
    <url>/eclipse%E6%90%AD%E5%BB%BAMapReduce%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="新建一个java工程"><a href="#新建一个java工程" class="headerlink" title="新建一个java工程"></a>新建一个java工程</h1><h1 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h1><h2 id="下载Hadoop包"><a href="#下载Hadoop包" class="headerlink" title="下载Hadoop包"></a>下载Hadoop包</h2><p>当然你应该要下载<a href="https://hadoop.apache.org/releases.html" target="_blank" rel="noopener">Apache Hadoop包</a></p><h2 id="导入jar包-1"><a href="#导入jar包-1" class="headerlink" title="导入jar包"></a>导入jar包</h2><ul><li><p>右键项目<code>properties</code>—-<code>java build path</code>—-<code>add library</code>—-<code>user library</code></p></li><li><p>—-<code>user libraries</code>—-<code>New</code>—-<code>hdfsjar</code></p></li><li><p>这样新建的<code>hdfsjar</code>就完成了</p></li><li><p><strong>选中<code>hdfsjar</code></strong>点击右边的<code>add External JARs</code>—-选择你下载目录加压后的文件夹中的<code>common</code>(我的路径是<code>hadoop-2.6.0/share/hadoop/common/</code>)下的所有jar包</p></li><li><p>同上面的方法添加<code>common/lib</code>下的全部jar包</p><h3 id="同理配置"><a href="#同理配置" class="headerlink" title="同理配置"></a>同理配置</h3></li><li>同理添加<code>hdfs</code>(我的路径是<code>hadoop-2.6.0/share/hadoop/hdfs/</code>)下的jar包</li><li>同上面的方法添加<code>hdfs/lib</code>下的全部jar包</li><li>以及<code>hadoop-2.6.0/share/hadoop/mapreduce</code>下的jar和<code>hadoop-2.6.0/share/hadoop/mapreduce/lib</code>下的jar</li><li>以及<code>hadoop-2.6.0/share/hadoop/yarn</code>下的jar和<code>hadoop-2.6.0/share/hadoop/yarn/lib</code>下的jar<br>最后一个配置是为了直接在eclipse里面跑hadoop,<a href="https://blog.csdn.net/estelle_belle/article/details/85245051" target="_blank" rel="noopener">具体可以看这个大佬的</a><br>然后需要的资源链接可以到我分享的网盘去取<br>&gt;<br>链接：<a href="https://pan.baidu.com/s/1ESloDZbgEQ0me9rg0wHWRg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ESloDZbgEQ0me9rg0wHWRg</a><br>提取码：3n3i</li></ul><h1 id="爽"><a href="#爽" class="headerlink" title="爽"></a>爽</h1><p>以后新MapReduce工程直接添加自己的<code>hdfsjar</code>的用户libraries就行了</p><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>个人是通过windows平台的eclipse来写代码，然后没有错误提醒之后把java文件生成jar包，然后把jar传送到linux虚拟机集群上面跑命令的，比如<br><code>hadoop jar WordCount.jar WordCount /data/1.txt /output/1</code></p><h1 id="java-lang-NoClassDefFoundError-org-apache-hadoop-yarn-util-Apps"><a href="#java-lang-NoClassDefFoundError-org-apache-hadoop-yarn-util-Apps" class="headerlink" title="java.lang.NoClassDefFoundError-org/apache/hadoop/yarn/util/Apps"></a>java.lang.NoClassDefFoundError-org/apache/hadoop/yarn/util/Apps</h1><p>为了直接在eclipse里面跑hadoop,<a href="https://blog.csdn.net/estelle_belle/article/details/85245051" target="_blank" rel="noopener">具体可以看这个大佬的</a><br>然后需要的资源链接可以到我分享的网盘去取<br>&gt;<br>链接：<a href="https://pan.baidu.com/s/1ESloDZbgEQ0me9rg0wHWRg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ESloDZbgEQ0me9rg0wHWRg</a><br>提取码：3n3i</p><p>但是我出了问题，就是这个子标题的问题<br>好好反思了一下两个关键点</p><ol><li>导入jar包，我导入了啊啊啊啊(反思两个小时无果)</li><li>看了大佬的教程—-&gt; <strong>中文路径，中文路径，中文路径</strong>(我的两小时,苦涩,以后少用中文目录)</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/peng_0129/article/details/80505722" target="_blank" rel="noopener">https://blog.csdn.net/peng_0129/article/details/80505722</a></p><p><a href="https://blog.csdn.net/weixin_42267009/article/details/81284362" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42267009/article/details/81284362</a> 这个老哥还加了少量图片，不会操作的可以看看这个链接</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>MapReduce</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第32周[32/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC32%E5%91%A8-32-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/%E5%89%91%E6%8C%87offer" target="_blank" rel="noopener">刷&lt;剑指offer&gt;</a></p><h1 id="Reviews"><a href="#Reviews" class="headerlink" title="Reviews"></a>Reviews</h1><p><a href="https://medium.com/@melissamcewen/i-just-dont-want-to-be-a-software-developer-anymore-a371422069a1" target="_blank" rel="noopener">I just don’t want to be a software developer anymore</a></p><p>是啊，其实感觉真的工作时长有点多了，不过如果真的感兴趣的话，先学几年，然后进入了更好的大厂955之后还是挺好的</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/qq_41479464/article/details/101922027" target="_blank" rel="noopener">安徽省大数据网络赛大数据分析第二小题</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://coolshell.cn/articles/20276.html" target="_blank" rel="noopener">别让自己”墙”了自己 | | 酷 壳 - CoolShell</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第31周[31/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC31%E5%91%A8-31-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>LeetCode98. 验证二叉搜索树</p><p>好久(一个多星期了)没写算法题了，然后变菜了好多…所以还是要多多练习，不然没有题感了…</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="comment">// 测试一发发现傻逼了自己，NULL在c++里面是0，和java里面的Integer对象中的NULL不是一样的！我傻逼了</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 对于边界值有两种处理方式,1. 设置更大的界限,不过这样显然是找到的数据的bug</span></span><br><span class="line">  <span class="comment">// 所以我采用第二种方式,就是利用 二叉搜索树 不会有重复值的性质去 取代之前的&gt;=,&lt;=,这样就不会受限了</span></span><br><span class="line">    <span class="comment">// set&lt;int&gt; s;// 20ms</span></span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; s;<span class="comment">// 16ms</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(TreeNode *root,<span class="keyword">int</span> min,<span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">int</span> val = root-&gt;val;</span><br><span class="line">      <span class="keyword">if</span>(s.find(val)!=s.end()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">else</span> s.insert(val);</span><br><span class="line">      <span class="comment">// 这里会wa在`[2147483647]` if(min&gt;=val) return false;</span></span><br><span class="line">      <span class="comment">// 凡是遍历下来的，一定有父亲，所以其实只要特判一手单根树就行了！</span></span><br><span class="line">      <span class="comment">// [1,null,1] 右边遍历也不是跟左边的孩子比较，都是和父亲比较！！ if(root-&gt;left!=NULL &amp;&amp; min&gt;=val) return false;</span></span><br><span class="line">      <span class="keyword">if</span>(min&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// 这里会wa在`[1,1]` 因为右边不是跟右孩子比较！ if(root-&gt;right!=NULL &amp;&amp; max&lt;=val) return false;</span></span><br><span class="line">      <span class="keyword">if</span>(max&lt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// 遍历左边的时候，右边的最大一直保持val</span></span><br><span class="line">      <span class="comment">// 遍历右边的时候，左边的最小一直保持val，所以就保持了性质</span></span><br><span class="line">      <span class="keyword">return</span> solve(root-&gt;left,min,val) &amp;&amp; solve(root-&gt;right,val,max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="literal">NULL</span> || (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>) ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> solve(root,INT_MIN,INT_MAX);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/solution/yan-zheng-er-cha-sou-suo-shu-by-leetcode/" target="_blank" rel="noopener">LeetCode98. 验证二叉搜索树 ans</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>观看了电影<a href="https://movie.douban.com/subject/1292656/" target="_blank" rel="noopener">心灵捕手</a></p><ol><li>正视自己的一切不完美，去接纳它们</li><li>只有真正热爱，才能一直热泪盈眶，Follow your heart</li><li>心之所向，胜过一切荣耀</li><li>去爱，去信任，去找到那个可以互相接纳不完美又互相爱护的人</li></ol><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://juejin.im/post/5cff4de6e51d45777a126171" target="_blank" rel="noopener">VScode远程开发</a></p><blockquote><p>将公钥拷贝到服务器上：<code>ssh-copy-id username@your.ip.2.*</code></p></blockquote><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><h2 id="复制硬盘中的Ubuntu-Deepin到移动硬盘-实现移动硬盘Deepin-Ubunntu双系统"><a href="#复制硬盘中的Ubuntu-Deepin到移动硬盘-实现移动硬盘Deepin-Ubunntu双系统" class="headerlink" title="复制硬盘中的Ubuntu/Deepin到移动硬盘_实现移动硬盘Deepin+Ubunntu双系统"></a>复制硬盘中的Ubuntu/Deepin到移动硬盘_实现移动硬盘Deepin+Ubunntu双系统</h2><p><a href="https://www.wolfdan.cn/%E5%A4%8D%E5%88%B6%E7%A1%AC%E7%9B%98%E4%B8%AD%E7%9A%84Ubuntu%E5%88%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98-%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98Deepin-Ubunntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/">复制硬盘中的Ubuntu/Deepin到移动硬盘_实现移动硬盘Deepin+Ubunntu双系统</a></p><h2 id="Share-三种清除Git提交历史的方法"><a href="#Share-三种清除Git提交历史的方法" class="headerlink" title="Share_三种清除Git提交历史的方法"></a>Share_三种清除Git提交历史的方法</h2><p>参考大佬:<br><a href="https://blog.csdn.net/yiifaa/article/details/78603410#commentBox" target="_blank" rel="noopener">三种清除Git提交历史的方法</a><br><a href="https://www.cnblogs.com/shines77/p/3460274.html" target="_blank" rel="noopener">Git如何永久删除文件(包括历史记录)</a></p><p><strong>我自己的操作,因为一次误传，导致整整搞了4个多小时左右…</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">单林敏@DESKTOP-A7T3V67 MINGW64 ~/Desktop/Blog (master)</span><br><span class="line">$ git filter-branch --force --index-filter <span class="string">'git rm --cached -r --ignore-unmatch 生活/微信备份/8月13-11月19与昭\(夹34其他\)/android_eda93ed7432c852f294c0f6c71fb3352/ &amp;&amp; git rm --cached -r Latex/'</span> --prune-empty --tag-name-filter cat -- --all</span><br><span class="line">Rewrite 67c9d71d4e60028c54451053e4d0eb6e733b7586 (1/96) (1 seconds passed, remaining 95 predicted)    fatal: pathspec <span class="string">'Latex/'</span> did not match any files</span><br><span class="line">index filter failed: git rm --cached -r --ignore-unmatch 生活/微信备份/8月13-11月19与昭\(夹34其他\)/android_eda93ed7432c852f294c0f6c71fb3352/ &amp;&amp; git rm --cached -r Latex/</span><br><span class="line"></span><br><span class="line">单林敏@DESKTOP-A7T3V67 MINGW64 ~/Desktop/Blog (master)</span><br><span class="line">$ git filter-branch --force --index-filter <span class="string">'git rm --cached -r Latex/'</span> --prune-empty --tag-name-filter cat -- --all                                                       Rewrite 67c9d71d4e60028c54451053e4d0eb6e733b7586 (1/96) (0 seconds passed, remaining 0 predicted)    fatal: pathspec <span class="string">'Latex/'</span> did not match any files</span><br><span class="line">index filter failed: git rm --cached -r Latex/</span><br><span class="line"></span><br><span class="line">单林敏@DESKTOP-A7T3V67 MINGW64 ~/Desktop/Blog (master)</span><br><span class="line">$ git filter-branch --force --index-filter <span class="string">'git rm --cached --ignore-unmatch 生活/微信备份/8月13-11月19与昭\(夹34其他\)/android_eda93ed7432c852f294c0f6c71fb3352/BAK_0_MEDIA'</span> --prune-empty --tag-name-filter cat -- --all</span><br><span class="line">Rewrite 3279ddb863731866633999b43860045b1c0ceb05 (93/96) (64 seconds passed, remaining 2 predicted)    rm <span class="string">'生活/微信备份/8月13-11月19与昭(夹34其他)/android_eda93ed7432c852f294c0f6c71fb3352/BAK_0_MEDIA'</span></span><br><span class="line">Rewrite 2f64cd075e37f29a8559d7bbd8282d0b70bea117 (95/96) (66 seconds passed, remaining 0 predicted)</span><br><span class="line">Ref <span class="string">'refs/heads/master'</span> was rewritten</span><br><span class="line">WARNING: Ref <span class="string">'refs/remotes/wolfdan.cn/master'</span> is unchanged</span><br><span class="line"></span><br><span class="line">单林敏@DESKTOP-A7T3V67 MINGW64 ~/Desktop/Blog (master)</span><br><span class="line">$ git push  wolfdan.cn master --force --all</span><br><span class="line">fatal: --all can<span class="string">'t be combined with refspecs</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">单林敏@DESKTOP-A7T3V67 MINGW64 ~/Desktop/Blog (master)</span></span><br><span class="line"><span class="string">$ git push  wolfdan.cn master --force</span></span><br><span class="line"><span class="string">Enumerating objects: 26, done.</span></span><br><span class="line"><span class="string">Counting objects: 100% (26/26), done.</span></span><br><span class="line"><span class="string">Delta compression using up to 8 threads</span></span><br><span class="line"><span class="string">Compressing objects: 100% (20/20), done.</span></span><br><span class="line"><span class="string">Writing objects: 100% (22/22), 6.41 MiB | 584.00 KiB/s, done.</span></span><br><span class="line"><span class="string">Total 22 (delta 6), reused 10 (delta 1)</span></span><br><span class="line"><span class="string">remote: Checking connectivity: 22, done.</span></span><br><span class="line"><span class="string">remote: Powered by GITEE.COM [GNK-3.8]</span></span><br><span class="line"><span class="string">To gitee.com:wolfdan/wolfdan.cn.git</span></span><br><span class="line"><span class="string">   a21c409..50fecff  master -&gt; master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">单林敏@DESKTOP-A7T3V67 MINGW64 ~/Desktop/Blog (master)</span></span><br><span class="line"><span class="string">$ git filter-branch --force --index-filter '</span>git rm --cached --ignore-unmatch -rf 生活/微信备份/<span class="string">' --prune-empty --tag-name-filter cat -- --all                             Rewrite 7eadb383a4da06293c8c6f8cd38da878221d00de (93/96) (63 seconds passed, remaining 2 predicted)    rm '</span>生活/微信备份/8月13-11月19与昭(夹34其他)/android_eda93ed7432c852f294c0f6c71fb3352/BAK_0_TEXT<span class="string">'</span></span><br><span class="line"><span class="string">rm '</span>生活/微信备份/8月13-11月19与昭(夹34其他)/android_eda93ed7432c852f294c0f6c71fb3352/Backup.db<span class="string">'</span></span><br><span class="line"><span class="string">Rewrite 50fecff951f7eb6e8a8a908594d06f448ce1e873 (95/96) (64 seconds passed, remaining 0 predicted)</span></span><br><span class="line"><span class="string">Ref '</span>refs/heads/master<span class="string">' was rewritten</span></span><br><span class="line"><span class="string">Ref '</span>refs/remotes/wolfdan.cn/master<span class="string">' was rewritten</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">单林敏@DESKTOP-A7T3V67 MINGW64 ~/Desktop/Blog (master)</span></span><br><span class="line"><span class="string">$ rm -rf .git/refs/original/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">单林敏@DESKTOP-A7T3V67 MINGW64 ~/Desktop/Blog (master)</span></span><br><span class="line"><span class="string">$ git reflog expire --expire=now --all</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">单林敏@DESKTOP-A7T3V67 MINGW64 ~/Desktop/Blog (master)</span></span><br><span class="line"><span class="string">$ git gc --prune=now</span></span><br><span class="line"><span class="string">Enumerating objects: 1401, done.</span></span><br><span class="line"><span class="string">Counting objects: 100% (1401/1401), done.</span></span><br><span class="line"><span class="string">Delta compression using up to 8 threads</span></span><br><span class="line"><span class="string">Compressing objects: 100% (1068/1068), done.</span></span><br><span class="line"><span class="string">Writing objects: 100% (1401/1401), done.</span></span><br><span class="line"><span class="string">Total 1401 (delta 302), reused 1396 (delta 301)</span></span><br></pre></td></tr></table></figure><p><strong>清理了一下，感觉<code>.git</code>文件变小了好多，好爽</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第30周[30/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC30%E5%91%A8-30-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.11/2019.11.12%E6%B7%B1%E4%BF%A1%E6%9C%8D2019%E6%98%A5%E6%8B%9B%E7%AC%94%E8%AF%95%E9%A2%98" target="_blank" rel="noopener">2019深信服春招笔试题(上)</a></p><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.11/2019.11.13%E6%B7%B1%E4%BF%A1%E6%9C%8D2019%E6%98%A5%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%A2%98%E8%A1%A5%E9%A2%98" target="_blank" rel="noopener">2019深信服春招笔试题(下)</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://psiloveyou.xyz/the-unforgettable-relationship-advice-my-ex-girlfriend-gave-me-f86bce612769" target="_blank" rel="noopener">The Unforgettable Relationship Advice My Ex-Girlfriend Gave Me</a><br>我觉得恋爱关系的处理能够极大得增长人们的人际交往关系，让人学会更加耐心，学会互相理解</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://superuser.com/questions/175250/how-to-remove-one-or-all-auto-complete-text-entries-in-chrome" target="_blank" rel="noopener">如何删除Chrome的地址联想功能</a></p><p>其实按照链接中说的操作还是很简单的,但是由于自己有点东西收藏过,所以还是会联想,所以还要找到相对应的收藏,然后把对应收藏条目删除之后,搜索联想才不会出现你要删除掉的条目</p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.itcodemonkey.com/article/14737.html" target="_blank" rel="noopener">Linux C/C++ 学习路线（已拿腾讯、百度 offer）</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第29周[29/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC29%E5%91%A8-29-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.11/2019.11.6%E5%80%9F909%E9%98%9F%E4%BC%8D%E6%A8%A1%E6%8B%9F%E8%AE%AD%E7%BB%832019CCPC%E5%93%88%E5%B0%94%E6%BB%A8%E5%87%86%E5%A4%87%E5%8D%97%E6%98%8C2019ICPC.cpp" target="_blank" rel="noopener">借909队伍模拟训练2019CCPC哈尔滨准备南昌2019ICPC</a></p><p><del>结果打铁南昌退役，有点尴尬,还是太菜了，继续努力吧，人生还很长</del></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/swlh/how-i-beat-procrastination-by-doing-this-1-thing-d63ac1f1af2d" target="_blank" rel="noopener">How I Beat Procrastination By Doing This 1 Thing</a><br>Nothing will help you if you don’t have an inner drive.</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.nowcoder.com/discuss/173566?type=2" target="_blank" rel="noopener">大三C++找实习面经整理</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.zhihu.com/question/52587433/answer/889374472" target="_blank" rel="noopener">搞了两年acm，从没拿过奖，怎么做才能找到好工作？</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS破解Adobe全家桶,学习成为专业设计师</title>
    <url>/macOS%E7%A0%B4%E8%A7%A3Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6-%E5%AD%A6%E4%B9%A0%E6%88%90%E4%B8%BA%E4%B8%93%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%B8%88/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p><strong>此方法仅供学习和非商业行为使用,请尊重他人知识产权,谢谢</strong></p><h1 id="到官网下载软件"><a href="#到官网下载软件" class="headerlink" title="到官网下载软件"></a>到官网下载软件</h1><p>先到官网下载安装<a href="https://creativecloud.adobe.com/apps/download/creative-cloud" target="_blank" rel="noopener">Creative Cloud</a></p><h1 id="安装完打开软件登录后先选语言"><a href="#安装完打开软件登录后先选语言" class="headerlink" title="安装完打开软件登录后先选语言"></a>安装完打开软件登录后先选语言</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/%E5%AE%89%E8%A3%85Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6/%E9%80%89%E6%8B%A9%E5%AE%89%E8%A3%85%E5%8C%85%E7%9A%84%E8%AF%AD%E8%A8%80.png" alt="安装完打开软件登录后先选语言!!!我一开始忘了选语言..."></p><h1 id="点击try下载你要下载的各个软件"><a href="#点击try下载你要下载的各个软件" class="headerlink" title="点击try下载你要下载的各个软件"></a>点击try下载你要下载的各个软件</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/%E5%AE%89%E8%A3%85Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6/try_20191103192312.png" alt="由于都是同一家的,破解软件也是全覆盖了这些产品,加上我虚拟机上不太方便,以及内存快不够了,所以只测试一个软件的安装,其他的安装破解应该一模一样,如果不一样到时候再操作一下"></p><h1 id="下载萝卜周大佬分享的TNT破解团队的软件"><a href="#下载萝卜周大佬分享的TNT破解团队的软件" class="headerlink" title="下载萝卜周大佬分享的TNT破解团队的软件"></a>下载萝卜周大佬分享的TNT破解团队的软件</h1><p><a href="https://pan.baidu.com/s/1d4oJ5-uKifaVjRMqiIqSNw#list/path=%2F" target="_blank" rel="noopener">链接</a></p><h1 id="下载之后安装"><a href="#下载之后安装" class="headerlink" title="下载之后安装"></a>下载之后安装</h1><p>先点击安装,会发现无法安装,然后我们看下面</p><h2 id="运行不了非app-store文件"><a href="#运行不了非app-store文件" class="headerlink" title="运行不了非app store文件"></a>运行不了非app store文件</h2><p>非软件商店下载的软件要去<code>设置-&gt;安全与隐隐-&gt;左下角解锁去做改变</code><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/%E5%AE%89%E8%A3%85Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6/%E5%AE%89%E8%A3%85%E5%90%8E%E8%BF%90%E8%A1%8C%E4%B8%8D%E4%BA%86.png" alt="安装后运行不了"></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/%E5%AE%89%E8%A3%85Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6/%E5%8E%BB%E8%AE%BE%E7%BD%AE%E4%B8%AD%E4%BF%AE%E6%94%B9.png" alt="去设置中修改"></p><h1 id="运行软件"><a href="#运行软件" class="headerlink" title="运行软件"></a>运行软件</h1><h2 id="下载了错误的版本运行了-可以直接跳过"><a href="#下载了错误的版本运行了-可以直接跳过" class="headerlink" title="下载了错误的版本运行了(可以直接跳过))"></a>下载了错误的版本运行了(可以直接跳过))</h2><h3 id="就这样拖过去-它会自动打开文件夹-很智能"><a href="#就这样拖过去-它会自动打开文件夹-很智能" class="headerlink" title="就这样拖过去,它会自动打开文件夹,很智能"></a>就这样拖过去,它会自动打开文件夹,很智能</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/%E5%AE%89%E8%A3%85Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6/%E5%B0%B1%E8%BF%99%E6%A0%B7%E6%8B%96%E8%BF%87%E5%8E%BB%2C%E5%AE%83%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E5%A4%B9%2C%E5%BE%88%E6%99%BA%E8%83%BD.png" alt="就这样拖过去,它会自动打开文件夹,很智能"></p><h3 id="上面操作的结果图"><a href="#上面操作的结果图" class="headerlink" title="上面操作的结果图"></a>上面操作的结果图</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/%E5%AE%89%E8%A3%85Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6/%E4%B8%8A%E9%9D%A2%E6%93%8D%E4%BD%9C%E7%9A%84%E7%BB%93%E6%9E%9C%E5%9B%BE.png" alt="上面操作的结果图"></p><h3 id="直接进入失败"><a href="#直接进入失败" class="headerlink" title="直接进入失败"></a>直接进入失败</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/%E5%AE%89%E8%A3%85Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6/%E7%9B%B4%E6%8E%A5%E5%A4%B1%E8%B4%A5.png" alt="直接进入失败"></p><h2 id="下载了正确的版本"><a href="#下载了正确的版本" class="headerlink" title="下载了正确的版本"></a>下载了正确的版本</h2><h3 id="点击左边-在黑框中回车"><a href="#点击左边-在黑框中回车" class="headerlink" title="点击左边,在黑框中回车"></a>点击左边,在黑框中回车</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/%E5%AE%89%E8%A3%85Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6/%E7%82%B9%E5%87%BB%E5%B7%A6%E8%BE%B9%2C%E5%9C%A8%E9%BB%91%E6%A1%86%E4%B8%AD%E5%9B%9E%E8%BD%A6_20191103193917.png" alt="点击左边,在黑框中回车"></p><h3 id="回车后就可以和错误版本一致的方法啦"><a href="#回车后就可以和错误版本一致的方法啦" class="headerlink" title="回车后就可以和错误版本一致的方法啦"></a>回车后就可以和错误版本一致的方法啦</h3><p>产生这个界面后和错误版本的执行操作完全一致，所以还是看看我的错误版本操作吧，皮一下还是开心的，然后你就惊奇发现破解过程中让你输入用户密码，然后你就成功了<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/%E5%AE%89%E8%A3%85Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6/%E4%BA%A7%E7%94%9F%E8%BF%99%E4%B8%AA%E7%95%8C%E9%9D%A2%E5%90%8E%E5%92%8C%E9%94%99%E8%AF%AF%E7%89%88%E6%9C%AC%E7%9A%84%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C%E5%AE%8C%E5%85%A8%E4%B8%80%E8%87%B4%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BF%98%E6%98%AF%E7%9C%8B%E7%9C%8B%E6%88%91%E7%9A%84%E9%94%99%E8%AF%AF%E7%89%88%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%90%A7%EF%BC%8C%E7%9A%AE%E4%B8%80%E4%B8%8B%E8%BF%98%E6%98%AF%E5%BC%80%E5%BF%83%E7%9A%84%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BD%A0%E5%B0%B1%E6%83%8A%E5%A5%87%E5%8F%91%E7%8E%B0%E7%A0%B4%E8%A7%A3%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%AE%A9%E4%BD%A0%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BD%A0%E5%B0%B1%E6%88%90%E5%8A%9F%E4%BA%86_20191103194045.png" alt></p><h3 id="拖入extra-然后双击打开后运行Adobe-Zli"><a href="#拖入extra-然后双击打开后运行Adobe-Zli" class="headerlink" title="拖入extra,然后双击打开后运行Adobe_Zli"></a>拖入extra,然后双击打开后运行Adobe_Zli</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/%E5%AE%89%E8%A3%85Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6/%E6%8B%96%E5%85%A5extra%2C%E7%84%B6%E5%90%8E%E5%8F%8C%E5%87%BB%E6%89%93%E5%BC%80%E5%90%8E%E8%BF%90%E8%A1%8CAdobe_Zli_20191103194305.png" alt></p><h1 id="真香文章参考"><a href="#真香文章参考" class="headerlink" title="真香文章参考"></a>真香文章参考</h1><p><a href="http://www.carrotchou.blog/20169.html" target="_blank" rel="noopener">http://www.carrotchou.blog/20169.html</a></p><h1 id="成功了"><a href="#成功了" class="headerlink" title="成功了"></a>成功了</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/%E5%AE%89%E8%A3%85Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6/%E6%88%90%E5%8A%9F.png" alt="我成功了"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>到官网下载2019版本</li><li>直接安装那几个软件</li><li>使用TNT2019 gank一切</li><li>个性化使用(比如:给Photoshop开一个不用每次欢迎都显示欢迎界面的设置</li><li><strong>如果是女朋友让你帮她装,那就祭出teamviewer吧,因为我的方案是不用断网安装的方案哦,祝大家的女朋友天天开心</strong></li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>搞机</tag>
        <tag>瞎折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>linux在virtualbox安装macOS并优化使用</title>
    <url>/linux%E5%9C%A8virtualbox%E5%AE%89%E8%A3%85macOS%E5%B9%B6%E4%BC%98%E5%8C%96%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="下载镜像并解压"><a href="#下载镜像并解压" class="headerlink" title="下载镜像并解压"></a>下载镜像并解压</h1><p>参考<a href="https://www.lulinux.com/archives/5062" target="_blank" rel="noopener">linux大佬网站的文章</a><br>(注意要回来看我的文章,不让可能会遇到一些坑)</p><h2 id="此步警告"><a href="#此步警告" class="headerlink" title="此步警告"></a>此步警告</h2><p><strong>6个包都要下载!!!</strong><br><strong>新建文件夹解压!!!</strong><br>别问怎么知道到,问就是你试一下会发现不行</p><h2 id="解压完应该是这样子的"><a href="#解压完应该是这样子的" class="headerlink" title="解压完应该是这样子的"></a>解压完应该是这样子的</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/VirtualBox%E4%BD%93%E9%AA%8C/%E8%BF%99%E6%AC%A1%E5%BA%94%E8%AF%A5%E6%98%AF%E6%AD%A3%E7%A1%AE%E8%A7%A3%E5%8E%8B%E4%BA%86.png" alt="解压完"></p><h1 id="下载VirtualBox"><a href="#下载VirtualBox" class="headerlink" title="下载VirtualBox"></a>下载VirtualBox</h1><p>到<a href="https://www.virtualbox.org/" target="_blank" rel="noopener">官网下载</a></p><p><del>惊呆发现VScode的markdown一体插件可以做到选择一段文字,粘贴网址,直接自动生成链接方式,而非覆盖,爽啊</del></p><h1 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h1><p>第一个界面命名为macOS,然后其他的可以不用动(当你输入macOS的时候,下面会自动变化)<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/VirtualBox%E4%BD%93%E9%AA%8C/1.png" alt="1"></p><p>物理内存大小自己看需求选择</p><p>主要是在虚拟硬盘处的选择,<strong>要选择使用已有的虚拟硬盘文件</strong>,然后<strong>点击注册</strong>,找到我们解压得到的文件<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/VirtualBox%E4%BD%93%E9%AA%8C/%E5%8E%9F%E6%9D%A5%E8%A6%81%E7%82%B9%E6%B3%A8%E5%86%8C%E5%95%8A.png" alt="注册"></p><p>之后的自己看情况next就行了</p><h1 id="开机前输入下面的命令"><a href="#开机前输入下面的命令" class="headerlink" title="开机前输入下面的命令"></a>开机前输入下面的命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vboxmanage modifyvm <span class="string">"macOS"</span> --cpuidset 00000001 000306a9 04100800 7fbae3ff bfebfbff</span><br><span class="line">vboxmanage setextradata <span class="string">"macOS"</span> <span class="string">"VBoxInternal/Devices/efi/0/Config/DmiSystemProduct"</span> <span class="string">"MacBookPro11,3"</span></span><br><span class="line">vboxmanage setextradata <span class="string">"macOS"</span> <span class="string">"VBoxInternal/Devices/efi/0/Config/DmiSystemVersion"</span> <span class="string">"1.0"</span></span><br><span class="line">vboxmanage setextradata <span class="string">"macOS"</span> <span class="string">"VBoxInternal/Devices/efi/0/Config/DmiBoardProduct"</span> <span class="string">"Iloveapple"</span></span><br><span class="line">vboxmanage setextradata <span class="string">"macOS"</span> <span class="string">"VBoxInternal/Devices/smc/0/Config/DeviceKey"</span> <span class="string">"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc"</span></span><br><span class="line">vboxmanage setextradata <span class="string">"macOS"</span> <span class="string">"VBoxInternal/Devices/smc/0/Config/GetKeyFromRealSMC"</span> 1</span><br><span class="line">vboxmanage setextradata <span class="string">"macOS"</span> <span class="string">"VBoxInternal2/EfiGraphicsResolution"</span> <span class="string">"1920x1080"</span></span><br></pre></td></tr></table></figure><h1 id="开机之后正常安装就搞定了"><a href="#开机之后正常安装就搞定了" class="headerlink" title="开机之后正常安装就搞定了"></a>开机之后正常安装就搞定了</h1><h1 id="进阶配置-虚拟机中macOS体验调优"><a href="#进阶配置-虚拟机中macOS体验调优" class="headerlink" title="进阶配置-虚拟机中macOS体验调优"></a>进阶配置-虚拟机中macOS体验调优</h1><h2 id="增加流畅以及安装扩展包"><a href="#增加流畅以及安装扩展包" class="headerlink" title="增加流畅以及安装扩展包"></a>增加流畅以及安装扩展包</h2><p><a href="https://my.oschina.net/u/3393721/blog/3020631" target="_blank" rel="noopener">增加流畅度</a></p><p>其中<a href="https://ywnz.com/linuxjc/5029.html" target="_blank" rel="noopener">deepin的无法安装扩展包的错误如下解决</a></p><p>在Deepin 15.10或者15.11系统的终端中，输入以下命令：<br><code>gksu-properties</code><br>将认证模式由su改为sudo即可</p><h2 id="附一张我的配置图吧"><a href="#附一张我的配置图吧" class="headerlink" title="附一张我的配置图吧"></a>附一张我的配置图吧</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/VirtualBox%E4%BD%93%E9%AA%8C/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE_20191103190209.png" alt="我的配置"></p><h1 id="新手见macOS"><a href="#新手见macOS" class="headerlink" title="新手见macOS"></a>新手见macOS</h1><ul><li><code>Capslk</code>才是中英文切换…<code>command+space</code>不行</li><li>正常的滚轮上下<img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/macOS/VirtualBox%E4%BD%93%E9%AA%8C/%E6%AD%A3%E5%B8%B8%E6%BB%9A%E5%8A%A8%E9%94%AE20191103113959.png" alt="正常的滚轮上下"></li><li>非软件商店下载的软件要去<code>设置-&gt;安全与隐隐-&gt;左下角解锁去做改变</code></li><li>吐槽没有Chrome使用</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>搞机</tag>
        <tag>瞎折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第28周[28/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC28%E5%91%A8-28-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Alogrithm"><a href="#Alogrithm" class="headerlink" title="Alogrithm"></a>Alogrithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.10/2019.10.28/dp%E5%AD%A6%E4%B9%A0" target="_blank" rel="noopener">重学dp</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://towardsdatascience.com/how-to-fake-being-a-good-programmer-cbef2c39764c" target="_blank" rel="noopener">How To Fake Being a Good Programmer</a><br>做之不止,乃成君子</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="http://html.rhhz.net/dejydxxb/html/2016/11/20160158.htm#top" target="_blank" rel="noopener">睡眠剥夺对个体情绪的影响及其机制</a></p><h2 id="小结与展望"><a href="#小结与展望" class="headerlink" title="小结与展望"></a>小结与展望</h2><p>以上研究从不同的角度阐释了睡眠剥夺影响个体情绪反应的机制：神经影像学研究表明睡眠剥夺个体的情绪回路，尤其是边缘系统存在激活异常；REMS相关研究显示REMS在大脑对情绪事件的感受中发挥着调节作用；情绪信息加工理论模型认为睡眠剥夺后个体不能有效地识别情绪，并产生对负性信息的“偏好”；而认知能量模型则认为睡眠剥夺会导致能量耗竭，从而扰乱了情绪的适应性反应。</p><p>综上所述，虽然研究者倾向于认为睡眠不足会阻碍情绪功能的发挥，但目前的实验研究结果并不一致，有少部分研究者报道并未发现睡眠剥夺导致个体主观情绪体验的显著性变化，甚至报道睡眠剥夺后个体对正性情绪刺激的反应增强。这种不一致可能与以下几个因素有关：(1)在研究方法上，目前研究多以自我评估(如POMS、PANAS等)的方式进行，少数研究虽然开始借助客观的生理指标(如瞳孔大小等)评估，但主观评估和客观测量的结果是否反映同一心理量，有待进一步探讨；(2)不同研究所使用的睡眠剥夺的范式不尽相同，如睡眠剥夺的时长、完全/部分睡眠剥夺、睡眠剥夺前适应实验室的时长以及睡眠剥夺后恢复的时长等，这些都可能对实验结果产生影响，在未来的研究中有待进一步的规范和标准化。总体说来，睡眠在情绪加工中起到一定的作用，但其作用的机制尚不明确。此外，目前较少有研究从干预睡眠剥夺后出现的负性情绪角度进行研究，这对于无法通过补足睡眠来改善情绪状态的失眠症患者是迫切需要的，在临床实践中有着广阔的应用前景。</p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/%E5%A4%8D%E5%88%B6%E7%A1%AC%E7%9B%98%E4%B8%AD%E7%9A%84Ubuntu%E5%88%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98-%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98Deepin-Ubunntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/">复制硬盘中的Ubuntu到移动硬盘<em>实现移动硬盘Deepin+Ubunntu双系统</em>更新版</a></p><p><a href="https://www.wolfdan.cn/linux%E5%9C%A8virtualbox%E5%AE%89%E8%A3%85macOS%E5%B9%B6%E4%BC%98%E5%8C%96%E4%BD%BF%E7%94%A8/">linux在virtualbox安装macOS并优化使用</a></p><p><a href="https://www.wolfdan.cn/macOS%E7%A0%B4%E8%A7%A3Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6-%E5%AD%A6%E4%B9%A0%E6%88%90%E4%B8%BA%E4%B8%93%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%B8%88/">macOS破解Adobe全家桶,学习成为专业设计师</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第27周[27/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC27%E5%91%A8-27-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.10/2019.10.25/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B18" target="_blank" rel="noopener">牛客小白月赛18</a></p><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.10/2019.10.26CF596" target="_blank" rel="noopener">Codeforces596div2</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://forge.medium.com/how-to-become-the-best-in-the-world-at-something-f1b658f93428" target="_blank" rel="noopener">How to Become the Best in the World at Something</a><br>But trying to be the best at one thing isn’t the smartest path to success. Instead, you should put your effort into mastering a combination of skills.<br>是啊,在一个技能上成为best player太难了,这需要从小就开始练习,并且还要有天赋,所以不妨多发展几个技能,然后在综合技能点上成为一个优秀的人吧.</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.bilibili.com/video/av44745015?t=366" target="_blank" rel="noopener">Linux太难了？软件都不会装？只是你的习惯在作祟—Linux安装软件的正确姿势</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/fatal-in-unpopulated-submodule-XXX-hexo-themes-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95git-push/">fatal: in unpopulated submodule XXX 以及 hexo themes 下一个文件夹无法git push解决方案</a></p><p><a href="https://www.wolfdan.cn/deepin%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E9%87%8D%E5%BB%BA-%E8%A7%A3%E5%86%B3deepin%E6%9B%B4%E6%96%B0%E5%AF%BC%E8%87%B4lightdm%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%80%8C%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA/">deepin重装系统后重建-deepin更新导致lightdm无法启动而无法开机的解决方案</a></p><p><a href="https://www.wolfdan.cn/%E5%87%8F%E5%B0%8Fvscode-cpptools-ipch%E7%9A%84%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8/">减小vscode-cpptools/ipch的内存占用</a></p><p><a href="https://www.wolfdan.cn/%E8%87%B4%E6%95%ACQQ%C2%B7linux/">致敬QQ·linux</a></p><p><a href="https://www.wolfdan.cn/%E4%B8%80%E5%85%83%E8%8E%B7%E5%8F%96%E6%97%B6%E5%85%89%E7%9B%B8%E5%86%8C%E7%9A%842T%E7%A9%BA%E9%97%B4/">一元获取2T相册视频空间</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>一元获取2T相册视频空间</title>
    <url>/%E4%B8%80%E5%85%83%E8%8E%B7%E5%8F%96%E6%97%B6%E5%85%89%E7%9B%B8%E5%86%8C%E7%9A%842T%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="2019年12月15日16-32-17-更新"><a href="#2019年12月15日16-32-17-更新" class="headerlink" title="2019年12月15日16:32:17 更新"></a>2019年12月15日16:32:17 更新</h1><p>好吧，果然过了不久时光相册取消了会员送永久2T空间的政策，回到了只能开着VIP才有2T空间的操作，不过也算正常吧，不然他们活不下去的</p><p>虽然还是有点感觉自己被耍了，233</p><h1 id="先上爽图"><a href="#先上爽图" class="headerlink" title="先上爽图"></a>先上爽图</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E8%BD%AF%E4%BB%B6/%E6%97%B6%E5%85%89%E7%9B%B8%E5%86%8C/shaung.png" width="30%" height="30%"></p><h1 id="获取步骤"><a href="#获取步骤" class="headerlink" title="获取步骤"></a>获取步骤</h1><blockquote><p>以下详细操作步骤请看最后的视频</p></blockquote><p><strong>一个月内还能上传2G内的视频哦</strong></p><h2 id="下载时光相册"><a href="#下载时光相册" class="headerlink" title="下载时光相册"></a>下载时光相册</h2><h2 id="登录点击头像"><a href="#登录点击头像" class="headerlink" title="登录点击头像"></a>登录点击头像</h2><h2 id="开通会员"><a href="#开通会员" class="headerlink" title="开通会员"></a>开通会员</h2><h2 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h2><h3 id="支付宝关闭"><a href="#支付宝关闭" class="headerlink" title="支付宝关闭"></a>支付宝关闭</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E8%BD%AF%E4%BB%B6/%E6%97%B6%E5%85%89%E7%9B%B8%E5%86%8C/zhifubao.jpg" width="30%" height="30%"></p><h3 id="微信关闭"><a href="#微信关闭" class="headerlink" title="微信关闭"></a>微信关闭</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E8%BD%AF%E4%BB%B6/%E6%97%B6%E5%85%89%E7%9B%B8%E5%86%8C/WeChat.png" width="30%" height="30%"></p><h1 id="感谢时光相册"><a href="#感谢时光相册" class="headerlink" title="感谢时光相册"></a>感谢时光相册</h1><p>其实时光相册挺好用的，有需要的朋友可以不关闭自动续费</p><h1 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h1><h2 id="youtube"><a href="#youtube" class="headerlink" title="youtube"></a>youtube</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/Belv_u2lQes" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="Bilibili"><a href="#Bilibili" class="headerlink" title="Bilibili"></a>Bilibili</h2><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=73469241&cid=125675973&page=1" frameborder="0" allow="accelerometer;autoplay; encrypted-media;gyroscope; picture-in-picture" allowfullscreen></iframe></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>瞎折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>致敬QQ·linux</title>
    <url>/%E8%87%B4%E6%95%ACQQ%C2%B7linux/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="时隔10年再出发"><a href="#时隔10年再出发" class="headerlink" title="时隔10年再出发"></a>时隔10年再出发</h1><p>QQ·linux早在2009年就停止更新维护了,然后就在昨天,2019年10月24日更新了.对于QQ·linux在2009年停止更新无可厚非,因为linux版本根本不会有钱赚,投入资金的话等于血亏,对于一个发展中的企业来说是不太能接受的,而且当时处在一个移动互联网快速发展的时代,所以我估计QQ的人手都忙着去开发手机QQ了</p><p>然后现在腾讯坐实了通讯的龙头老大的地位之后,什么米聊,多闪,MT,子弹短信都无法撼动QQ和微信的地位,<del>加上近些年来linux桌面版的流行</del>,腾讯便可以为了未来多做点闲事了(<strong>当年OICQ也就是闲事闲成了巨头QQ的</strong>)</p><p>所以选了一个好日子,<code>10.24程序员节</code>更新了,现在是QQ·linux2.0</p><p>总的来说,一举三得</p><ul><li>庆祝了节日</li><li>为广大linux平台的用户(一般是程序员)提供了一丝快乐</li><li>借势营销了一波(不过我原因为你免费推销,因为这是一种情怀)</li></ul><h1 id="开箱体验"><a href="#开箱体验" class="headerlink" title="开箱体验"></a>开箱体验</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>直接到<a href="https://im.qq.com/linuxqq/download.html" target="_blank" rel="noopener">QQ·linux官网下载</a><br>里面有详细的说明</p><p>本人是debian/Ubuntu/Deepin用户,所以直接下载了x64的deb包,然后点击安装就可以了,挺方便的</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="先说缺点"><a href="#先说缺点" class="headerlink" title="先说缺点"></a>先说缺点</h3><ul><li>消息无法免打扰，忽略了全部消息还是会有头像闪烁</li><li>截图快捷键被系统占用了</li></ul><h3 id="再说好听的"><a href="#再说好听的" class="headerlink" title="再说好听的"></a>再说好听的</h3><ol><li>作为10年前的应用在昨天1024程序员节更新,已经算是最大的敬意了</li><li>它的消息传播的核心功能还是可以的,还可以截图,还可以搜索联系人,真的很棒</li><li>别人的匿名不会失效</li><li>登录采用的是扫码登录,还挺先进的感觉<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/qq/%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%2C%E8%BF%98%E6%8C%BA%E5%85%88%E8%BF%9B_20191025122159.png" alt="扫码登录"></li></ol><h1 id="最后感谢"><a href="#最后感谢" class="headerlink" title="最后感谢"></a>最后感谢</h1><blockquote><p>感谢腾讯的又一次非商业而是为了美好的活动(第一次我觉得是OICQ)</p></blockquote><h1 id="视频链接"><a href="#视频链接" class="headerlink" title="视频链接"></a>视频链接</h1><h2 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/s0EDW8hzFh0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="Bilibili"><a href="#Bilibili" class="headerlink" title="Bilibili"></a>Bilibili</h2><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=73341996&cid=125461394&page=1" frameborder="0" allow="accelerometer;autoplay; encrypted-media;gyroscope; picture-in-picture" allowfullscreen></iframe></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>总有一些事情值得</category>
      </categories>
      <tags>
        <tag>瞎折腾</tag>
        <tag>QQ·linux</tag>
      </tags>
  </entry>
  <entry>
    <title>减小vscode-cpptools/ipch的内存占用</title>
    <url>/%E5%87%8F%E5%B0%8Fvscode-cpptools-ipch%E7%9A%84%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>前天在别的系统访问deepin的<code>/home</code>目录的时候,我发现<code>~/vscode-cpptools/ipch</code>竟然有5个G的大小,然后我就很好奇这是啥,然后发现是为了加速cpp编译的预编译文件,但是我感觉这个占用过多了,而且我现在一般不写大型的cpp项目,而只是用cpp写单个的算法题的代码,所以预编译头文件对于以前的cpp文件(AC掉的算法题)意义不大,只对当下文件有一点点意义,所以我就可以把这个默认的缺省5G大小改成512MB,说干就干</p><h1 id="干"><a href="#干" class="headerlink" title="干"></a>干</h1><ol><li>Google搜索vscode-cpptools/ipch找到如下图东西,也可以去直接去<a href="https://s0code0visualstudio0com.icopy.site/docs/cpp/faq-cpp" target="_blank" rel="noopener">我找到的这个网址</a>看(Ctrl+F搜索<code>.vscode</code>更快找到)</li><li>去VScode菜单栏<code>文件-&gt;首选项-&gt;设置</code>,然后像下图一样搜索<code>C_Cpp.intelliSenseCacheSize</code>,修改默认的5120为512<ol><li>也可以直接进入配置文件添加一行<code>&quot;C_Cpp.intelliSenseCacheSize&quot;: 512,</code>(当然上面方法操作的话,此行会自动添加)</li></ol></li></ol><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E8%BD%AF%E4%BB%B6/VScode/vscode-cpptools-ipch.png" alt></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>编辑器</category>
      </categories>
      <tags>
        <tag>瞎折腾</tag>
        <tag>编辑器</tag>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title>deepin重装系统后重建-deepin更新导致lightdm无法启动而无法开机的解决方案</title>
    <url>/deepin%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E9%87%8D%E5%BB%BA-%E8%A7%A3%E5%86%B3deepin%E6%9B%B4%E6%96%B0%E5%AF%BC%E8%87%B4lightdm%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%80%8C%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>以前使用deepin的系统更新的那一项,一般都是没有用的,然后2019年10月21日中午偶尔发现deepin更新竟然成功了(一般我去尝试更新都是没用的)!然后就更新了,结果开机卡logo,F2查看发现lightdm无法启动,然后网上尝试各种方法整整7小时,无果,然后就有了这篇文章</p><h1 id="重装"><a href="#重装" class="headerlink" title="重装"></a>重装</h1><h2 id="制作U盘启动"><a href="#制作U盘启动" class="headerlink" title="制作U盘启动"></a>制作U盘启动</h2><p>(<strong>其中不用再压缩空间了,安装时的高级分区选择图片也看下面我给出的</strong>)见文章<a href="https://www.wolfdan.cn/%E5%B0%86Deepin-linux%E8%A3%85%E8%BF%9B%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E5%88%B0%E4%BB%BB%E4%BD%95%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91%E4%B8%8A%E4%BD%BF%E7%94%A8/">将Deepin-linux装进移动硬盘到任何其他电脑上使用</a></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/Deepin/Deepin%E5%88%86%E5%8C%BA%E8%AE%BE%E7%BD%AE.png" alt="分区选择图"></p><h2 id="检测有哪些东西没了"><a href="#检测有哪些东西没了" class="headerlink" title="检测有哪些东西没了"></a>检测有哪些东西没了</h2><p>检测发现很多在家目录的文件的都是在的,很多下载过的应用的配置文件也都是在的(因为配置文件存在/home目录下),所以还是很好</p><p>主要没了的是==&gt;</p><ol><li>软件,很多安装过的软件会被清空,之间内核升级到5.01的版本也没了(deepin15.11默认内核是4.15).</li><li>服务,比如科学等服务</li></ol><h1 id="重建"><a href="#重建" class="headerlink" title="重建"></a>重建</h1><h2 id="登录deepin账号-同步一些配置软件"><a href="#登录deepin账号-同步一些配置软件" class="headerlink" title="登录deepin账号,同步一些配置软件"></a>登录deepin账号,同步一些配置软件</h2><h2 id="安装编辑器—Sublime-VScode"><a href="#安装编辑器—Sublime-VScode" class="headerlink" title="安装编辑器—Sublime,VScode"></a>安装编辑器—Sublime,VScode</h2><h2 id="换源-并更新一下apt"><a href="#换源-并更新一下apt" class="headerlink" title="换源,并更新一下apt"></a>换源,并更新一下apt</h2><p>这一步很重要,决定了后面很多操作的速度(主要是系统官方源deepin.com获取速度有点慢,科学之后可以变快)<br><strong>这一步可能要花很久不要急,这一步的过程中也可以操作下面的其他步骤</strong></p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>apt update是源获取对接,然后 apt upgrade 是源中的软件升级<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /etc/apt/</span><br><span class="line">sudo vim sources.list</span><br><span class="line"></span><br><span class="line"># 深度</span><br><span class="line">deb [by-hash=force] http://packages.deepin.com/deepin lion main contrib non-free</span><br><span class="line">deb-src http://packages.deepin.com/deepin lion main contrib non-free</span><br><span class="line"># 阿里</span><br><span class="line">deb [by-hash=force] http://mirrors.aliyun.com/deepin lion main contrib non-free</span><br><span class="line">deb-src http://mirrors.aliyun.com/deepin lion main contrib non-free</span><br><span class="line"># 网易</span><br><span class="line">deb [by-hash=force] http://mirrors.163.com/deepin lion main contrib non-free</span><br><span class="line">deb-src http://mirrors.163.com/deepin lion main contrib non-free</span><br><span class="line"> # 中国科学技术大学</span><br><span class="line">#deb [by-hash=force] http://mirrors.ustc.edu.cn/deepin lion main contrib non-free</span><br><span class="line">#deb-src http://mirrors.ustc.edu.cn/deepin lion main contrib non-free</span><br><span class="line"># 北京理工大学</span><br><span class="line">deb [by-hash=force] http://mirror.bit.edu.cn/deepin lion main contrib non-free</span><br><span class="line">deb-src http://mirror.bit.edu.cn/deepin lion main contrib non-free</span><br><span class="line"># 浙江大学</span><br><span class="line">deb [by-hash=force] http://mirrors.zju.edu.cn/deepin lion main contrib non-free</span><br><span class="line">deb-src http://mirrors.zju.edu.cn/deepin lion main contrib non-free</span><br><span class="line"># 上海交通大学</span><br><span class="line">deb [by-hash=force] http://ftp.sjtu.edu.cn/deepin lion main contrib non-free</span><br><span class="line">deb-src http://ftp.sjtu.edu.cn/deepin lion main contrib non-free</span><br><span class="line"># 重庆大学</span><br><span class="line">deb [by-hash=force] http://mirrors.cqu.edu.cn/deepin lion main contrib non-free</span><br><span class="line">deb-src http://mirrors.cqu.edu.cn/deepin lion main contrib non-free</span><br><span class="line"># 北京交通大学</span><br><span class="line">deb [by-hash=force] https://mirror.bjtu.edu.cn/deepin lion main contrib non-free</span><br><span class="line">deb-src https://mirror.bjtu.edu.cn/deepin lion main contrib non-free</span><br><span class="line"># 清华大学</span><br><span class="line">#deb [by-hash=force] https://mirrors.tuna.tsinghua.edu.cn/deepin lion main contrib non-free</span><br><span class="line">#deb-src https://mirrors.tuna.tsinghua.edu.cn/deepin lion main contrib non-free</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt autoremove</span><br><span class="line">sudo apt clean</span><br><span class="line">sudo apt autoclean</span><br></pre></td></tr></table></figure><p></p><h2 id="配置科学服务"><a href="#配置科学服务" class="headerlink" title="配置科学服务"></a>配置科学服务</h2><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p><code>sudo apt install git</code></p><h2 id="安装g-gdb"><a href="#安装g-gdb" class="headerlink" title="安装g++,gdb"></a>安装g++,gdb</h2><p><code>aptitude install build-essential</code><br><code>sudo aptitude install gdb</code><br>不知道为什么我重装系统,从原来的g++ 7变成了现在重装后的g++ 6…</p><h2 id="标题栏高度"><a href="#标题栏高度" class="headerlink" title="标题栏高度"></a>标题栏高度</h2><p>这个得等到重启之后才会生效<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.local/share/deepin/themes/deepin/light/</span><br><span class="line">mkdir -p ~/.local/share/deepin/themes/deepin/dark/</span><br><span class="line">cd ~/.local/share/deepin/themes/deepin/</span><br><span class="line">vim light/titlebar.ini</span><br><span class="line">[Active]</span><br><span class="line">height=25</span><br><span class="line">[Inactive]</span><br><span class="line">height=25</span><br><span class="line">cp light/titlebar.ini dark/titlebar.ini</span><br></pre></td></tr></table></figure><p></p><h2 id="安装zsh并配置"><a href="#安装zsh并配置" class="headerlink" title="安装zsh并配置"></a>安装zsh并配置</h2><p><code>sudo apt install zsh</code></p><p>进<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh配置项目使用命令行安装</a></p><p>由于我<code>/home</code>还在,所以它会提示我<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You already have Oh My Zsh installed.</span><br><span class="line">You&apos;ll need to remove &apos;/home/wolfdan/.oh-my-zsh&apos; if you want to reinstall.</span><br></pre></td></tr></table></figure><p></p><p>所以我就暂时<br><code>mv /home/wolfdan/.oh-my-zsh /home/wolfdan/.oh-my-zsh-bak</code><br>之后就不用配置了,执行下面操作<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir oh-my-zsh-init-bak</span><br><span class="line">mv .oh-my-zsh oh-my-zsh-init-bak/</span><br><span class="line">mv .oh-my-zsh-bak .oh-my-zsh</span><br><span class="line">zsh</span><br><span class="line">[Oh My Zsh] Would you like to update? [Y/n]: n</span><br></pre></td></tr></table></figure><p></p><p>一定要选no,否则它会变成init的样子…然后只能重新按照上面给的链接的方法进行再一次主题美化配置了</p><h3 id="VScode终端美化"><a href="#VScode终端美化" class="headerlink" title="VScode终端美化"></a>VScode终端美化</h3><h4 id="安装power-line字体-因为重装时没有备份-usr文件"><a href="#安装power-line字体-因为重装时没有备份-usr文件" class="headerlink" title="安装power_line字体(因为重装时没有备份/usr文件)"></a>安装power_line字体(因为重装时没有备份/usr文件)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/share/fonts/truetype/</span><br><span class="line">sudo git clone https://github.com/abertsch/Menlo-for-Powerline.git</span><br></pre></td></tr></table></figure><p>重整字形<br><code>sudo fc-cache -f -v</code></p><h4 id="改变用户设置"><a href="#改变用户设置" class="headerlink" title="改变用户设置"></a>改变用户设置</h4><p>在用户设置中添加如下片段<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;terminal.integrated.shell.linux&quot;: &quot;/usr/bin/zsh&quot;,</span><br><span class="line">&quot;terminal.integrated.fontFamily&quot;: &quot;Menlo for Powerline&quot;,</span><br></pre></td></tr></table></figure><p></p><h2 id="debian-ubuntu-deepin安装nodejs-node-npm-后面hexo站点配置也要用"><a href="#debian-ubuntu-deepin安装nodejs-node-npm-后面hexo站点配置也要用" class="headerlink" title="debian/ubuntu/deepin安装nodejs,node,npm(后面hexo站点配置也要用)"></a>debian/ubuntu/deepin安装nodejs,node,npm(后面hexo站点配置也要用)</h2><p>安装nodejs<br><code>sudo apt-get install -y nodejs</code><br>然后安装npm<br><code>sudo apt-get install -y npm</code><br>报错如下<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正在读取软件包列表... 完成</span><br><span class="line">正在分析软件包的依赖关系树</span><br><span class="line">正在读取状态信息... 完成</span><br><span class="line">没有可用的软件包 npm，但是它被其它的软件包引用了。</span><br><span class="line">这可能意味着这个缺失的软件包可能已被废弃，</span><br><span class="line">或者只能在其他发布源中找到</span><br><span class="line">然而下列软件包会取代它：</span><br><span class="line">  node nodejs-bin</span><br><span class="line"></span><br><span class="line">E: 软件包 npm 没有可安装候选</span><br></pre></td></tr></table></figure><p></p><p>也就是说可以直接安装node就行<br>所以我们安装node<br><code>sudo apt-get install -y node</code><br>测试<br><code>node -v</code><br><code>npm -v</code></p><h2 id="Hexo博客的一些配置"><a href="#Hexo博客的一些配置" class="headerlink" title="Hexo博客的一些配置"></a>Hexo博客的一些配置</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p><strong>sudo npm install -g hexo-cli</strong></p><h3 id="在blog的根目录安装依赖"><a href="#在blog的根目录安装依赖" class="headerlink" title="在blog的根目录安装依赖"></a>在blog的根目录安装依赖</h3><blockquote><p>注意:blog的根目录就是你之前<code>hexo init &lt;folder&gt;</code>的这个folder<br><code>npm i</code></p></blockquote><p>然后测试<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy</code></p><h2 id="使用git同步自己的所有git仓库"><a href="#使用git同步自己的所有git仓库" class="headerlink" title="使用git同步自己的所有git仓库"></a>使用git同步自己的所有git仓库</h2><p><code>/home</code>目录还在,所以我只要直接执行原来的git命令就行了,不用重新配置仓库,还是挺好的</p><h2 id="双显卡的朋友需要操作"><a href="#双显卡的朋友需要操作" class="headerlink" title="双显卡的朋友需要操作"></a>双显卡的朋友需要操作</h2><p>以下有三种方案可供选择,哪种有效用哪种</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>这个一般配合软件商店的显卡设置为Intel默认驱动使用(因为我使用开源驱动是不行的)<br><a href="https://www.wolfdan.cn/Deepin%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%85%B3%E6%9C%BA%E9%87%8D%E5%90%AF/">更改grub</a></p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>使用软件商店的显卡设置为大黄蜂方案,如果你能成功的话就ok(我以前不行,但是这次重装然后更新了源之后竟然又可以了,我惊了,这难道就是传说中的祸兮,福之所倚?)</p><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>可能你的显卡很nb,比较新,最近刚出的,那么得自己去<a href="https://www.geforce.cn/drivers" target="_blank" rel="noopener">英伟达官网下载对应驱动</a></p><p>然后可以参考<a href="https://blog.csdn.net/ysy950803/article/details/101990720" target="_blank" rel="noopener">这位大哥的方法</a></p><h2 id="安装conky和conky-manager"><a href="#安装conky和conky-manager" class="headerlink" title="安装conky和conky-manager"></a>安装conky和conky-manager</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 conky</span></span><br><span class="line">sudo apt install conky-all</span><br><span class="line"><span class="comment"># 安装 conky-manager</span></span><br><span class="line">wget --no-check-certificate https://github.com/teejee2008/conky-manager/releases/download/v2.4/conky-manager-v2.4-amd64.run</span><br><span class="line">chmod +x conky-manager-v2.4-amd64.run</span><br><span class="line">sudo ./conky-manager-v2.4-amd64.run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装温度检测服务</span></span><br><span class="line">sudo apt-get install lm-sensors</span><br></pre></td></tr></table></figure><p>如果conky-manager安装遇到问题(有科学机器的话一般没问题)，可以去<a href="https://github.com/teejee2008/conky-manager/releases手动下载系统对应的安装文件进行安装" target="_blank" rel="noopener">https://github.com/teejee2008/conky-manager/releases手动下载系统对应的安装文件进行安装</a></p><h3 id="附送我的配置"><a href="#附送我的配置" class="headerlink" title="附送我的配置"></a>附送我的配置</h3><p><strong>其实里面的配置挺通俗易懂的,自己可以做适当调整</strong><br>也可以<code>man conky</code>或者去google配置项<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default_color white</span><br><span class="line">double_buffer yes</span><br><span class="line">no_buffers yes</span><br><span class="line">update_interval 1.0</span><br><span class="line">total_run_times 0</span><br><span class="line">own_window yes</span><br><span class="line">own_window_type normal</span><br><span class="line">own_window_transparent yes</span><br><span class="line">own_window_hints undecorated,below,sticky,skip_taskbar,skip_pager</span><br><span class="line"> </span><br><span class="line">own_window_colour 000000</span><br><span class="line">own_window_argb_visual yes</span><br><span class="line">own_window_argb_value 0</span><br><span class="line"> </span><br><span class="line">double_buffer yes</span><br><span class="line">draw_shades yes</span><br><span class="line">draw_outline no</span><br><span class="line">draw_borders no</span><br><span class="line">draw_graph_borders n0</span><br><span class="line">minimum_size 300 1</span><br><span class="line">maximum_width 406</span><br><span class="line"># default_color ffffff</span><br><span class="line">default_color green</span><br><span class="line">default_shade_color 000000</span><br><span class="line">default_outline_color 000000</span><br><span class="line">alignment bottom_right</span><br><span class="line">#alignment top_right</span><br><span class="line">#alignment top_left</span><br><span class="line">gap_x 6</span><br><span class="line">gap_y 5</span><br><span class="line">cpu_avg_samples 2</span><br><span class="line">override_utf8_locale no</span><br><span class="line">uppercase no # set to yes if you want all text to be in uppercase</span><br><span class="line">use_spacer no</span><br><span class="line">use_xft yes</span><br><span class="line">xftfont WenQuanYi Zen Hei:pixelsize=12</span><br><span class="line">override_utf8_locale yes</span><br><span class="line">use_spacer no</span><br><span class="line">minimum_size 300 1</span><br><span class="line">TEXT</span><br><span class="line">$&#123;font LCD:style=Bold:pixelsize=40&#125;$&#123;alignc&#125;$&#123;time %I:%M:%S&#125;</span><br><span class="line">$&#123;font LCD:style=Bold:pixelsize=20&#125;$&#123;time %Y年%b%d日 星期%a&#125;$&#123;alignc&#125;</span><br><span class="line">$&#123;font WenQuanYi Zen Hei:pixelsize=14&#125;</span><br><span class="line"> </span><br><span class="line">$&#123;color #98c2c7&#125;主人:  $&#123;color&#125;$alignr 小狼永不投降</span><br><span class="line"># $&#123;color #98c2c7&#125;邮箱:  $&#123;color&#125;$alignr wolfdan666666@gmail.com</span><br><span class="line"># $&#123;color #98c2c7&#125;内核:  $&#123;color&#125;$alignr$kernel</span><br><span class="line">$&#123;color #98c2c7&#125;已开机: $&#123;color&#125;$alignr$uptime</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">$&#123;color #98c2c7&#125;CPU使用率: $&#123;color&#125;$cpu%</span><br><span class="line"> </span><br><span class="line">$cpubar</span><br><span class="line"> </span><br><span class="line"> CPU1 温度:  $alignr$&#123;exec sensors | grep &apos;Core 0&apos; | cut -c17-25&#125;</span><br><span class="line"> CPU2 温度: $alignr$&#123;exec sensors | grep &apos;Core 1&apos; | cut -c17-25&#125;</span><br><span class="line"> CPU3 温度: $alignr$&#123;exec sensors | grep &apos;Core 2&apos; | cut -c17-25&#125;</span><br><span class="line"> CPU4 温度: $alignr$&#123;exec sensors | grep &apos;Core 3&apos; | cut -c17-25&#125;</span><br><span class="line"> </span><br><span class="line"># $&#123;color #98c2c7&#125;CPU占用:$&#123;color&#125;</span><br><span class="line"> </span><br><span class="line">$&#123;top name 1&#125; $&#123;alignr&#125;$&#123;top cpu 1&#125; </span><br><span class="line">$&#123;top name 2&#125; $&#123;alignr&#125;$&#123;top cpu 2&#125; </span><br><span class="line"># $&#123;top name 3&#125; $&#123;alignr&#125;$&#123;top cpu 3&#125; </span><br><span class="line"># $&#123;top name 4&#125; $&#123;alignr&#125;$&#123;top cpu 4&#125; </span><br><span class="line"># $&#123;top name 5&#125; $&#123;alignr&#125;$&#123;top cpu 5&#125; </span><br><span class="line"># $&#123;top name 6&#125; $&#123;alignr&#125;$&#123;top cpu 6&#125; </span><br><span class="line"> </span><br><span class="line">$&#123;color #98c2c7&#125;物理内存：$&#123;color&#125;$&#123;alignr&#125;$mem / $memmax</span><br><span class="line"> </span><br><span class="line">$&#123;membar&#125;</span><br><span class="line"> </span><br><span class="line">#$&#123;color #98c2c7&#125;根分区: $&#123;color&#125;$&#123;alignr&#125;$&#123;fs_free /&#125; / $&#123;fs_size /&#125;</span><br><span class="line"> </span><br><span class="line">#$&#123;fs_bar 4 /&#125;</span><br><span class="line"> </span><br><span class="line">$&#123;color #98c2c7&#125;Home分区: $&#123;color&#125;$&#123;alignr&#125;$&#123;fs_free /home&#125; / $&#123;fs_size /home&#125;</span><br><span class="line"> </span><br><span class="line">$&#123;fs_bar 4 /home&#125;</span><br><span class="line"> </span><br><span class="line">#$&#123;color #98c2c7&#125;网络使用:$&#123;color&#125;</span><br><span class="line"> </span><br><span class="line">#下载速度:$alignr$&#123;downspeed enp3s0f1&#125; k/s</span><br><span class="line">#上传速度:$alignr$&#123;upspeed enp3s0f1&#125; k/s</span><br><span class="line">#$&#123;downspeedgraph enp3s0f1 324D23 77B753&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="启示"><a href="#启示" class="headerlink" title="启示"></a>启示</h1><ol><li>一定还是要备份一下<code>/</code>目录下的一些服务和一些软件的配置!否则后期重建还是比较麻烦的…傻逼了自己</li><li>重装系统后记得先更新apt</li><li>很多的配置文件都是在<code>/home</code>下面,所以一些软件的更新什么的,都只需要下载好压缩包,用压缩包中文件替换掉<code>/</code>目录下的原来的软件安装位置的文件就行了</li></ol><h2 id="最最重要的启示"><a href="#最最重要的启示" class="headerlink" title="最最重要的启示"></a>最最重要的启示</h2><p><strong>没有把握的折腾就不要折腾,实在要折腾请先备份,对于最新鲜的事物一定要保持警觉,就算它是权威(因为deepin这次重装也是唯一一次重装就是安装系统推送的更新给翻车的!)</strong></p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><ul><li>不要乱搞,系统升级也要谨慎</li><li><strong>保留了<code>/home</code>还是很舒服的,至少自己的git安装好之后,又能够立马和云端同步了,无需额外的重新配置,真好</strong></li></ul><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li>电脑卡boot进不去的时候不用使用强制关机了<ul><li>可以尝试<code>Ctrl+Alt+F2</code>或者<code>Ctrl+Alt+F3</code>,<code>Ctrl+Alt+F4</code>看下是否能够进入tty2,3,4什么的</li><li>也可以看看<code>F2</code>看到底哪一步卡住了</li><li>最重要的是可以不用强制按电源8秒关机,而是<strong>可以直接按住<code>Ctrl+Alt+Del</code>进行重启</strong></li></ul></li></ul><h1 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h1><p><a href="https://liuzy88.com/topic/257f0c21810f4a5d9aae737c4362bef6.html" target="_blank" rel="noopener">liuzy</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>deepin</category>
      </categories>
      <tags>
        <tag>瞎折腾</tag>
        <tag>deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>fatal: in unpopulated submodule XXX 以及 hexo themes 下一个文件夹无法git push解决方案</title>
    <url>/fatal-in-unpopulated-submodule-XXX-hexo-themes-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95git-push/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="源"><a href="#源" class="headerlink" title="源"></a>源</h1><p>我是喜欢使用云端私有库备份文件让自己实现多设备写hexo的,不太会的朋友可以看借鉴这篇文章在自己的电脑搭建环境<a href="https://www.wolfdan.cn/%E5%9C%A8could-studio%E5%90%8C%E6%AD%A5%E5%86%99Hexo/">在另一个终端上同步写Hexo</a></p><p>然后自己有一天从next改用了<a href="https://github.com/leafjame/hexo-theme-next5-leaf" target="_blank" rel="noopener">北宸哥的开源魔改的next-leaf</a>便有了此文</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p><a href="https://github.com/leafjame/hexo-theme-next5-leaf/issues/3" target="_blank" rel="noopener">过程</a></p><h1 id="怎么解决"><a href="#怎么解决" class="headerlink" title="怎么解决"></a>怎么解决</h1><p>跑到themes目录下,然后执行以下操作<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm -rf --cached leaf</span><br><span class="line">git add leaf/*</span><br></pre></td></tr></table></figure><p></p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>因为leaf是从另一个第三方的仓库克隆的，在执行git add的时候”fatal: in unpopulated submodule ***“ 错误</p><p>所以我们删除掉这个库文件的cached就行了</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/zixiao217/article/details/86693854" target="_blank" rel="noopener">git add出现 “fatal: in unpopulated submodule XXX” 错误</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>瞎折腾</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第26周[26/100]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC26%E5%91%A8-26-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://www.wolfdan.cn/codeforces593B-Alice-and-the-List-of-Presents-math-%E7%BB%84%E5%90%88-%E6%80%9D%E7%BB%B4-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-36-100/">codeforces593B.Alice and the List of Presents<em>math</em>组合<em>思维</em>算法日常[36/100]</a></p><p><a href="https://www.wolfdan.cn/codeforces592-1244E-Minimizing-Difference-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-35-100/">codeforces592<em>1244E Minimizing Difference</em>算法日常[35/100]</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/@angrytherapist/finding-the-perfect-partner-vs-finding-the-perfect-in-your-partner-cf953a09f07a" target="_blank" rel="noopener">Finding the perfect partner vs. Finding the perfect in your partner</a><br>没有完美的伴侣，只有合理的目光</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.imooc.com/article/40820" target="_blank" rel="noopener">教你如何解析未备案的域名到国内服务器—不行的—直接看评论!!!</a><br>Google和火狐不会报错说是你没备案，然后我折腾了6小时，后面无意在知乎发现未备案不行…</p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/Deepin%E6%B7%BB%E5%8A%A0%E8%AE%BE%E7%BD%AEqq%E5%92%8C%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%88%AA%E5%9B%BE%E7%AD%89%E5%BF%AB%E6%8D%B7%E9%94%AE/">Deepin添加设置qq和微信的截图等快捷键</a></p><p><a href="https://www.wolfdan.cn/fatal-in-unpopulated-submodule-XXX-hexo-themes-下一个文件夹无法git-push/">fatal: in unpopulated submodule XXX &amp;&amp; hexo themes 下一个文件夹无法git push</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces593B.Alice and the List of Presents_math_组合_思维_算法日常[36/100]</title>
    <url>/codeforces593B-Alice-and-the-List-of-Presents-math-%E7%BB%84%E5%90%88-%E6%80%9D%E7%BB%B4-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-36-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1236/problem/B" target="_blank" rel="noopener">codeforces593B.Alice and the List of Presents</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><ul><li>n种礼物,每种无限个</li><li>然后m个朋友对应m个盒子</li><li>每个盒子中的每种礼物最多一个</li><li>每种礼物都应该被放置出去至少一个</li><li>求放置的方法数量</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li>考虑每种礼物(共有n种)的放置方式，有m个盒子，tp = C(n 1)+C(n 2)+…+C(n n) = 2^n - 1</li><li>然后总共有n种，所以选择n次，也就是tp^n</li></ul><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(int i = int(a); i &lt;= int(b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, b, a) for(int i = int(b); i &gt;= int(a); --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;c=getchar();&#125;<span class="keyword">return</span> x*f;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;ll ans=<span class="number">1</span>%mod;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=ans*a%mod;a=a*a%mod;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;qpow(qpow(<span class="number">2</span>,m)<span class="number">-1</span>,n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法日常</category>
      </categories>
      <tags>
        <tag>math</tag>
        <tag>组合</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces592_1244E Minimizing Difference_算法日常[35/100]</title>
    <url>/codeforces592-1244E-Minimizing-Difference-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-35-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1244/problem/E" target="_blank" rel="noopener">codeforces592_1244E Minimizing Difference</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li>先sort</li><li>判断最大差距和是否在k次内,是则答案为0(if you can perform the aforementioned operation no more than k times.)(<del>沙雕我看题不仔细以为必须处理k次</del>)</li><li>通过不断地在左右两边已经遍历到的部分的一整块依次进行加减操作(左边增加,右边减少),然后达到最大最小值靠近的目的</li></ul><p>我一开始写的还分权值操作,但是发现只要: <strong>让左右总是保持着相同的宽度权重,然后左右之间能均摊到的剩下的k的高度是一样的!!!所以不管k还够不够分,把k加到哪一边都是一样的</strong></p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><p>我的代码太丑了,于是就放大佬的代码吧<br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// By LittleBeetle, contest: Codeforces Round #592 (Div. 2), problem: (E) Minimizing Difference, Accepted, #, hack it!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000020</span>;</span><br><span class="line"><span class="keyword">int</span> n,i,j,a[N],mid,opt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k,s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">	sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">	mid=n+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mid;i++)</span><br><span class="line">		s+=a[mid]-a[i];</span><br><span class="line">	<span class="keyword">for</span>(;i&lt;=n;i++)</span><br><span class="line">		s+=a[i]-a[mid];</span><br><span class="line">	<span class="keyword">if</span>(s&lt;=k)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	i=<span class="number">1</span>;j=n;</span><br><span class="line">	opt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i+<span class="number">1</span>&lt;j)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">1l</span>l*(a[i+<span class="number">1</span>]-a[i])*i&lt;=k)&#123;</span><br><span class="line">			k-=<span class="number">1l</span>l*(a[i+<span class="number">1</span>]-a[i])*i;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			a[i]+=k/i;</span><br><span class="line">			opt=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">1l</span>l*(a[j]-a[j<span class="number">-1</span>])*(n-j+<span class="number">1</span>)&lt;=k)&#123;</span><br><span class="line">			k-=<span class="number">1l</span>l*(a[j]-a[j<span class="number">-1</span>])*(n-j+<span class="number">1</span>);</span><br><span class="line">			j--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			a[j]-=k/(n-j+<span class="number">1</span>);</span><br><span class="line">			opt=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i+<span class="number">1</span>==j&amp;&amp;opt==<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,a[j]-a[i]-k/i);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,a[j]-a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	init();</span><br><span class="line">	work();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>名誉有如江河，它所漂起的常是轻浮之物，而不是确有真份量的实体</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法日常</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>思维题</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin添加设置qq和微信的截图等快捷键</title>
    <url>/Deepin%E6%B7%BB%E5%8A%A0%E8%AE%BE%E7%BD%AEqq%E5%92%8C%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%88%AA%E5%9B%BE%E7%AD%89%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="观察"><a href="#观察" class="headerlink" title="观察"></a>观察</h1><p><strong>注:可以直接看附赠</strong><br>首先我发现系统已经设置了qq的截图快捷键,我很惊讶,然后就去学习了一下</p><p>发现qq使用了一个运行脚本<code>/opt/deepinwine/tools/add_hotkeys</code>以及带了一个参数<code>a</code></p><p>即 <code>/opt/deepinwine/tools/add_hotkeys a</code></p><p><strong>研究发现这样子就绑定了qq快捷键设置中<code>Ctrl+Alt+A</code></strong></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/Deepin/%E5%BF%AB%E6%8D%B7%E9%94%AE/%E5%AD%A6%E4%B9%A0%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6%E7%9A%84qq%E5%BF%AB%E9%94%AE.png" alt="deepin中qq截图"></p><h1 id="设置微信的"><a href="#设置微信的" class="headerlink" title="设置微信的"></a>设置微信的</h1><p>所以我们如法炮制,使用<br><code>/opt/deepinwine/tools/add_hotkeys</code>　参数　<code>d WeChat</code></p><p>即命令为<code>/opt/deepinwine/tools/add_hotkeys d WeChat</code></p><p>最终得出下面两种配方</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/Deepin/%E5%BF%AB%E6%8D%B7%E9%94%AE/%E5%BE%AE%E4%BF%A1%E8%AE%BE%E7%BD%AE%E6%88%AA%E5%9B%BE%E7%B1%BB%E5%9E%8B%E4%B8%80.png" alt="配方一"></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/Deepin/%E5%BF%AB%E6%8D%B7%E9%94%AE/%E5%BE%AE%E4%BF%A1%E8%AE%BE%E7%BD%AE%E6%88%AA%E5%9B%BE%E7%B1%BB%E5%9E%8B%E4%BA%8C_%E5%85%B3%E9%94%AE%E5%9C%A8%E4%BA%8E%E4%BF%9D%E8%AF%81%E5%91%BD%E4%BB%A4%E7%9A%84%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%E6%AD%A3%E7%A1%AE.png" alt="配方二"></p><h1 id="开心截图吧"><a href="#开心截图吧" class="headerlink" title="开心截图吧"></a>开心截图吧</h1><p>因为Deepin自带的截图是不支持</p><ul><li>双屏截图</li><li>添加文字自动遇到边界自动换行</li></ul><p>甚至还会在添加文字的时候突然卡死,以及丢失文字</p><p>所以有了QQ,微信截图,我们就可以愉快的玩耍了</p><h1 id="附赠自己的最终所有配置"><a href="#附赠自己的最终所有配置" class="headerlink" title="附赠自己的最终所有配置"></a>附赠自己的最终所有配置</h1><h2 id="qq截图"><a href="#qq截图" class="headerlink" title="qq截图"></a>qq截图</h2><p>命令: <code>/opt/deepinwine/tools/add_hotkeys a</code><br>快捷: <code>Alt + A</code></p><p><strong>因为带的参数是a,所以qq中的快捷是<code>Ctrl + Alt +A</code></strong></p><h2 id="qq消息提取"><a href="#qq消息提取" class="headerlink" title="qq消息提取"></a>qq消息提取</h2><p>命令: <code>/opt/deepinwine/tools/add_hotkeys z</code><br>快捷: <code>Ctrl + Alt + Z</code></p><h2 id="微信截图"><a href="#微信截图" class="headerlink" title="微信截图"></a>微信截图</h2><p>命令: <code>/opt/deepinwine/tools/add_hotkeys d WeChat</code><br>快捷: <code>Ctrl + Alt + S</code></p><p><strong>因为带的参数是w WeChat,所以qq中的快捷是<code>Ctrl + Alt + D</code></strong></p><h2 id="微信消息提取"><a href="#微信消息提取" class="headerlink" title="微信消息提取"></a>微信消息提取</h2><p>命令: <code>/opt/deepinwine/tools/add_hotkeys w WeChat</code><br>快捷: <code>Ctrl + Alt + W</code></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=154921" target="_blank" rel="noopener">https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=154921</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>Deepin</tag>
        <tag>Linux</tag>
        <tag>瞎折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第25周[25/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC25%E5%91%A8-25-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.10" target="_blank" rel="noopener">刷刷刷 —-&gt; 冲冲冲</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://onezero.medium.com/china-is-forcing-tech-companies-to-choose-between-profits-and-free-speech-aed1f4db3a4" target="_blank" rel="noopener">China Is Forcing Tech Companies to Choose Between Profits and Free Speech</a><br>在我的地盘，你可以赚钱，但你不能侵犯我的底线，否则，我们不欢迎你</p><p>在什么山上唱什么山</p><p>随机应变，见人说人话，见鬼说鬼话</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/lewky_liu/article/details/82432003" target="_blank" rel="noopener">使用hexo-neat插件压缩页面静态资源</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/codeforces1207G-Indie-Album-AC%E8%87%AA%E5%8A%A8%E6%9C%BA-DFS-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-32-100/">codeforces1207G Indie Album AC自动机-DFS-树状数组 算法日常[32/100]</a></p><p><a href="https://www.wolfdan.cn/CF1082B-Vova-and-Trophies-%E8%B4%AA%E5%BF%83-%E7%8A%B6%E6%80%81%E6%9C%BA%E8%A7%A3%E9%A2%98%E6%B3%95-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-33-100/">CF1082B. Vova and Trophies 贪心 状态机解题法 算法日常[33/100]</a></p><p><a href="https://www.wolfdan.cn/codeforces1101B-Accordion-%E8%B4%AA%E5%BF%83-%E7%8A%B6%E6%80%81%E6%9C%BA%E8%A7%A3%E9%A2%98%E6%B3%95-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-34-100/">codeforces1101B. Accordion 贪心 状态机解题法 算法日常[34/100]</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces1101B. Accordion 贪心 状态机解题法 算法日常[34/100]</title>
    <url>/codeforces1101B-Accordion-%E8%B4%AA%E5%BF%83-%E7%8A%B6%E6%80%81%E6%9C%BA%E8%A7%A3%E9%A2%98%E6%B3%95-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-34-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/problemset/problem/1101/B" target="_blank" rel="noopener">codeforces1101B. Accordion</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>删除一些字符,从而找出<code>[::]</code>这种结构,<code>::</code>的两点中可以有<code>|</code>,而且要最多的这样的<code>|</code>,以便构成最长的满足条件的串</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="通法-状态机解题法"><a href="#通法-状态机解题法" class="headerlink" title="通法,状态机解题法"></a>通法,状态机解题法</h2><ul><li>设计状态机(详见下面的代码和解释)</li><li>找到了<code>[:</code>之后开始记录<code>|</code>状态</li><li>让每次成功匹配第二个冒号的时候更新<code>|</code>的个数值<code>precnt = cnt</code></li><li>让每次成功匹配整个串的时候维护答案<code>ans = precnt + 4;</code></li></ul><h2 id="tutorial"><a href="#tutorial" class="headerlink" title="tutorial"></a>tutorial</h2><p><a href="https://codeforces.com/blog/entry/64483" target="_blank" rel="noopener">tutorial比较巧妙,一般不易想到</a></p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(int i = int(a); i &lt;= int(b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, b, a) for(int i = int(b); i &gt;= int(a); --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;c=getchar();&#125;<span class="keyword">return</span> x*f;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;ll ans=<span class="number">1</span>%mod;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=ans*a%mod;a=a*a%mod;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[M];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">	<span class="keyword">int</span> state = <span class="number">0</span>,precnt = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">	rep(i,<span class="number">0</span>,<span class="built_in">strlen</span>(s)<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">switch</span>(state)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span> : <span class="keyword">if</span>(s[i]==<span class="keyword">char</span>(<span class="number">91</span>)) state = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span> : <span class="keyword">if</span>(s[i]==<span class="keyword">char</span>(<span class="number">58</span>)) state = <span class="number">2</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">				<span class="keyword">if</span>(s[i] == <span class="keyword">char</span>(<span class="number">124</span>)) cnt++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="keyword">char</span>(<span class="number">58</span>))&#123;</span><br><span class="line">					precnt = cnt;</span><br><span class="line">					state = <span class="number">3</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line">				<span class="keyword">if</span>(s[i] == <span class="keyword">char</span>(<span class="number">124</span>)) cnt++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="keyword">char</span>(<span class="number">58</span>))&#123;</span><br><span class="line">					precnt = cnt;</span><br><span class="line">					state = <span class="number">3</span>;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="keyword">char</span>(<span class="number">93</span>))&#123;</span><br><span class="line">					ans = precnt + <span class="number">4</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法日常</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>状态机解题法</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1082B. Vova and Trophies 贪心 状态机解题法 算法日常[33/100]</title>
    <url>/CF1082B-Vova-and-Trophies-%E8%B4%AA%E5%BF%83-%E7%8A%B6%E6%80%81%E6%9C%BA%E8%A7%A3%E9%A2%98%E6%B3%95-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-33-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/problemset/problem/1082/B" target="_blank" rel="noopener">codeforces 1082B. Vova and Trophies</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>互换一次两个奖杯的位置,然后求出最长的连续金杯的个数</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>就定义s1,s2,s3</li><li>s1和s2相隔一个字母,s3是备用字母</li><li>一开始检测s1,然后如果发现s1和s2相隔两个字母,那么就让s3=s1(其实s3只要记录有一个其他地方的G就行,只是为了填个间隔,所以直接让s3.len=1),ans = max(ans,s1.len+1)<code>这里的+1是因为可以移动别的地方的金牌过来</code>,重新检测s1</li><li>如果s1,s2匹配上了,那么先算一次ans = max(ans,(s1+s2+s3).len),如果s3是0,后面检测到G,还要来一次前面的检测…</li><li>如果s2和新s3间隔相差1,然后再检测一遍ans后开始令s1=s2,s2.len=1</li><li>如果相差2,那么就重新找s1</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><p>我们通过状态机的思路来解题(发现真的好用!怪不得很多计算机系统的硬件编程都用了状态机)</p></li><li><p>状态0定义成: 启动</p><ul><li>遇到金,为了防止串结束退出,所以维护一下答案</li></ul></li><li>状态1定义成: 我们正在检测s1(结合后面知道其实有没有s3是在后面考虑了,所以状态1没有分成两种状态) —-&gt; 状态转移:<ul><li>遇到了空格(银),进入状态2</li><li>遇到金,为了防止串结束退出,所以维护一下答案</li></ul></li><li>状态2定义成: 我们遇到了s1+空格(银)的状态 —-&gt; 状态转移:<ul><li>如果遇到第二个0,维护答案,跳到状态6(这个状态一般比较难想到,是wa了几次之后才想到的…)</li><li>如果遇到了G,那么我们进入状态3去检测s2</li><li>遇到金,为了防止串结束退出,所以维护一下答案</li></ul></li><li>状态3定义成: 我们遇到了s1+一个空格(银)+G,正在继续找s2 —-&gt; 状态转移:<ul><li>如果遇到了空格(银),那么我维护答案,跳到状态4检测是否还有空格</li><li>遇到金,为了防止串结束退出,所以维护一下答案</li></ul></li><li>状态4: (s1+空格+s2+空格)可能的找s3并且观望下一个状态 —-&gt; 状态转移:<ul><li>如果s2+空格+G.维护答案,跳到状态3(这里还要维护一些东西,要小心)</li><li>找到了第二个空格,跳到状态5</li></ul></li><li>状态5: 没有s3,然后目前s1+空格+s2+至少两个空格 —-&gt; 状态转移:<ul><li>遇见G,维护答案,跳转状态1</li></ul></li><li>状态6: 前面有仅有一部分s1,后面遇到两个或两个以上空格 —-&gt; 状态转移:<ul><li>如果遇到G,那么ans = max(ans,s1+1),把后面这个移到前面维护一下,s3=1,然后跳转到状态1(这样就保证只有两部分连续G,并且这两部分相隔至少2个空格时能够互相搬运)</li><li>没遇到继续停留在状态6</li></ul></li></ul><p><strong>注意遇到金,一定要维护一下.防止串结束退出</strong></p><h2 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h2><p><a href="https://codeforces.com/blog/entry/63544" target="_blank" rel="noopener">tutorial左右序列前缀和很难想到</a></p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(int i = int(a); i &lt;= int(b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, b, a) for(int i = int(b); i &gt;= int(a); --i)</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;c=getchar();&#125;<span class="keyword">return</span> x*f;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;ll ans=<span class="number">1</span>%mod;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=ans*a%mod;a=a*a%mod;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,s1,s2,s3,ans,state;</span><br><span class="line"><span class="keyword">char</span> s[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	n = rd();</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s); </span><br><span class="line">	rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">switch</span>(state)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span> : </span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">'G'</span>) state = <span class="number">1</span>,s1=<span class="number">1</span>,ans = max(ans,s1+s3);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span> : </span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">'G'</span>) s1++,ans = max(ans,s1+s3);</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'S'</span>) state = <span class="number">2</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span> : </span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">'G'</span>) state=<span class="number">3</span>,s2=<span class="number">1</span>,ans = max(ans,s1+s2+s3);</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					ans = max(ans,s1+s3);</span><br><span class="line">					state = <span class="number">6</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span> : </span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">'G'</span>) s2++,ans = max(ans,s1+s2+s3);</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					ans=max(ans,s1+s2+s3);</span><br><span class="line">					state = <span class="number">4</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span> : </span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">'G'</span>)&#123;</span><br><span class="line">					ans=max(ans,s1+s2+<span class="number">1</span>);</span><br><span class="line">					s3=<span class="number">1</span>,s1=s2,s2=<span class="number">1</span>;</span><br><span class="line">					state = <span class="number">3</span>;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">// 之前状态三遇到银之前的遇到金都有维护,所以这里可以不维护</span></span><br><span class="line">					state = <span class="number">5</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span> : </span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">'G'</span>)&#123;</span><br><span class="line">					s3=<span class="number">1</span>;</span><br><span class="line">					ans=max(ans,s1+s2+s3);</span><br><span class="line"></span><br><span class="line">					s1=<span class="number">1</span>,s2=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">					state = <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">6</span> : </span><br><span class="line">				<span class="keyword">if</span>(s[i] == <span class="string">'G'</span>)&#123;</span><br><span class="line">					ans = max(ans,s1+<span class="number">1</span>);</span><br><span class="line">					s1=<span class="number">1</span>,s3=<span class="number">1</span>;</span><br><span class="line">					state = <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>终有一天，你会静心下来，像个局外人一样看自己的故事，笑着摇摇头。</p><h1 id="自己改写叨叨"><a href="#自己改写叨叨" class="headerlink" title="自己改写叨叨"></a>自己改写叨叨</h1><p>终有一天,你会静心下来,回忆着自己的刷题的时光,热泪盈眶!</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法日常</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>状态机解题法</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces1207G Indie Album AC自动机-DFS-树状数组 算法日常[32/100]</title>
    <url>/codeforces1207G-Indie-Album-AC%E8%87%AA%E5%8A%A8%E6%9C%BA-DFS-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-32-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1207/problem/G" target="_blank" rel="noopener">codeforces1207G Indie Album</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><a href="https://codeforces.com/blog/entry/69314" target="_blank" rel="noopener">官方题解</a></p><ul><li>看到这里是多个字符串的匹配,我们可以用AC自动机(虽然我一开始想到是用很多后缀自动机(SAM),也有大佬实现了,在官方题解的评论区有),给要题目中要查询的字符集建立AC自动机</li><li>并通过trie保持题目让我们构建的串</li><li>通过dfs求出AC自动机的各节点的及其子节点的size大小,用于后面树状数组确定好匹配的区间</li><li>最后再通过DFS让我们要匹配的串去AC自动机上进行跑动,通过树状数组来计数(<del>菜鸡我第一次见这种sao操作</del>)</li><li>对于每个匹配完的DFS都要清除掉树状数组上的记录,以免对其他部分造成影响</li></ul><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><p>好像比赛时只有30个大佬过了这题,所以代码不是我这个小菜鸡写的,是借鉴了ASDFZ的一个oi大佬(<del>我猜他是搞oi的</del>)的代码</p><p>以及附上我对他代码的理解注释,我觉得这份代码写得真牛逼<br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 59470538	Aug/25/2019 23:34UTC+8	LittleBeetle	G - Indie Album	GNU C++11	Accepted	561 ms	89100 KB</span></span><br><span class="line"><span class="comment">// By LittleBeetle, contest: Educational Codeforces Round 71 (Rated for Div. 2), problem: (G) Indie Album, Accepted, #</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">400002</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,i,j,k,opt,h[N],tt[N],v[N],ans[N];</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">3</span>],s[N],ti[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;p[N],id[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 看AC.dfs()发现,h[a]记录的应该是最后一个a指向的节点,而tt则记录的是同一层节点的前向路径,所以不是什么trie,而是一个奇特的最右儿子兄弟树!</span></span><br><span class="line">	<span class="comment">// 因此可以AC.dfs()可以通过使用这样的for循环 `for(int j=H[i];j;j=to[j])` 访问整个一层的节点</span></span><br><span class="line">	tt[++k]=h[a];</span><br><span class="line">	h[a]=k;</span><br><span class="line">	<span class="comment">// 这里v[k] 就是记录的是id节点的value, 用int 记录 char 是没有关系的</span></span><br><span class="line">	v[k]=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AC</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> cnt,t[N][<span class="number">26</span>],fail[N],q[N],l,r,i,j,k;</span><br><span class="line">	<span class="keyword">int</span> H[N],to[N],V[N],dfn[N],sz[N],Tim,c[N],loc[N];</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=j=<span class="number">1</span>;s[j];j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!t[i][s[j]<span class="number">-97</span>])</span><br><span class="line">				t[i][s[j]<span class="number">-97</span>]=++cnt;</span><br><span class="line">			i=t[i][s[j]<span class="number">-97</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">		to[++k]=H[a];</span><br><span class="line">		H[a]=k;</span><br><span class="line">		V[k]=b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 深度遍历右儿子以及右儿子的兄弟,统计size的值</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">		<span class="comment">// dfn 是 各个节点被深度遍历的顺序的hash记录</span></span><br><span class="line">		dfn[i]=++Tim;</span><br><span class="line">		sz[i]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=H[i];j;j=to[j])</span><br><span class="line">			dfs(V[j]),sz[i]+=sz[V[j]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">// bfs的l,r的写法</span></span><br><span class="line">		<span class="comment">// 根节点用的是1</span></span><br><span class="line">		l=<span class="number">0</span>;r=<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line">			<span class="keyword">if</span>(t[<span class="number">1</span>][j])</span><br><span class="line">				fail[t[<span class="number">1</span>][j]]=<span class="number">1</span>,add(<span class="number">1</span>,t[<span class="number">1</span>][j]),q[++r]=t[<span class="number">1</span>][j];</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				t[<span class="number">1</span>][j]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">			i=q[l++];</span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line">				<span class="keyword">if</span>(t[i][j])</span><br><span class="line">					fail[t[i][j]]=t[fail[i]][j],add(fail[t[i][j]],t[i][j]),q[++r]=t[i][j];</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					t[i][j]=t[fail[i]][j];</span><br><span class="line">		&#125;</span><br><span class="line">		dfs(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 这是一个反向树状数组,所以序数小的节点是大节点(父节点)</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(x)</span><br><span class="line">			c[x]+=y,x-=x&amp;-x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(x&lt;=cnt)</span><br><span class="line">			s+=c[x],x+=x&amp;-x;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">		Add(dfn[loc[i]],<span class="number">1</span>);</span><br><span class="line">		<span class="comment">// 测试发现,i=0等一些没有到过的值的时候,是不会进入for的...</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;p[i].size();j++)</span><br><span class="line">			ans[id[i][j]]=Query(dfn[p[i][j]])-Query(dfn[p[i][j]]+sz[p[i][j]]);</span><br><span class="line">		<span class="comment">// 卡很久一个点,注意这里的for循环也是右儿子及其兄弟的遍历方式...===&gt; 而且这里是要查询自动机的初始串的遍历!!!!!</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=h[i];j;j=tt[j])&#123;</span><br><span class="line">			<span class="comment">// 这里是跑AC自动机的核心,失配之后 从i跑向j,然后再DFS</span></span><br><span class="line">			<span class="comment">// 对的,跑自动机的时候是不用fail的,然后在这里跑下去,所以先算好了下面的,然后回溯算好了上面的</span></span><br><span class="line">			<span class="comment">// 每一小块都要把对应的树状数组部分清除掉</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// 2019年10月08日21:21:13 突然那么一瞬间,总算想清楚了多一点点</span></span><br><span class="line">			<span class="comment">// 比如你dadada,然后AC自动机上只有模式串da,所以你虽然dfs向下走dadada,但是你每次添加的位置都是loc[v[i]],所以这里是一个比较松的耦合!</span></span><br><span class="line">			loc[v[j]]=t[loc[i]][s[v[j]]<span class="number">-97</span>];</span><br><span class="line">			DFS(v[j]);</span><br><span class="line">		&#125;</span><br><span class="line">		Add(dfn[loc[i]],<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">		loc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		DFS(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	T.cnt=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++,j=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;opt);</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;j);</span><br><span class="line">		add(j,i);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch);</span><br><span class="line">		s[i]=*ch;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%s"</span>,&amp;j,ti+<span class="number">1</span>);</span><br><span class="line">		p[j].push_back(T.insert(ti));</span><br><span class="line">		id[j].push_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	init();</span><br><span class="line">	T.Build();</span><br><span class="line">	T.work();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="背后故事"><a href="#背后故事" class="headerlink" title="背后故事"></a>背后故事</h1><p>菜鸡我前前后后理解了这个题目3天…没想到自己被自己不太认识的树状数组卡了好久(丢人了…)—&gt; 继续加油吧</p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>人生最美好的，就是在你停止生存时，也还能以你所创造的一切为人们服务。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法日常</category>
      </categories>
      <tags>
        <tag>AC自动机</tag>
        <tag>DFS</tag>
        <tag>树状数组</tag>
        <tag>算法日常</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第24周[24/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC24%E5%91%A8-24-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-31-100/">CF589_C Primes and Multiplication tutorial 详解算法日常[31/100]</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/@parkernash/16-things-everybody-should-stop-doing-in-order-to-be-successful-18be67a70a2c" target="_blank" rel="noopener">16 Things Everybody Should Stop Doing In Order To Be Successful.</a><br>Focus on yourself and do one thing each day that makes you better than yesterday. Focus on your work, your family, and be the best role model you can be by being excellent at what you do.<br>其实对我冲击最大的观点是 Stop trying to do it all alone,因为我总是羞于向别人请求帮助,所以导致总是让一些事情延期完成,我要改善这个点</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://leafjame.github.io/posts/2114475547.html" target="_blank" rel="noopener">Hexo NexT主题美化2.0</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/Linux%E8%BF%9B%E5%85%A5emergency%E6%A8%A1%E5%BC%8F-%E5%B9%B6%E4%B8%94root%E8%A2%AB%E9%94%81%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3/">Linux进入emergency模式,并且root被锁怎么解决</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux进入emergency模式,并且root被锁怎么解决</title>
    <url>/Linux%E8%BF%9B%E5%85%A5emergency%E6%A8%A1%E5%BC%8F-%E5%B9%B6%E4%B8%94root%E8%A2%AB%E9%94%81%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>因为我的破神舟战神z7m-kp7gt在CPU过热,风扇爆转,然后自动断电保护,导致我两次进入Deepin之后两次异常断电,我很好奇第一次竟然没有陷入如文章名的困境(<strong>好像是挽救过程中又重启了超多次,然后出现了如题的状况</strong>),可能是我后面重启两次后去windows下面看了一下,进入windows的时候,windows它自动检测了硬盘,然后进入了,电脑发出滴滴滴的警报声,由于之前有在windows上发出警报的经验,我立马切断了电源,然后就没有自动关机,CPU就稳定了下来,然后以为没事了,再去Deepin的时候,故事就开始了</p><h1 id="问题依次集合以及解决"><a href="#问题依次集合以及解决" class="headerlink" title="问题依次集合以及解决"></a>问题依次集合以及解决</h1><h2 id="开机initramfs半天"><a href="#开机initramfs半天" class="headerlink" title="开机initramfs半天"></a>开机initramfs半天</h2><p>其实一开始还提醒了温度过高<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/emergencyMode/%E6%B8%A9%E5%BA%A6%E8%BF%87%E9%AB%98.jpg" alt="温度过高"></p><p>温度过高后尝试reboot无果,强制重启多次,还是initramfs<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/emergencyMode/init.jpg" alt="initramfs"></p><h2 id="破initramfs"><a href="#破initramfs" class="headerlink" title="破initramfs"></a>破initramfs</h2><p>大家注意看上面图中写的提示我使用fsck命令修复磁盘!我在网上找别人的解决方案也找到了类似的说法,所以有了如下操作<br>注意:<strong>initramfs下reboot和fsck命令有时候有用有时候没用,所以没用时就再重启吧,当然有Live CD的话,去live CD盘或者其他盘的live下操作一下命令更佳!</strong> (前提是能进去,菜鸡我Live CD和其他盘的linux也没能进去,故我是直接在initramfs下操作的)</p><h3 id="blkid-fsck"><a href="#blkid-fsck" class="headerlink" title="blkid+fsck"></a>blkid+fsck</h3><p>使用blkid查看磁盘,然后使用fsck对装了linux相对应的磁盘分区进行操作(<strong>每个linux分区都要操作,别问我怎么知道的,问就是看下文</strong>)<br><code>blkid</code></p><p><code>fsck -y /dev/sdb2</code><br>上面的分区要自己看啊,一般是ext4类型,虽然说简单暴力对每个分区都操作一遍也是可以的</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/emergencyMode/fsck_20191005222645.jpg" alt="fsck"></p><h2 id="root-locked"><a href="#root-locked" class="headerlink" title="root locked"></a>root locked</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/emergencyMode/rootLocked.jpg" alt="rootLocked"></p><h2 id="破锁啊"><a href="#破锁啊" class="headerlink" title="破锁啊"></a>破锁啊</h2><p>刚刚修复好了磁盘后其他盘的linux和Live CD应改都能进入了吧,只是Deepin被锁了(<del>其实是菜鸡博主没有采用单用户登录模式去操作,显得太麻烦</del>),其实也可以网上搜索如何在grub的时候进入单用户模式(如果你比较悲惨因为/home有问题而进入单用户困难,最好还是用Live CD和其他盘的linux方便点,别问怎么知道,问就是继续看下文),然后去操作下面的步骤<br>下面的操作都默认你已经进入了命令行了</p><h3 id="修改shadow文件"><a href="#修改shadow文件" class="headerlink" title="修改shadow文件"></a>修改shadow文件</h3><p>其他地方的linux暂时挂载deepin上的/分区<br>当然单用户登录了deepin就不用挂载了<br><strong>注意吧sdb2改成你的deepin /分区位置</strong><br><code>mount /dev/sdb2 /media</code></p><p><code>cd /media/dev/sdb2/etc</code><br><code>sudo vim shadow</code><br>当然你也可以像下图一样先备份shadow,不过那是我不知道删哪个地方才这样做的<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/emergencyMode/%E4%BF%AE%E6%94%B9shadow.png" alt="修改shadow"></p><p>然后删除<code>root:*:13223:0:99999:7:::</code>那个<code>*</code>就行了,不只有一个*号还有其他字符?反正就是*左右冒号之间的所有东西就行了</p><h2 id="有root的emergency-mode"><a href="#有root的emergency-mode" class="headerlink" title="有root的emergency mode"></a>有root的emergency mode</h2><p>以上操作还是进不去啊!!!我疯了,进入了有root的emergency mode<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/emergencyMode/%E6%9C%89root%E7%9A%84emergency.jpg" alt="有root的emergency"></p><h2 id="继续fsck"><a href="#继续fsck" class="headerlink" title="继续fsck"></a>继续fsck</h2><p>找了半天原因,最后发现是自己当时fsck没有对/home分区操作,这就是为什么我让你们对每个分区都fsck一遍…<del>枯了</del><br>同上面的fsck操作<br><strong>注意吧sdb5改成你的deepin /home分区位置</strong><br><code>fsck -y /dev/sdb5</code></p><p><code>reboot</code> 重启复活!</p><h1 id="注和后续"><a href="#注和后续" class="headerlink" title="注和后续"></a>注和后续</h1><p>其实我还经历了很多其他问题,但是由于都是没有经验,出现在以上大问题中的小问题,所以就不细说了</p><p>对了,如果碰巧你们操作过程双显示器中外接显示器不亮了,不用担心,先windows进入设备驱动,然后删除可拔插的监视器,然后重新检测安装驱动,重启,就可以</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>emergency mode</tag>
        <tag>root locked</tag>
      </tags>
  </entry>
  <entry>
    <title>CF589_C Primes and Multiplication tutorial 详解算法日常[31/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-31-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1228/problem/C" target="_blank" rel="noopener">CF589_C Primes and Multiplication</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h2><p><a href="https://codeforces.com/blog/entry/70162" target="_blank" rel="noopener">官方题解</a></p><h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><h3 id="题解中的式子"><a href="#题解中的式子" class="headerlink" title="题解中的式子"></a>题解中的式子</h3><script type="math/tex;mode=display">\begin{aligned} \prod_{i=1}^{n} f(x, i) &= \prod_{i=1}^{n} \prod_{p \in prime(x)} g(i, p) \\ &= \prod_{i=1}^{n} \prod_{p \in prime(x)} p^{h(i,p)} \\ &= \prod_{p \in prime(x)} \prod_{i=1}^{n} p^{h(i,p)} \\ &= \prod_{p \in prime(x)} p^{\sum_{i=1}^{n} h(i, p)} \\ &= \prod_{p \in prime(x)} p^{h(n!, p)} \end{aligned}</script><h3 id="算法优化式子的解释"><a href="#算法优化式子的解释" class="headerlink" title="算法优化式子的解释"></a>算法优化式子的解释</h3><script type="math/tex;mode=display">{\sum_{i=1}^{n} h(i, p)} = h(n!, p) = \sum_{k=1}^{\infty} \Bigl \lfloor \frac{n}{p^k} \Bigr \rfloor</script><p>左边两项相当于1到n,各项找p的最大幂的因子(我们需要的是那个幂),大多数项是0次幂,即最大因子为1,其他的都是1到n中恰好为p的幂次,而且这个幂次只出现一次! —&gt; 然后获取所有的幂次和</p><p>右边的式子则是让n值不断除p(记录第i次相除,i从1到$\Bigl \lfloor \frac{n}{p} \Bigr \rfloor$),在第i次判断n内各个数的集合中的因子含有$p^i$的数字个数,记录这些个数的和值</p><p>因为最终两个和值都是记录的1到n中所有数的p的因子出现次数,所以是相等的!(<strong>没看懂没有关系,看后面的例子体会一下</strong>)</p><h4 id="h-i-p-解释"><a href="#h-i-p-解释" class="headerlink" title="h(i,p) 解释"></a>h(i,p) 解释</h4><ul><li>p是素数,然后h(i,p)表示p的多少次方等于i</li><li>即 $p^{h(i,p)}$ = i</li></ul><h4 id="举例解释"><a href="#举例解释" class="headerlink" title="举例解释"></a>举例解释</h4><ul><li>假设n=9,p=2</li></ul><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8/CF589C/1.png" alt></p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(int i = int(a); i &lt;= int(b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, b, a) for(int i = int(b); i &gt;= int(a); --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span> </span>&#123;<span class="keyword">int</span> x=<span class="number">0</span>;<span class="keyword">char</span> p=getchar();<span class="keyword">while</span>(p&lt;<span class="string">'0'</span>||p&gt;<span class="string">'9'</span>)p=getchar();<span class="keyword">while</span>(p&gt;=<span class="string">'0'</span>&amp;&amp;p&lt;=<span class="string">'9'</span>)x=x*<span class="number">10</span>+p-<span class="string">'0'</span>,p=getchar();<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;ll ans=<span class="number">1</span>%mod;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=ans*a%mod;a=a*a%mod;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">ll x,n,ans=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">    ll m=n,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m) m/=p,sum+=m;</span><br><span class="line">    <span class="keyword">return</span> qpow(p,sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line">            ans=ans*f(i)%mod;</span><br><span class="line">            <span class="keyword">while</span>(x%i==<span class="number">0</span>) x/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">1</span>) ans=ans*f(x)%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>哭过，痛苦过，但从没有放弃过。笑过，坚持过，因此不曾后悔过。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>数学题</tag>
      </tags>
  </entry>
  <entry>
    <title>防火防盗防台部落</title>
    <url>/%E9%98%B2%E7%81%AB%E9%98%B2%E7%9B%97%E9%98%B2%E5%8F%B0%E9%83%A8%E8%90%BD/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><a href="https://wolfdan.cn/2019/09/29/%E9%98%B2%E7%81%AB%E9%98%B2%E7%9B%97%E9%98%B2%E5%8F%B0%E9%83%A8%E8%90%BD/" target="_blank" rel="noopener">欢迎访问我的主站看此文 wolfdan.cn</a></p><h1 id="事件过程"><a href="#事件过程" class="headerlink" title="事件过程"></a>事件过程</h1><p>今天闲来无聊,便打开Google,搜索自己的名字,结果翻啊翻,终于翻到自己了一些文章,结果发现了一个比较搞笑的事情就是自己注册的各个平台上的文章没有先出来,反而是别的平台盗用的我的文章先跳了出来,比如说这个台部落…和go语言中文网</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E8%B6%A3%E4%BA%8B/%E5%8F%B0%E9%83%A8%E8%90%BD%E7%9B%97%E7%94%A8%E4%BA%86%E7%AE%80%E4%B9%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%97/%E5%86%8D%E7%BF%BB%E4%B8%80%E9%A1%B5%2C%E7%A5%9E%E5%A5%87%E7%9A%84%E5%8F%B0%E9%83%A8%E8%90%BD.png" alt="台部落"></p><p>然后点进去一看,我惊呆了,这不是对我的简书的文章进行100%的复刻吗?<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E8%B6%A3%E4%BA%8B/%E5%8F%B0%E9%83%A8%E8%90%BD%E7%9B%97%E7%94%A8%E4%BA%86%E7%AE%80%E4%B9%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%97/%E6%88%91%E7%9A%84%E6%96%87%E7%AB%A0%E6%80%8E%E4%B9%88%E5%9C%A8%E5%8F%B0%E9%83%A8%E8%90%BD%E5%87%BA%E7%8E%B0%E8%80%8C%E6%9D%A5.png" alt="我的文章"></p><p>然后尝试注册,准备尝试搞回自己的文章所有权,结果,不能注册…</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E8%B6%A3%E4%BA%8B/%E5%8F%B0%E9%83%A8%E8%90%BD%E7%9B%97%E7%94%A8%E4%BA%86%E7%AE%80%E4%B9%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%97/%E8%80%8C%E4%B8%94%E8%BF%98%E4%B8%8D%E8%83%BD%E6%B3%A8%E5%86%8C.png" alt="不能注册"></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E8%B6%A3%E4%BA%8B/%E5%8F%B0%E9%83%A8%E8%90%BD%E7%9B%97%E7%94%A8%E4%BA%86%E7%AE%80%E4%B9%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%97/%E6%B3%A8%E5%86%8C%E6%98%AF%E4%B8%8D%E8%A1%8C%E7%9A%84.png" alt="不能注册2"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当下的SEO和骚操作真是太多了……,想要当一个好的站长真是难啊,不仅要自己要去做文章质量和数量,还要学习如何SEO,甚至还要防火防盗防台部落…</p><h1 id="有趣花絮"><a href="#有趣花絮" class="headerlink" title="有趣花絮"></a>有趣花絮</h1><h2 id="百毒-Google搜索自己对比"><a href="#百毒-Google搜索自己对比" class="headerlink" title="百毒_Google搜索自己对比"></a>百毒_Google搜索自己对比</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E8%B6%A3%E4%BA%8B/%E5%8F%B0%E9%83%A8%E8%90%BD%E7%9B%97%E7%94%A8%E4%BA%86%E7%AE%80%E4%B9%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%97/Google%E7%99%BE%E5%BA%A6%E5%AF%B9%E6%AF%94.png" alt="百毒_Google搜索自己"></p><h2 id="我把这篇文章同步到了简书-CSDN-欢迎台部落来复制"><a href="#我把这篇文章同步到了简书-CSDN-欢迎台部落来复制" class="headerlink" title="我把这篇文章同步到了简书,CSDN,欢迎台部落来复制"></a>我把这篇文章同步到了简书,CSDN,欢迎台部落来复制</h2><p>我把这篇文章同步到了简书,CSDN,希望台部落来盗取啊</p><h2 id="发现现在CSDN对外链markdown图片优化了"><a href="#发现现在CSDN对外链markdown图片优化了" class="headerlink" title="发现现在CSDN对外链markdown图片优化了"></a>发现现在CSDN对外链markdown图片优化了</h2><p>发现现在CSDN对外链markdown图片优化了,但是自己还是不想分流自己的文章出去,虽然说CSDN真的很容易出名,但是不够个性吧</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>趣事</category>
      </categories>
      <tags>
        <tag>趣事</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第23周[23/100]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC23%E5%91%A8-23-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-28-100/">CodeForces585 B tutorial 详解_算法日常[28/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-29-100/">CodeForces585 D Ticket Game tutorial算法日常[29/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-30-100/">CodeForces585 E. Marbles tutorial算法日常[30/100]</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://forge.medium.com/14-questions-to-ask-yourself-again-and-again-8e832d1394c1" target="_blank" rel="noopener">14 Questions to Ask Yourself Again and Again</a><br>是的,我们要多多关注自身真的的需求,才能长久得迸发出自己最巨大的能量!</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/wsgsm/article/details/83628317" target="_blank" rel="noopener">deepin/ubuntu桌面美化</a></p><p><a href="https://blog.csdn.net/YEN_CSDN/article/details/79966985" target="_blank" rel="noopener">LaTex符号大全（LaTeX_Symbols）</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/Deepin%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%85%B3%E6%9C%BA%E9%87%8D%E5%90%AF/">Deepin无法正常关机重启</a></p><p><a href="https://www.wolfdan.cn/linux%E4%B8%8Bgitignore-c-%E7%9A%84%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/">linux下gitignore c++的生成文件</a></p><p><a href="https://www.wolfdan.cn/%E9%98%B2%E7%81%AB%E9%98%B2%E7%9B%97%E9%98%B2%E5%8F%B0%E9%83%A8%E8%90%BD/">防火防盗防台部落</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces585 E. Marbles tutorial算法日常[30/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-30-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1215/problem/E" target="_blank" rel="noopener">CodeForces585 E. Marbles</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><ul><li>有一排有色石头,然后把相同颜色排在一起</li><li>能做的操作是交换相邻的石头</li><li>求最少的操作次数</li><li>n $\in$ [2,4⋅$10^5$]</li><li>$a_i$ $\in$ [1,20]</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h2><ul><li>看到 $a_i$ $\in$ [1,20],所以算法从 $a_i$ 下手,也就是说对每种颜色下手</li><li>通过<code>cnt[i][j]</code>计算出把所有的i颜色的放到j颜色前面需要做的这两种颜色之间的交换次数</li><li>然后用<strong>子集dp</strong>来递推出最后的答案,就是说一开始是0种颜色之间的关系,然后慢慢得加入各种颜色进去</li><li>每次加入一种颜色的时候就是把新的颜色放到最后面,然后这样子一直求出所有颜色放入后的最优决策,而且不重不漏!</li><li>子集dp:<ul><li>这里的状态就是,dp[$i_{1到1&lt;&lt;20-1}$]</li><li>数字i的每一个0,1字符代表着此状态下某种颜色是否存在</li><li><code>dp[i]</code>就是状态i的swap数量</li><li>就是枚举所有的状态,然后向着添加各种尚未存在的颜色放到最后面的操作来进行dp转移,从子集推向更大的状态集</li></ul></li></ul><h2 id="为什么这样可以不重不漏"><a href="#为什么这样可以不重不漏" class="headerlink" title="为什么这样可以不重不漏?"></a>为什么这样可以不重不漏?</h2><ul><li>因为我们for(1&lt;&lt;20-1) for(20) 的双重循环,就是已经枚举了所有的已经存在的颜色状态,然后把新的颜色放到最后的方案!</li><li>比如红黄蓝,在 红黄 状态时会有 加入蓝 (蓝在最后),同理也有 红蓝 + 黄,黄蓝 + 红! 这样就达到了不重不漏</li></ul><h2 id="英文的tutorial"><a href="#英文的tutorial" class="headerlink" title="英文的tutorial"></a>英文的tutorial</h2><p><a href="https://codeforces.com/blog/entry/69815" target="_blank" rel="noopener">当然也可以去官方自己看,233</a></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8/cf585E%E5%AD%90%E9%9B%86Dp/CF585E_%E5%8E%9F%E6%9D%A5%E5%B0%B1%E6%98%AF%E6%9C%89%E6%8A%80%E5%B7%A7%E7%9A%84%E6%A8%A1%E6%8B%9F.png" alt="英文版tutorial"></p><h1 id="AC代码-tutorial版"><a href="#AC代码-tutorial版" class="headerlink" title="AC代码(tutorial版)"></a>AC代码(tutorial版)</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000</span> * <span class="number">1000</span> + <span class="number">13</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">20</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1l</span>l * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> d[(<span class="number">1</span> &lt;&lt; M)];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt[M][M];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; col[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        x--;</span><br><span class="line">        col[x].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 题解前面的操作有点繁杂,所以推荐看不懂的可以看简单版AC代码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">int</span>)col[i].size() == <span class="number">0</span> || (<span class="keyword">int</span>)col[j].size() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> pos2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> pos1 = <span class="number">0</span>; pos1 &lt; (<span class="keyword">int</span>)col[i].size(); pos1++) &#123;</span><br><span class="line">                <span class="comment">// 找到 j 在 i 的每个位置之前的位置.然后计算移动所需要的值(注意这里只要考虑两者之间的交换)</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pos2 == (<span class="keyword">int</span>)col[j].size() - <span class="number">1</span> || col[j][pos2 + <span class="number">1</span>] &gt; col[i][pos1]) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    pos2++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (col[i][pos1] &gt; col[j][pos2]) &#123;</span><br><span class="line">                    cnt[i][j] += pos2 + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mask = <span class="number">0</span>; mask &lt; (<span class="number">1</span> &lt;&lt; <span class="number">20</span>); mask++) &#123;</span><br><span class="line">        d[mask] = INF;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mask = <span class="number">0</span>; mask &lt; (<span class="number">1</span> &lt;&lt; <span class="number">20</span>); mask++) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; was;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mask &amp; (<span class="number">1</span> &lt;&lt; i)) &#123;</span><br><span class="line">                was.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mask &amp; (<span class="number">1</span> &lt;&lt; i)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="keyword">int</span>)was.size(); j++) &#123;</span><br><span class="line">                sum += cnt[was[j]][i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> nmask = mask | (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            d[nmask] = min(d[nmask], d[mask] + sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; d[(<span class="number">1</span> &lt;&lt; <span class="number">20</span>) - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AC代码-简洁版"><a href="#AC代码-简洁版" class="headerlink" title="AC代码(简洁版)"></a>AC代码(简洁版)</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[MAXN], cnt[<span class="number">21</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> inv[<span class="number">21</span>][<span class="number">21</span>], f[(<span class="number">1</span> &lt;&lt; <span class="number">21</span>) + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; ++j) inv[a[i]][j] += cnt[j];</span><br><span class="line">        ++cnt[a[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">20</span>); ++i) f[i] = <span class="number">1l</span>l &lt;&lt; <span class="number">62</span>;</span><br><span class="line">    <span class="comment">// 20种排列要全面枚举出来</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">20</span>); ++i) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))) x.push_back(j);</span><br><span class="line">        <span class="comment">// 这是"我为人人"的子集DP</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> k : x) res += inv[k][j];</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> next_state = i | (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>));</span><br><span class="line">            f[next_state] = min(f[next_state], f[i] + res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, f[(<span class="number">1</span> &lt;&lt; <span class="number">20</span>) - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单词学习"><a href="#单词学习" class="headerlink" title="单词学习"></a>单词学习</h1><p>exponential 指数的</p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>自然界没风风雨雨，大地就不会春华秋实。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>思维题</tag>
        <tag>算法学习日常</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces585 D Ticket Game tutorial算法日常[29/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-29-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1215/problem/D" target="_blank" rel="noopener">CodeForces585 D Ticket Game</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><ul><li>n个数字的车牌,n是偶数(n $\in$ [2,2*$10^5$])</li><li>一些车牌偶数个数字被搽除了</li><li>定义美丽车牌的是<code>前n/2个数字的数字和 == 后n/2个数字的数字和</code></li><li>M讨厌美丽车牌,而B喜欢</li><li>玩一个游戏, M先手改被搽除的数字成为0-9中的一个(直到数字被填完)</li><li>数字填完是美丽的则 B win,否则 M win</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><a href="https://llf0703.com/p/cf-1215.html" target="_blank" rel="noopener">借鉴了大佬LIf0703</a></p><p>设先手为 M ，后手为 B 。并把数列左右两边剩下的空格个数记为 a,b 。</p><p>当左右两边都有的时候，B 就可以复制 M 的操作。</p><p>剩下的操作中可以控制每回合(所以a-b后是要除以2的)的和为 9，如果刚好补完那么后手就能获得胜利，否则先手就可以阻碍后手获胜。</p><p>发现大佬的想法总是高屋建瓴!!!<br>只有我个傻逼想歪了,想着傻逼模拟,然后情况还出错了…</p><p>但是还是感觉题解错了,不一定全是0,9的操作啊,可能最后一步是非0,9的操作啊!</p><p>当我尝试求出tutorial的反例,然后我失败了<br>???01?<br>右边的两个数之和必须是9才有可能B赢! 否则[1-8][10-18]都不行! 因为[1-8]别人取9,[10-18]别人取0!所以delta只有为9的倍数才行!<br>nb! 所以tutorial没错,只是隐藏了很多信息没有说…还是因为我太菜…</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>, x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, delta = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i &lt;&lt; <span class="number">1</span>) &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">'?'</span>)</span><br><span class="line">                delta += s[i] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                a++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">'?'</span>)</span><br><span class="line">                delta -= s[i] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cur = ((a - b) &gt;&gt; <span class="number">1</span>) * <span class="number">9</span> + delta;</span><br><span class="line">    <span class="keyword">if</span> (cur) <span class="keyword">return</span> <span class="number">0</span> &amp; <span class="built_in">puts</span>(<span class="string">"Monocarp"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> &amp; <span class="built_in">puts</span>(<span class="string">"Bicarp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>思维题</tag>
        <tag>算法学习日常</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces585 B tutorial 详解_算法日常[28/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-28-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1215/problem/B" target="_blank" rel="noopener">CodeForces585 B</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><ul><li>给你一串非0的正负整数串</li><li>定义<code>[l,r]</code>为$a_l$和$a_r$之间所有元素之积是正数还是负数</li><li>求串中所有的负数pair的个数和整数pair的个数</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li>记录负数对之间的元素个数cnt1,和奇数个负数个数间的元素个数cnt2</li><li>然后通过当下元素的添加,只会新产生当下元素为右括号的pair,这样就可以dp叠加了</li><li>具体的看代码中的详细注释吧</li></ul><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">大佬tutorial的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200</span> * <span class="number">1000</span> + <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;	</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">	ll ans0 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 题目给的是a[i]!=0,大佬还要特地考虑一下鲁棒性</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="number">0</span>) &#123;</span><br><span class="line">			pos = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">			ans0 += pos + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// bal是负数的个数，cnt1标识前面负数的对数，cnt2标识前面的正数的个数</span></span><br><span class="line">    <span class="comment">// ansP是正产的个数，负产个数可以直接用总的pair数减去ansP得到</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cnt1其实是偶数对之前的所有元素的个数,比如-1 1 -1 `1 1 1` -1 -1 这样cnt1=3</span></span><br><span class="line">	<span class="comment">// cnt2同理就是奇数个负数之间的个数,这些都是为了后面的计算!所以上面的例子cnt2=1</span></span><br><span class="line">    <span class="comment">// 太精妙了!</span></span><br><span class="line">    <span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> bal = <span class="number">0</span>;</span><br><span class="line">	ll ansP = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="number">0</span>) &#123;</span><br><span class="line">			cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>, bal = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (bal % <span class="number">2</span> == <span class="number">0</span>) &#123;	</span><br><span class="line">			cnt1++;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			cnt2++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			bal++;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">// 这里之所以可以这样加tutorial没说，其实是因为每次新加入之后</span></span><br><span class="line">        <span class="comment">// 新产生的pair一定是以a[i]作为右endpos的!所以可以这样加!</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 到了a[i]后总负数个数是偶数,所以加所有偶数对间的cnt1值,</span></span><br><span class="line">        <span class="comment">// 可以心想一下a[i]为正或者负的时候 bal达到偶数值时的状态就懂了</span></span><br><span class="line">		<span class="keyword">if</span> (bal % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">			ansP += cnt1;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			ansP += cnt2;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; n * <span class="number">1l</span>l * (n + <span class="number">1</span>) / <span class="number">2</span> - ans0 - ansP &lt;&lt; <span class="string">' '</span> &lt;&lt; ansP &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> fcspartakm</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="comment">//freopen("output.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; setprecision(<span class="number">10</span>) &lt;&lt; fixed;</span><br><span class="line">    </span><br><span class="line">    read();</span><br><span class="line">    solve();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//cerr &lt;&lt; "TIME: " &lt;&lt; clock() &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h1><p>这场比赛B,C都是1500分,然后我当时不会做B,所以写了B的题解,记录自己不太会的,会的就不记录了</p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>每个人都有潜在的能量，只是很容易：被习惯所掩盖，被时间所迷离，被惰性所消磨。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>思维题</tag>
        <tag>算法学习日常</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下gitignore c++的生成文件</title>
    <url>/linux%E4%B8%8Bgitignore-c-%E7%9A%84%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="问题产生"><a href="#问题产生" class="headerlink" title="问题产生"></a>问题产生</h1><p>一般我们不要git上传编译后的文件，github也不鼓励上传二进制文件，而且上传了编译文件还会拖慢另外设备的同步项目的速度，所以我不想上传我的编译生成的二进制文件，<br>但是因为自己在linux下生成c++的编译文件之前的配置都是没有后缀的，所以gitignore不好检测排除</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><ul><li>直接头铁去网上找了很多”如何gitignore 忽略上传二进制文件”，然后按照大佬们说的gitignore配置了好久</li><li><strong>最终配置成下面这样，但是git上传记录证明我的配置不合理，失败了…</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 忽略所有文件和目录</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">## 增加指定扩展名文件和Makefile文件</span><br><span class="line">### C &amp;&amp; makefile</span><br><span class="line">!*.cpp</span><br><span class="line">!*.c</span><br><span class="line">!*.h</span><br><span class="line">!Makefile</span><br><span class="line"></span><br><span class="line">### py</span><br><span class="line">!*.py</span><br><span class="line"></span><br><span class="line">### md</span><br><span class="line">!*.md</span><br><span class="line"></span><br><span class="line">### pic</span><br><span class="line">!*.png</span><br><span class="line">!*.jpg</span><br><span class="line"></span><br><span class="line">### some others</span><br><span class="line">!*.sh</span><br><span class="line">!*.bat</span><br><span class="line">!*.gitignore</span><br></pre></td></tr></table></figure></li></ul><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><ul><li>想到了linux下可执行文件不是还有<code>.out</code>文件吗？</li><li>后面在网上查了一下发现：<strong>linux下可执行文件不像windows那样要看后缀，而是看属性是否是可执行的</strong></li><li>于是立马更该自己的sublime的c++编译配置，最种git提交成功忽略二进制<code>.out</code>文件</li><li>最终的gitignore如下</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Cpp:</span><br><span class="line">*.exe</span><br><span class="line"></span><br><span class="line"># VScode:</span><br><span class="line">build</span><br><span class="line">.vscode</span><br><span class="line"></span><br><span class="line"># Python</span><br><span class="line">__pycache__</span><br><span class="line">*.pyc</span><br><span class="line"></span><br><span class="line"># 2019年9月22日22:01:00 发现网上找的上面的操作并没有成功,然后自己去网上探索，最后发现linux下的可执行文件不看后缀，而是看属性，所以自己刻意在编译中设置后缀，然后gitignore那个后缀就完美了</span><br><span class="line"></span><br><span class="line"># linux cpp on what I set the sa of cpp</span><br><span class="line">*.out</span><br></pre></td></tr></table></figure><h1 id="送一份linux下Sublime的C-编译配置"><a href="#送一份linux下Sublime的C-编译配置" class="headerlink" title="送一份linux下Sublime的C++编译配置"></a>送一份linux下Sublime的C++编译配置</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    // 2019年09月22日23:33:32 为了gitignore修改后缀</span><br><span class="line">    // "shell_cmd": "g++ '$&#123;file&#125;' -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;'", </span><br><span class="line">    "shell_cmd": "g++ '$&#123;file&#125;' -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;.out'", </span><br><span class="line">    "file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$", </span><br><span class="line">    "working_dir": "$&#123;file_path&#125;", </span><br><span class="line">    "selector": "source.c, source.c++", </span><br><span class="line">   </span><br><span class="line">    "variants": </span><br><span class="line">    [ </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Build &amp; Run"</span>, </span><br><span class="line">            // "shell_cmd": "x-terminal-emulator  -e bash -c \"g++ '$&#123;file&#125;' -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;' ; '$&#123;file_path&#125;/$&#123;file_base_name&#125;' ; read -p '\nPress ENTER or type command to continue...'\"" </span><br><span class="line">            "shell_cmd": "x-terminal-emulator  -e bash -c \"g++ '$&#123;file&#125;' -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;.out' ; '$&#123;file_path&#125;/$&#123;file_base_name&#125;.out' ; read -p '\nPress ENTER or type command to continue...'\"" </span><br><span class="line">        &#125;, </span><br><span class="line">   </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Build Only"</span>, </span><br><span class="line">            // "shell_cmd": "g++ '$&#123;file&#125;' -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;'" </span><br><span class="line">            "shell_cmd": "g++ '$&#123;file&#125;' -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;.out'" </span><br><span class="line">        &#125;, </span><br><span class="line">   </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Run Only"</span>, </span><br><span class="line">            // "shell_cmd": "x-terminal-emulator  -e bash -c \"'$&#123;file_path&#125;/$&#123;file_base_name&#125;' ; read -p '\nPress ENTER or type command to continue...'\"" </span><br><span class="line">            "shell_cmd": "x-terminal-emulator  -e bash -c \"'$&#123;file_path&#125;/$&#123;file_base_name&#125;.out' ; read -p '\nPress ENTER or type command to continue...'\"" </span><br><span class="line">        &#125; </span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>搞机</tag>
        <tag>gitignore</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin无法正常关机重启</title>
    <url>/Deepin%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%85%B3%E6%9C%BA%E9%87%8D%E5%90%AF/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>一般是电脑有双显卡，而且独显是英伟达的，但是由于驱动未开源，所以linux下不好装驱动</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="安装驱动—-gt-Deepin折腾了好久还是没有成功—-gt-放弃"><a href="#安装驱动—-gt-Deepin折腾了好久还是没有成功—-gt-放弃" class="headerlink" title="安装驱动—-&gt; Deepin折腾了好久还是没有成功—-&gt; 放弃"></a>安装驱动—-&gt; Deepin折腾了好久还是没有成功—-&gt; 放弃</h2><p>安装驱动—-&gt; Deepin折腾了好久还是没有成功—-&gt; 放弃</p><h2 id="让启动加载老版本的显卡驱动"><a href="#让启动加载老版本的显卡驱动" class="headerlink" title="让启动加载老版本的显卡驱动"></a>让启动加载老版本的显卡驱动</h2><p>/etc/default/grub 里加入一行 GRUB_CMDLINE_LINUX=<code>&quot;acpi_osi=! acpi_osi=&#39;Windows 2009&#39;&quot;</code> （<strong>建议最好看一下实现操作</strong>）</p><p><strong>然后<code>sudo update-grub</code>更新一下boot</strong></p><h1 id="实现操作"><a href="#实现操作" class="headerlink" title="实现操作"></a>实现操作</h1><h2 id="管理员模式修改"><a href="#管理员模式修改" class="headerlink" title="管理员模式修改"></a>管理员模式修改</h2><p><code>sudo vi /etc/default/grub</code><br>不用管理员模式可能就会发现这个文件不存在等问题</p><h2 id="添加代码-附操作图"><a href="#添加代码-附操作图" class="headerlink" title="添加代码(附操作图)"></a>添加代码(附操作图)</h2><ol><li>可以直接在GRUB_CMDLINE_LINUX_DEFAULT=”splash quiet “的quiet后面添加<code>&quot;acpi_osi=! acpi_osi=&#39;Windows 2009&#39;&quot;</code></li><li>也可以直接添加到 GRUB_CMDLINE_LINUX=””这一行的引号里面<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/%E6%98%BE%E5%8D%A1/Deepin/Deepin%E4%B8%8B%E5%8F%8C%E6%98%BE%E5%8D%A1%E6%97%A0%E6%B3%95%E5%85%B3%E6%9C%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt="Deepin下双显卡无法关机的解决方案"></li></ol><p><strong>最后<code>sudo update-grub</code>更新一下boot</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>搞机</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第22周[22/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC22%E5%91%A8-22-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-26-100/">2019上海网络赛G-Substring<em>字符串Hash+自建Hashmap</em>算法日常[26/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-27-100/">CF123D<em>SAM</em>算法日常[27/100]</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://elemental.medium.com/bring-back-handwriting-its-good-for-your-brain-fe22fe6c81d2" target="_blank" rel="noopener">Bring Back Handwriting: It’s Good for Your Brain</a><br>是啊，在记笔记的时候，人因为手写比打字慢很多，然后时间又不是很够，所以就会主动思考，用大脑提炼出自己最熟悉的词来加工笔记，所以更好地进行了学习</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://ubuntuqa.com/article/1339.html" target="_blank" rel="noopener">如何将整个Ubuntu系统移动(复制)到另一个硬盘？ - Ubuntu问答</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/%E5%A4%8D%E5%88%B6%E7%A1%AC%E7%9B%98%E4%B8%AD%E7%9A%84Ubuntu%E5%88%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98-%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98Deepin-Ubunntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/">复制硬盘中的Ubuntu到移动硬盘_实现移动硬盘Deepin+Ubunntu双系统</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>复制硬盘中的Ubuntu/Deepin到移动硬盘_实现移动硬盘Deepin+Ubunntu双系统</title>
    <url>/%E5%A4%8D%E5%88%B6%E7%A1%AC%E7%9B%98%E4%B8%AD%E7%9A%84Ubuntu%E5%88%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98-%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98Deepin-Ubunntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>自己想要实现题中的需要，主要是Ubuntu原来是安装在笔记本的HHD中的，那个Ubuntu18.04花了我接近实打实的好几个星期的时间去美化，所以一直不舍得删除，现在想移植到移动SSD固态硬盘实现移动的linux，平时也能高速访问的效果，固折腾了2天，固有此文</p><h1 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h1><p>操作之前首先到谷歌百度上调研了一下各种实现方式，有很多种实现方式，什么dd命令行操作，什么再生龙Clonzilla软件操作，什么live CD等等，具体看这篇文章,<a href="https://ubuntuqa.com/article/1339.html" target="_blank" rel="noopener">如何将整个Ubuntu系统移动(复制)到另一个硬盘？ - Ubuntu问答</a>.<br>感觉再生龙Clonzilla操作我完全不熟悉，而且感觉好像不太可控，于是放弃这种方案，对于dd操作，挂载来挂载去的，命令行也不是很直观，感觉对我这种菜鸡也不太好，所以最终选择了使用Live CD的gparted来操作，图像化操作，还可以支持操作前撤销啥的，文章中又推荐，而且自己以前也用过Ubuntu Live CD干过事情，所以决定的就是你了，妙蛙种子，上啊</p><h1 id="材料需求"><a href="#材料需求" class="headerlink" title="材料需求"></a>材料需求</h1><ul><li>一个移动固态或移动硬盘或者一个你想把系统移植到的其他硬盘(后面简称dst盘)</li><li>原来的Ubuntu系统的硬盘(后面简称src盘)</li><li>一个内存大于8G的U盘—&gt;用于制作Live CD系统(当然你有除了src，dst盘以外的盘装有linux系统也可以)</li><li>其他: 可能USB口少的电脑需要一个USB-Hub啥的</li></ul><h1 id="制作Live-CD"><a href="#制作Live-CD" class="headerlink" title="制作Live CD"></a>制作Live CD</h1><p>这个应该教程很多，就是下载<a href="https://ubuntu.com/download/alternative-downloads" target="_blank" rel="noopener">Ubuntu官网</a>的iso镜像包，<strong>当然如果觉得官网速度慢也可以找其他的镜像文件网站去下载</strong> , 比如<a href="https://mirrors.163.com/ubuntu-releases/18.04.3/" target="_blank" rel="noopener">网易的开源镜像网站上的iso文件</a> ，然后去<a href="https://www.ultraiso.com/download.html" target="_blank" rel="noopener">UltraISO官网</a>下载UItraISO,最后用一个大于8G的U盘备份好数据后用UItraISO制作成为Live CD就完事了，具体制作教程可以参考一些安装Ubuntu系统的文章，比如<a href="https://ywnz.com/linuxjc/4959.html" target="_blank" rel="noopener">使用UltraISO在Windows 10下刻录Ubuntu 18.04.2 U盘的方法</a></p><h1 id="复制硬盘数据"><a href="#复制硬盘数据" class="headerlink" title="复制硬盘数据"></a>复制硬盘数据</h1><h2 id="分好空间-进入Live-CD"><a href="#分好空间-进入Live-CD" class="headerlink" title="分好空间,进入Live CD"></a>分好空间,进入Live CD</h2><p><strong>首先我们将dst盘的空间分配出一块大于src盘Ubuntu系统大小的内存，使之成为未分配空间，然后关闭安全启动</strong>,进入Live CD系统，设置U盘启动，不会可以参考<a href="https://wolfdan.cn/2019/09/12/%E5%B0%86Deepin-linux%E8%A3%85%E8%BF%9B%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E5%88%B0%E4%BB%BB%E4%BD%95%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91%E4%B8%8A%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">这篇文章图文并茂的文章教你如何分配出未分配空间并进入Live CD</a>，然后得到如下Live CD的grub界面<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/%E7%A7%BB%E6%A4%8DUbuntu/grub%E7%95%8C%E9%9D%A2.jpg" alt="grub界面"></p><h3 id="第一步失败的可能问题以及解决"><a href="#第一步失败的可能问题以及解决" class="headerlink" title="第一步失败的可能问题以及解决"></a>第一步失败的可能问题以及解决</h3><p>可能会进入失败-&gt; 比如这样<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/%E7%A7%BB%E6%A4%8DUbuntu/%E8%BF%9B%E5%85%A5grub%E5%A4%B1%E8%B4%A5.jpg" alt="进入grub失败"><br>进入失败的话重进一次，否则重新制作Live CD</p><h2 id="进入磁盘管理，复制分区"><a href="#进入磁盘管理，复制分区" class="headerlink" title="进入磁盘管理，复制分区"></a>进入磁盘管理，复制分区</h2><p>右键屏幕打开终端(也可以<code>Ctrl+Alt+T</code>)，然后输入 <code>gparted</code> 进入磁盘管理<br>稍等片刻(磁盘扫描需要时间)得到如下画面，然后找到并选中src盘中的第一块盘，右键呼出菜单，点击复制<br>得到如下画面<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/%E7%A7%BB%E6%A4%8DUbuntu/%E8%BF%9B%E5%85%A5gparted%EF%BC%8C%E5%A4%8D%E5%88%B6%E5%88%86%E5%8C%BA.jpg" alt="进入gparted，复制分区"></p><p>找到dst盘，然后找到未分配分区的地方，右键粘贴，然后会弹出下面的界面，你可以顺便对你的src的Ubuntu系统各个分区的大小进行大小调整，我不需要调整，所以我直接选择了Paste就行<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/%E7%A7%BB%E6%A4%8DUbuntu/Paste%E7%95%8C%E9%9D%A2.jpg" alt="Paste界面"></p><p>paste完的界面如下，也就是说这个paste操作是还没有执行的，你还可以到时候执行<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/%E7%A7%BB%E6%A4%8DUbuntu/Paste%E5%AE%8C%E7%9A%84%E7%95%8C%E9%9D%A2.jpg" alt="Paste完的界面"></p><p>之后我们依次复制src盘中的其他分区到dst,然后得到如下界面,我们应用磁盘操作，一直选是是是就行<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/%E7%A7%BB%E6%A4%8DUbuntu/%E5%BA%94%E7%94%A8%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C.jpg" alt="应用磁盘操作"></p><h3 id="必-设置启动标签"><a href="#必-设置启动标签" class="headerlink" title="(必)设置启动标签"></a>(必)设置启动标签</h3><p><strong>操作完之后我们需要右键原先复制过来的EFI分区的那个地方，右键呼出菜单，设置标签，选择<code>启动分区</code></strong></p><p><strong>由于这一步之前没有操作，然后磁盘之前有Deepin，所以导致移动到dst盘的Ubuntu一直找不到引导!!!</strong></p><p>这里没图是因为相信你们已经能熟练操作gparted了<del>其实是我后面忘了拍照</del></p><h2 id="生成新的UUID-然后修改fstab文件"><a href="#生成新的UUID-然后修改fstab文件" class="headerlink" title="生成新的UUID,然后修改fstab文件"></a>生成新的UUID,然后修改fstab文件</h2><h3 id="本步骤的预先提示"><a href="#本步骤的预先提示" class="headerlink" title="本步骤的预先提示"></a>本步骤的预先提示</h3><p>当然如果你拔掉老硬盘，然后一直装上新硬盘可以不用操作此步骤，因为此步骤的目标就在于让你的系统在src，dst盘同时存在的时候能让你 既可以进入src盘的Ubuntu，也可以进入dst盘的Ubuntu，而不至于冲突，或者只能进入一个盘</p><p>当然如果你时间够，想折腾，拔掉老硬盘也是可以进行下面操作玩一玩的</p><h3 id="一些专有名词"><a href="#一些专有名词" class="headerlink" title="一些专有名词"></a>一些专有名词</h3><p>UUID(通用唯一识别码) —&gt; 是操作系统加载是用这个来码来寻找硬盘分区的，每个分区都对应着一个UUID</p><h3 id="开始操作吧"><a href="#开始操作吧" class="headerlink" title="开始操作吧"></a>开始操作吧</h3><p>先使用gparted把刚刚所有的新分区都选中右键生成新的UUID(<del>又忘了拍照,不过操作应该很简单很简单</del>)<br>然后使用命令行 <code>sudo blkid -s UUID</code> 查看一下是否修改成功<br>然后参考原来src盘的fstab中的磁盘和UUID对应表文件表<code>sudo gedit /etc/fstab</code>,(还可以通过disk和gparted来确认性参考)<br>来修改dst盘的fstab<code>sudo gedit /etc/fstab</code><br><code>Ctrl + S</code>保存修改</p><p>整体操作如下图所示<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/%E7%A7%BB%E6%A4%8DUbuntu/fstab%E4%BF%AE%E6%94%B9.jpg" alt="fstab修改"></p><p>其中swap被我注释了，是应为我的电脑有16G物理内存，不太需要swap分区，所以我就没有没有赋值src盘中的swap分区，然后这里也把最后一行对于swap的UUID的选择给注释了</p><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><p>下面两个问题卡了我8小时…(下面有详细叙述)</p><ul><li>编写分区类型为boot就行，然后去disk修改为efi类型！</li><li>如果发现复制后的efi分区中的各个*.cfg文件中的uuid不是新的uuid，必须手动改一下！</li></ul><h3 id="注意添加启动标记"><a href="#注意添加启动标记" class="headerlink" title="注意添加启动标记"></a>注意添加启动标记</h3><p>2019年11月24日10:32:50 更新(来源昨天移植deepin到另一个SSD(有<del>80年</del>丰富移植linux系统经验的老司机带你<del>翻车</del>))</p><blockquote><p>注意一定要给你得dst盘的新来的efi分区 <code>右键-&gt; 设置标签 -&gt; boot</code>,然后去Ubuntu的disk应用查看这个efi分区是否标识的是efi分区!</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/%E7%A7%BB%E6%A4%8DDeepin/efi.jpg" alt="efi"></p><blockquote><p>在disk中选中你刚刚的分区，然后点击那个齿轮按键，编辑分区类型，搞成efi（我选的是那个非gpt的-然后成功了，不知道另一个可以不）</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/%E7%A7%BB%E6%A4%8DDeepin/efi2.jpg" alt="efi2"></p><h2 id="注意修改efi文件中的UUID"><a href="#注意修改efi文件中的UUID" class="headerlink" title="注意修改efi文件中的UUID"></a>注意修改efi文件中的UUID</h2><p>2019年11月24日10:32:50 更新(来源昨天移植deepin到另一个SSD(有<del>80年</del>丰富移植linux系统经验的老司机带你<del>翻车</del>))</p><p><strong>2019年12月28日15:30:39 昨天又帮助同学移植了一波系统，发现这一步是必须要做的事情！</strong></p><blockquote><p>我之前搞Ubuntu移植的时候没有这么多事，但是deepin不知道为什么这么多事(有一说一，虽然deepin平时确实好用)—-可能之前侥幸处理好了下面的操作</p></blockquote><p>直接挂载efi分区，然后去修改<code>/***(UUID码)/EFI/boot/grub.cfg</code>(种类一),也可能多一层grub文件夹(种类二)<br>在每次grub自动加载的时候，它都是读取上面文件里面的UUID!!! 这就很要命!!!最要命的看下面</p><p><strong>文件中有个地方的UUID值不会随着deepin,Ubuntu的终端命令 <code>sudo update-grub</code>来更改的,看下图</strong><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/MoveOS/grub_no_change_uuid.jpg" alt="grub_no_change_uuid"></p><p>导致的grub引导界面的后果是—-引导进入错误的设备(进入原来的设备<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/MoveOS/bad_grub_id.jpg" alt="bad_grub_id"></p><p>所以可能必须手动修改成新的<code>/分区</code>的UUID为启动root(操作如下图)</p><h3 id="种类一"><a href="#种类一" class="headerlink" title="种类一"></a>种类一</h3><p>修改成为你的新UUID<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/%E7%A7%BB%E6%A4%8DDeepin/boot.jpg" alt="boot"></p><h3 id="种类二"><a href="#种类二" class="headerlink" title="种类二"></a>种类二</h3><p>把椭圆中的内容修改成为方框中的内容,注意不要在等号前面加空格,别问我是怎么知道的(问就是曾经踩过坑)<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/MoveOS/grub_no_change_uuid.jpg" alt="grub_no_change_uuid"></p><h2 id="重启享受"><a href="#重启享受" class="headerlink" title="重启享受"></a>重启享受</h2><p>重启，然后选择dst盘的Ubuntu进入，完美</p><p>当然你可能在这一步卡住，所以下面给出一个潜在的原因与解决方案,以及一些可能出现的状况与解决方案</p><h2 id="引导相关"><a href="#引导相关" class="headerlink" title="引导相关"></a>引导相关</h2><p>如果你的原来的Ubuntu是安装在磁盘上,并且不想删除原有的Ubuntu,可以像我一样使用原有盘的Ubuntu的grub来引导所有系统,就是直接进入原来的Ubuntu,在命令行中直接<code>sudo update-grub</code>就行了</p><h3 id="潜在的原因与解决方案"><a href="#潜在的原因与解决方案" class="headerlink" title="潜在的原因与解决方案"></a>潜在的原因与解决方案</h3><h4 id="fstab修改错误"><a href="#fstab修改错误" class="headerlink" title="fstab修改错误"></a>fstab修改错误</h4><p>再进入Live CD进行修改fstab</p><h4 id="待大佬贡献或者提问添加"><a href="#待大佬贡献或者提问添加" class="headerlink" title="待大佬贡献或者提问添加"></a>待大佬贡献或者提问添加</h4><h3 id="可能出现的状况与解决方案"><a href="#可能出现的状况与解决方案" class="headerlink" title="可能出现的状况与解决方案"></a>可能出现的状况与解决方案</h3><h4 id="有多个efi分区-不知道复制哪一个"><a href="#有多个efi分区-不知道复制哪一个" class="headerlink" title="有多个efi分区,不知道复制哪一个"></a>有多个efi分区,不知道复制哪一个</h4><p><code>2019年11月16日14:20:04 更新</code><br>可以通过查看src盘系统中/etc/fstab文件中efi的UUID来确定到底使用哪一个efi文件</p><h4 id="进了src盘的Ubuntu"><a href="#进了src盘的Ubuntu" class="headerlink" title="进了src盘的Ubuntu"></a>进了src盘的Ubuntu</h4><ul><li>再进入Live CD进行修改fstab</li><li>给EFI分区设置启动标签(只要设置成boot,然后还是无法启动的话,看上文中的核心两点,2019年11月24日10:57:39新加的内容)</li></ul><h4 id="卡在了进入的logo"><a href="#卡在了进入的logo" class="headerlink" title="卡在了进入的logo"></a>卡在了进入的logo</h4><p>一般来说是独立显卡的问题，然后如果之前src系统能进的话，加上是完全复制的话一般不会出现这个问题，但还是给一下解决方案</p><p>在进入grub安装界面的时候，在Install Ubuntu选项，按e,进入命令行模式，然后在quiet slash — 后面(也可能没有 – )，添加以下内容，然后按F10重新引导<br><code>acpi_osi=linux nomodeset</code><br>进入之后安装显卡驱动，啊，推荐看大佬的文章吧<a href="https://blog.csdn.net/tjuyanming/article/details/79267984" target="_blank" rel="noopener">解决Linux双系统安装卡在启动Logo</a></p><h4 id="戴尔BIOS找不到U盘启动项"><a href="#戴尔BIOS找不到U盘启动项" class="headerlink" title="戴尔BIOS找不到U盘启动项"></a>戴尔BIOS找不到U盘启动项</h4><p>2019年12月28日16:17:49 更<br>按F12进入选择界面</p><h4 id="戴尔BIOS找不到固态硬盘启动项"><a href="#戴尔BIOS找不到固态硬盘启动项" class="headerlink" title="戴尔BIOS找不到固态硬盘启动项"></a>戴尔BIOS找不到固态硬盘启动项</h4><p>2019年12月28日16:18:15 更(wyh)<br>尝试6小时，失败，最终重装Ubuntu系统才能找到启动项(大雾</p><p>突然感觉神舟还是留了很多的自由给发烧友进行魔改支持的，爱了</p><p>回归正题 : 希望知道怎么解决的朋友评论一发,感谢,感恩</p><h4 id="待大佬贡献或者提问添加-1"><a href="#待大佬贡献或者提问添加-1" class="headerlink" title="待大佬贡献或者提问添加"></a>待大佬贡献或者提问添加</h4><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>我在我的酷比魔方knote x上面直接F7直接进入SSD的引导一直失败，Live CD也无法<code>sudo update-grub</code>,于是便在knote x上面安装了Ubuntu+windows双系统，在那个Ubuntu下使用<code>sudo update-grub</code>来引导我的SSD中的Ubuntu，惊喜发现还能引导我的Deepin!</p><p>为什么是惊喜呢？</p><p>因为我之前Deepin 的安装盘也F7 直接选择硬盘进入进入不了，还以为运行不了Deepin，然后发现连SSD中的Ubuntu也引导不了!但网上说knote x是可以安装Ubuntu的，于是就认为是直接进入硬盘不太行，所以必须grub引导一下，所以有了上面操作，然后收获了也能引导Deepin的惊喜</p><p><del>由于这周末在秦皇岛打2019CCPC秦皇岛，所以9月20就开始写了,但现在(2019年9月22日22:16:40)才写完这篇文章</del></p><h1 id="二次移植Deepin的教训已经加入上文"><a href="#二次移植Deepin的教训已经加入上文" class="headerlink" title="二次移植Deepin的教训已经加入上文"></a>二次移植Deepin的教训已经加入上文</h1><p>感谢各位朋友的观看，2019年11月24日10:59:00 已经加入了我移动deepin的8小时惨痛教训的经验了，所以此文将成为一篇LTS文章(长期支持维护文章)——<del>好像是小编懒得写第二篇文章？才不是!我是要做好所有维护(虽然之前有个同学看我的这个没有加入二次移植经验的文章翻车了)</del></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>搞机</tag>
        <tag>瞎折腾</tag>
        <tag>SSD</tag>
      </tags>
  </entry>
  <entry>
    <title>CF123D_SAM_算法日常[27/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-27-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://vjudge.net/problem/CodeForces-123D" target="_blank" rel="noopener">VJ</a><br><a href="https://codeforces.com/problemset/problem/123/D" target="_blank" rel="noopener">CF</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><ul><li>如果字符串y在字符串x中出现n次，那么F(x,y)=n*(n+1)/2 <strong>(可以看做是一个长为n的区间,求滑动区块的总个数)</strong></li><li>现在给一个字符串，求所有的F(s,x)的和，x为字符串的所有不相同的子串．</li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>直接SAM</li><li>right[v]就是SAM上状态表示的所有字符串出现的次数</li><li>那么每个状态的答案就是right[v](right[v]+1)/2*(st[v].len-st[st[v].link].len)</li><li>前面right[v](right[v]+1)/2是串的组合</li><li>后面是 st[v].len - st[st[v].link].len是后缀的前缀长度，是本质不同的串的贡献</li><li>也即后缀的前缀每个字母的贡献—-&gt;就是 <strong>每个后缀节点t跳父亲节点fa跳掉的那部分t的前缀</strong> 中的 <strong>以每一个字母开头的串t的后缀</strong> 都是和串t所在状态节点出现次数(前面的串的组合数)相同的！</li><li>累加答案完成计算</li></ul><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXALP 30</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">state</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> len, link, nxt[MAXALP];</span><br><span class="line">        <span class="keyword">int</span> leftmost; <span class="comment">//某个状态的right集合中r值最小的</span></span><br><span class="line">        <span class="keyword">int</span> rightmost; <span class="comment">//某个状态的right集合的r的最大值</span></span><br><span class="line">        <span class="keyword">int</span> Right; <span class="comment">//right集合大小</span></span><br><span class="line">    &#125;;</span><br><span class="line">    state st[N * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">char</span> S[N];</span><br><span class="line">    <span class="keyword">int</span> sz, last, rt;</span><br><span class="line">    <span class="keyword">char</span> s[N];</span><br><span class="line">    <span class="keyword">int</span> cnt[<span class="number">2</span> * N], rk[<span class="number">2</span> * N]; <span class="comment">//for radix sort</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c &gt;= <span class="string">'a'</span> &amp;&amp; c &lt;= <span class="string">'z'</span>)</span><br><span class="line">            <span class="keyword">return</span> c - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">'A'</span> + <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        ms(st, <span class="number">0</span>);</span><br><span class="line">        last = rt = ++sz;</span><br><span class="line">        st[<span class="number">1</span>].len = <span class="number">0</span>;</span><br><span class="line">        st[<span class="number">1</span>].link = <span class="number">-1</span>;</span><br><span class="line">        st[<span class="number">1</span>].rightmost = <span class="number">0</span>;</span><br><span class="line">        ms(st[<span class="number">1</span>].nxt, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = ++sz;</span><br><span class="line">        st[cur].len = st[last].len + <span class="number">1</span>;</span><br><span class="line">        st[cur].leftmost = st[cur].rightmost = head;</span><br><span class="line">        <span class="built_in">memset</span>(st[cur].nxt, <span class="number">-1</span>, <span class="keyword">sizeof</span>(st[cur].nxt));</span><br><span class="line">        <span class="keyword">int</span> p;</span><br><span class="line">        <span class="keyword">for</span> (p = last; p != <span class="number">-1</span> &amp;&amp; st[p].nxt[c] == <span class="number">-1</span>; p = st[p].link)</span><br><span class="line">            st[p].nxt[c] = cur;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">-1</span>) &#123;</span><br><span class="line">            st[cur].link = rt;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> q = st[p].nxt[c];</span><br><span class="line">            <span class="keyword">if</span> (st[p].len + <span class="number">1</span> == st[q].len) &#123;</span><br><span class="line"></span><br><span class="line">                st[cur].link = q;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> clone = ++sz;</span><br><span class="line">                st[clone].len = st[p].len + <span class="number">1</span>;</span><br><span class="line">                st[clone].link = st[q].link;</span><br><span class="line">                <span class="built_in">memcpy</span>(st[clone].nxt, st[q].nxt, <span class="keyword">sizeof</span>(st[q].nxt));</span><br><span class="line">                st[clone].leftmost = st[q].leftmost;</span><br><span class="line">                st[clone].rightmost = st[q].rightmost;</span><br><span class="line">                <span class="keyword">for</span> (; p != <span class="number">-1</span> &amp;&amp; st[p].nxt[c] == q; p = st[p].link)</span><br><span class="line">                    st[p].nxt[c] = clone;</span><br><span class="line">                st[q].link = st[cur].link = clone;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        last = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, _len = <span class="built_in">strlen</span>(S); i &lt; _len; i++) &#123;</span><br><span class="line">            st[sz + <span class="number">1</span>].Right = <span class="number">1</span>;</span><br><span class="line">            extend(idx(S[i]), i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">topo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ms(cnt, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) cnt[st[i].len]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//rk[1]是len最小的状态的标号</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) rk[cnt[st[i].len]--] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跑拓扑序，预处理一些东西</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = sz; i &gt;= <span class="number">2</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = rk[i];</span><br><span class="line">            <span class="keyword">int</span> fa = st[v].link;</span><br><span class="line">            <span class="keyword">if</span> (fa == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            st[fa].rightmost = max(st[fa].rightmost, st[v].rightmost);</span><br><span class="line">            st[fa].Right += st[v].Right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = sz; i &gt;= <span class="number">2</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = rk[i];</span><br><span class="line">            <span class="keyword">if</span> (st[v].link == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 前面是串的组合</span></span><br><span class="line">            <span class="comment">// 后面是 st[v].len - st[st[v].link].len是后缀的前缀，是本质不同的串的贡献</span></span><br><span class="line">            <span class="comment">// 每个字母的贡献---&gt;就是每个后缀节点t跳父亲节点fa跳掉的那部分t的前缀中的每一个字母开头的后缀都是和串t出现次数相同的！</span></span><br><span class="line">            ans = ans + <span class="number">1L</span>L * st[v].Right * (st[v].Right + <span class="number">1</span>) / <span class="number">2</span> * (st[v].len - st[st[v].link].len);</span><br><span class="line">            <span class="comment">// cout&lt;&lt;"TEST: "&lt;&lt;st[v].len - st[st[v].link].len&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; A;</span><br><span class="line"><span class="keyword">char</span> B[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, A.S);</span><br><span class="line">    A.build();</span><br><span class="line">    A.topo();</span><br><span class="line">    A.pre();</span><br><span class="line">    A.solve();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://111qqz.com/2017/11/cf-123d/" target="_blank" rel="noopener">111qqz</a></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>路还长，别太狂，以后指不定谁辉煌</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>2019上海网络赛G-Substring_字符串Hash+自建Hashmap_算法日常[26/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-26-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://nanti.jisuanke.com/t/41415" target="_blank" rel="noopener">计蒜客走你(<del>揍你</del>)</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><ul><li>定义<code>匹配</code> : 两个串首尾字母相同,中间整个串相同或者是相同数量的各字符组成的不同排列</li><li>给你一个原串S，然后给你m个子串t，求这些子串在原串S中<code>匹配</code>的个数</li><li><del>无关题意的个人吐槽:众所周知，2019最后一场网络赛-上海网络赛是一场让你自闭的计数场</del></li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li>长度种类数是O($\sqrt n$)的</li><li>然后就是离线暴力处理—&gt;hash字符串</li><li>对hash字符串比较匹配</li><li>但是如果使用unordered_map会超时</li><li>使用数组会超内存</li><li>只有使用自建hash才能过</li><li>详见代码注释</li><li>代码是借鉴一个大佬同学的</li></ul><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for(int i=a;i&lt;=n;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre(i,a,n) for(int i=n;i&gt;=a;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">50</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e2</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N],p[N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bas = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">ull <span class="title">get</span><span class="params">(<span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    ull ret = <span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">0</span>,<span class="number">27</span>) &#123;</span><br><span class="line">        ret = ret*bas+a[i]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ull sta;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; g[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line">ull fac[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> clk;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手写的Hash,因为unorder_map&lt;int,int&gt; f[26][26]被卡时间</span></span><br><span class="line"><span class="keyword">namespace</span> Hash&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> hashmod = <span class="number">218357</span>;</span><br><span class="line">  <span class="keyword">int</span> v[hashmod];</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> h[hashmod];</span><br><span class="line">  <span class="keyword">int</span> vis[hashmod];</span><br><span class="line">  <span class="function"><span class="keyword">int</span> &amp;<span class="title">get</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t2 = S % hashmod, i;</span><br><span class="line">    <span class="comment">// vis[i]是访问过的(clk恒为1)，所以也要走下一个</span></span><br><span class="line">    <span class="comment">// h[i] = S.则发生了hash crash(哈希碰撞)，就要走到下一个，也就是h[i] != S 走下一个</span></span><br><span class="line">    <span class="comment">// i = t2-1说明走了一个轮回了，就不用再走了，再走就是重复走t2位置了,所以i!=t2-1</span></span><br><span class="line">    <span class="keyword">for</span> (i = t2; vis[i]==clk &amp;&amp; h[i] != S &amp;&amp; i != t2 - <span class="number">1</span>; i = (i + <span class="number">1</span>) % hashmod);</span><br><span class="line">    <span class="comment">// 从未访问过的要初始化计数值为0</span></span><br><span class="line">    <span class="keyword">if</span> (vis[i]!=clk) h[i] = S, vis[i] = clk, v[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> v[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,n) g[i].clear();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,p+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(p+<span class="number">1</span>);</span><br><span class="line">        node ret;</span><br><span class="line">        ret.id = i;</span><br><span class="line">        <span class="keyword">int</span> cnt[<span class="number">28</span>]&#123;&#125;;</span><br><span class="line">        rep(i,<span class="number">1</span>,len) ++cnt[p[i]-<span class="string">'a'</span>];</span><br><span class="line">        cnt[<span class="number">26</span>] = p[<span class="number">1</span>];</span><br><span class="line">        cnt[<span class="number">27</span>] = p[len];</span><br><span class="line">        ret.sta = get(cnt);</span><br><span class="line">        g[len].pb(ret);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,m) ans[i] = <span class="number">0</span>;</span><br><span class="line">    rep(len,<span class="number">1</span>,n) <span class="keyword">if</span> (g[len].size()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt[<span class="number">28</span>]&#123;&#125;;</span><br><span class="line">        <span class="comment">// 中间的字母是按照字母顺序来的，所以就是可以的，然后最后两个是按照直接首尾字母来的</span></span><br><span class="line">        rep(i,<span class="number">1</span>,len) ++cnt[s[i]-<span class="string">'a'</span>];</span><br><span class="line">        cnt[<span class="number">26</span>] = s[<span class="number">1</span>];</span><br><span class="line">        cnt[<span class="number">27</span>] = s[len];</span><br><span class="line">        ull sta = get(cnt);</span><br><span class="line">        ++clk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> L=<span class="number">1</span>,R=len; R&lt;=n; ++L,++R) &#123;</span><br><span class="line">            ++Hash::get(sta);</span><br><span class="line">            <span class="comment">// 左边字符基底为一个fac,而右边为fac^0=1</span></span><br><span class="line">            sta = sta+(s[L+<span class="number">1</span>]-s[L])*fac[<span class="number">1</span>];</span><br><span class="line">            sta = sta+(ll)(s[R+<span class="number">1</span>]-s[R]);</span><br><span class="line">            <span class="comment">// 下面是右移一位整体的字母表的hash值变化</span></span><br><span class="line">            sta = sta-fac[<span class="number">27</span>-(s[L]-<span class="string">'a'</span>)];</span><br><span class="line">            sta = sta+fac[<span class="number">27</span>-(s[R+<span class="number">1</span>]-<span class="string">'a'</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这个t长度下,把各次提问的ans更新</span></span><br><span class="line">        <span class="comment">// hash是这个头尾相同，中间的串是不同排列的  询问串(key) ————&gt; 原串中的个数(value)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;t:g[len]) ans[t.id] = Hash::get(t.sta);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,m) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">30</span>) fac[i]=fac[i<span class="number">-1</span>]*bas;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) solve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>所有的胜利，与征服自己的胜利比起来，都是微不足道。所有的失败，与失去自己的失败比起来，更是微不足道</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>思维题</tag>
        <tag>算法学习日常</tag>
        <tag>手写HashMap</tag>
        <tag>StringHash</tag>
        <tag>串按长度分类讨论</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第21周(21/521)</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC21%E5%91%A8-21-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-24-100/">2019南昌网络赛Hello 2019(cf 750E)线段树_算法日常[24/100]</a><br><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-25-100/">2019上海网络赛B<em>Light bulbs</em>算法日常[25/100]</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/s/please-advise/youre-not-meant-to-do-what-you-love-you-re-meant-to-do-what-you-re-good-at-4e8e6b8e929d" target="_blank" rel="noopener">You’re Not Meant to Do What You Love</a><br>是啊，如果你揣测自己喜欢做某件事情，然后没做好，就会产生极大的挫败感，所以不妨先做好你擅长地事情，然后慢慢进化你喜欢的事情</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://mzz.pub/2017/12/22/justplay/mobileubuntu/" target="_blank" rel="noopener">把Ubuntu16.04装进移动硬盘的惨痛实战</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/%E5%B0%86Deepin-linux%E8%A3%85%E8%BF%9B%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E5%88%B0%E4%BB%BB%E4%BD%95%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91%E4%B8%8A%E4%BD%BF%E7%94%A8/">将Deepin-linux装进移动硬盘到任何其他电脑上使用</a><br><a href="https://www.wolfdan.cn/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81wp%E7%AB%99%E5%81%9C%E7%AB%99-%E4%B8%93%E6%B3%A8hexo%E7%AB%99/">为什么要wp站停站,专注hexo站</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>2019上海网络赛B_Light bulbs_算法日常[25/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-25-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://nanti.jisuanke.com/t/41399" target="_blank" rel="noopener">计蒜客传送门</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给你一排N个全灭的灯泡，然后进行M次区间翻转，T组测试</p><ul><li>1≤T≤1000</li><li>1≤N≤$10^6$</li><li>1≤M≤1000</li><li>0≤$L_i$ ≤$R_i$ ≤N−1</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li>因为是多次区间修改，然后求区间的特性，我们可以很自然地想到使用差分+前缀和或者线段树</li><li>不过这里发现8192K，N为$10^6$,$10^6$的int是4*$10^6$Byte=4*$10^3$K.然后线段树要开两倍N(节点2*N),而且一般是一个struct结构(一般几个int)，而非一个int，所以线段树否决</li><li>然后求前缀和O(T*N)在$10^9$量级，时间限制为1s，所以我们要观察M在1000的量级，所以可以通过离散化来解决</li><li>注意，<strong>这题超级卡时间，所以使用快读(独立缓冲的cin T了)以及各位置用完及时归0而非使用memset</strong></li></ul><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[M],T,n,m,l,r,ans,sum;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar())<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;<span class="built_in">isdigit</span>(ch);ch=getchar())x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line">    T = read();</span><br><span class="line">    <span class="keyword">int</span> kase = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        n = read(),m = read();</span><br><span class="line">        <span class="keyword">if</span>(!b.empty()) b.clear();</span><br><span class="line">        ans = <span class="number">0</span>,sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            l = read(),r = read();</span><br><span class="line"></span><br><span class="line">            l++,r++;</span><br><span class="line"></span><br><span class="line">            a[l]--;a[r+<span class="number">1</span>]++;</span><br><span class="line">            b.push_back(l),b.push_back(r+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 先排序，因为unique只从左到右顺序查重，然后unique得到最后一个被删除的位置，用erase搽除尾部</span></span><br><span class="line">        sort(b.begin(), b.end());</span><br><span class="line">        b.erase(unique(b.begin(), b.end()),b.end());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sz = b.size();</span><br><span class="line">        sum+=a[b[<span class="number">0</span>]];</span><br><span class="line">        a[b[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;sz;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum&amp;<span class="number">1</span>) ans+=b[i]-b[i<span class="number">-1</span>];</span><br><span class="line">            sum+=a[b[i]];</span><br><span class="line">            a[b[i]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum&amp;<span class="number">1</span>) ans+=n+<span class="number">1</span>-b[sz<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,kase++,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>人生总有很多东西无法挽留，比如走远的时光，比如枯萎的情感;总有很多东西难以割舍，比如追逐的梦想，比如心中的深爱。所以你一定要珍惜眼前。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>思维题</tag>
        <tag>算法学习日常</tag>
        <tag>差分</tag>
        <tag>前缀和</tag>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么要wp站停站,专注hexo站</title>
    <url>/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81wp%E7%AB%99%E5%81%9C%E7%AB%99-%E4%B8%93%E6%B3%A8hexo%E7%AB%99/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><ul><li>维护两个网站有点耗时间</li><li>访问速度慢</li><li>wp站由于网站的vps在国外，然后在百度收录方面很差劲</li><li>中文内容，加上自己知识有限，所以在谷歌也没什么访问量</li><li>wp站有点重</li><li>Hexo站可以满足我的写作所有的愿望</li></ul><h1 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h1><ul><li>少就是多，把时间节省下来，专注做好一件事情</li><li>好好刷题，好好学习，好好写作</li><li>争取让我的小站能够对大家产生一点帮助</li><li>当然也希望自己通过写作成为更好的自己</li></ul><h1 id="搬家的一些痛"><a href="#搬家的一些痛" class="headerlink" title="搬家的一些痛"></a>搬家的一些痛</h1><ul><li>之前有些老文章是富文本写的…还好有wp-markdown.md，把那些转成html了</li><li>图片文件链接要重新搞一下，有点麻烦—-&gt;所以放弃了一些图片</li><li>wolfdan.cn域名的安全证书过期了，要多点好几下才能看到内容…</li></ul><h1 id="一些hexo不太爽的点解决"><a href="#一些hexo不太爽的点解决" class="headerlink" title="一些hexo不太爽的点解决"></a>一些hexo不太爽的点解决</h1><h2 id="posts太多，找文件有点难"><a href="#posts太多，找文件有点难" class="headerlink" title="_posts太多，找文件有点难"></a>_posts太多，找文件有点难</h2><ul><li>先发<code>new draft &quot;文章名&quot;</code>，之后<code>hexo publish &quot;文章名&quot;</code></li><li>分类的话，直接在网站看</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>将Deepin-linux装进移动硬盘到任何其他电脑上使用</title>
    <url>/%E5%B0%86Deepin-linux%E8%A3%85%E8%BF%9B%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E5%88%B0%E4%BB%BB%E4%BD%95%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91%E4%B8%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>最近买了一块480G的移动固态硬盘，天生的折腾性格，我哪闲得住…然后早就听闻有linux装到移动硬盘的操作，然后又听说deepin很牛*，所以我想要把deepin装到移动固态，然后实现系统插在任何电脑都是一样的配方，一样的味道，一样的我的数据和工具(在机房使用就是真香…虽然还没去机房试过)，不过在自己的电脑上跑得很high，然后插在朋友的电脑上成功了,看下图</p><h2 id="我的high图"><a href="#我的high图" class="headerlink" title="我的high图"></a>我的high图</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/deepin/high1.png" alt="high1"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/deepin/high2.png" alt="high2"></p><h2 id="在朋友电脑上点亮"><a href="#在朋友电脑上点亮" class="headerlink" title="在朋友电脑上点亮"></a>在朋友电脑上点亮</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/deepin/amazing.jpg" alt="amazing"></p><h1 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h1><ul><li>电脑一台(环境是windows)</li><li>移动硬盘或者大容量的高速U盘一个</li><li>普通8G以上大小的U盘一个(用于制作启动盘)</li></ul><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><h2 id="下载镜像并制作启动盘"><a href="#下载镜像并制作启动盘" class="headerlink" title="下载镜像并制作启动盘"></a>下载镜像并制作启动盘</h2><ol><li><p><a href="https://www.deepin.org/download/" target="_blank" rel="noopener">官网链接下载镜像</a>,推荐选择一个地区位置离你比较近的地方的iso仓库下载</p></li><li><p>下载完成将压缩包中的<code>deepin-boot-maker.exe</code>和<code>deepin-boot-maker.zip</code>移动到一个文件夹下，然后运行.exe文件按照提示制作启动盘</p></li></ol><h2 id="压缩SSD磁盘空间"><a href="#压缩SSD磁盘空间" class="headerlink" title="压缩SSD磁盘空间"></a>压缩SSD磁盘空间</h2><p>右键windows图标，选择 磁盘管理<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/deepin/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86.jpg" alt="磁盘管理"></p><p>选择SSD，压缩卷(其实是取出一块的意思)，然后删除卷(其实是把它设置成可分配的意思)达到一定的大小(一定是没有数据的空间，你不要把你有数据的磁盘压缩删除了)，<strong>让你的的未分配的空间大小达到你想要的系统空间大小，比如我的设置的是100G，你们看到的20G，80G，300M的那三个就是对应我的deepin系统的<code>/分区</code>,<code>/home分区</code>,<code>efi分区</code></strong></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/deepin/%E5%8E%8B%E7%BC%A9%E5%8D%B7.jpg" alt="压缩卷"></p><h2 id="关闭快速启动"><a href="#关闭快速启动" class="headerlink" title="关闭快速启动"></a>关闭快速启动</h2><p>右键电源图标，点击电源选项<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/deepin/%E7%94%B5%E6%BA%90%E9%80%89%E9%A1%B9.jpg" alt="电源选项"></p><p>选择电源功能<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/deepin/%E9%80%89%E6%8B%A9%E7%94%B5%E6%BA%90%E5%8A%9F%E8%83%BD.jpg" alt="选择电源功能"></p><p>禁用快速启动<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/deepin/%E7%A6%81%E7%94%A8%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8.jpg" alt="禁用快速启动"></p><h2 id="设置启动项并关闭安全启动"><a href="#设置启动项并关闭安全启动" class="headerlink" title="设置启动项并关闭安全启动"></a>设置启动项并关闭安全启动</h2><p>进入windows的设置-&gt; 更新和安全 -&gt; 恢复 -&gt; 高级启动 -&gt; 立即重启<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/deepin/%E6%81%A2%E5%A4%8D%E8%AE%BE%E7%BD%AE.jpg" alt="恢复设置"></p><p>重启后会自动进入一个蓝屏的界面，然后选择 <code>疑难解答</code> -&gt; <code>UEFI固件设置</code></p><p>进入bios界面后找到安全启动，然后disable<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/SSD/deepin/disable.jpg" alt="disable安全启动"></p><p>然后将Boot设置成 <strong>U盘为第一启动项</strong></p><p>保存，重启</p><h2 id="分区-最重要"><a href="#分区-最重要" class="headerlink" title="分区(最重要!)"></a>分区(最重要!)</h2><p>一步步进行到分区,<strong>然后选择高级模式，找到自己的移动硬盘，点击右侧的编辑</strong><br>我的分区大小是</p><ul><li>efi 300M(<strong>一定要有efi!!!uefi安装模式必要的分区，否则可能无法在别的电脑启动</strong>)</li><li>/ 20G</li><li>/home 80G (剩下的全部都行,因为之后用的东西都在这里)</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装完就是体验咯，取下U盘，慢慢使用</p><h2 id="双显卡导致开机卡logo的解决方案"><a href="#双显卡导致开机卡logo的解决方案" class="headerlink" title="双显卡导致开机卡logo的解决方案"></a>双显卡导致开机卡logo的解决方案</h2><ul><li>在grub选择界面按e进入编辑</li><li>找到这一行<br><code>linux /vmlinuz-4.15.0-29deepin-generic root=UUID=************9-466c-bc12-6bb801e45901 ro splash quiet</code></li><li>在quiet后面加上<code>acpi_osi=! acpi=&quot;windows 2009&quot;</code>，然后按F10保存即可.这时会重新开始登录deepin系统，耐心等待进入桌面即可</li><li>开机后<code>Ctrl+Alt+T</code>进入打开终端，输入以下代码来打开grub配置文件：sudo vi /boot/grub/grub.cfg(<strong>看完这里可以直接看这个模块下的2019年09月24日15:17:49 更新部分!!!</strong>)</li><li><code>/quiet</code>查找quiet位置，回车找到第一个，然后<code>i</code>进行编辑，同样加入<code>acpi_osi=! acpi=&quot;windows 2009&quot;</code></li><li><code>Esc</code>退出编辑，<code>:wq!</code>强制保存退出</li></ul><h3 id="2019年09月24日15-17-49-更新"><a href="#2019年09月24日15-17-49-更新" class="headerlink" title="2019年09月24日15:17:49 更新"></a>2019年09月24日15:17:49 更新</h3><p>发现上面在boot文件夹下修改grub.cfg是不稳定的！因为这个文件中最上面写着<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># DO NOT EDIT THIS FILE</span><br><span class="line">#</span><br><span class="line"># It is automatically generated by grub-mkconfig using templates</span><br><span class="line"># from /etc/grub.d and settings from /etc/default/grub</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p></p><p>所以我们去修改真正能够固定下来的文件/etc/default/grub<br>具体卡logo原因可以看我的另一篇文章,这里仅把解决方案更新过来了</p><h3 id="实现操作"><a href="#实现操作" class="headerlink" title="实现操作"></a>实现操作</h3><h4 id="管理员模式修改"><a href="#管理员模式修改" class="headerlink" title="管理员模式修改"></a>管理员模式修改</h4><p><code>sudo vi /etc/default/grub</code><br>不用管理员模式可能就会发现这个文件不存在等问题</p><h4 id="添加代码-附操作图"><a href="#添加代码-附操作图" class="headerlink" title="添加代码(附操作图)"></a>添加代码(附操作图)</h4><ol><li>可以直接在GRUB_CMDLINE_LINUX_DEFAULT=”splash quiet “的quiet后面添加<code>&quot;acpi_osi=! acpi_osi=&#39;Windows 2009&#39;&quot;</code></li><li>也可以直接添加到 GRUB_CMDLINE_LINUX=””这一行的引号里面<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/%E6%98%BE%E5%8D%A1/Deepin/Deepin%E4%B8%8B%E5%8F%8C%E6%98%BE%E5%8D%A1%E6%97%A0%E6%B3%95%E5%85%B3%E6%9C%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt="Deepin下双显卡无法关机的解决方案"></li></ol><h2 id="高光时刻-跑在别人电脑上"><a href="#高光时刻-跑在别人电脑上" class="headerlink" title="高光时刻-跑在别人电脑上"></a>高光时刻-跑在别人电脑上</h2><p>在朋友电脑上进入界面按键进入bios选择，选择自己的ssd启动，然后完美进入自己的deepin，看一下，数据都在，完美</p><h1 id="自己对于deepin的一些体验"><a href="#自己对于deepin的一些体验" class="headerlink" title="自己对于deepin的一些体验"></a>自己对于deepin的一些体验</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>界面真好看</li><li>命令行界面有好多好多种配色，真好，而且默认的就是我最爱的绿色</li><li>比起他的爸爸Ubuntu，他在系统上对微信，qq进行了优化，不用手动去调节wine-qq，wine-微信的一些兼容性问题(虽然还是有时候会出现卡死现象，无可厚非)</li><li>截图功能极其强大(弥补了wine-qq，wine-微信不能截图的缺憾)</li><li>设置简洁</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p><strong>主要是因为deepin15.11是2019.7.20发布，还存在一些bug</strong></p><ul><li>网络自动代理设置不生效(Ubuntu中可以)(<strong>新版本对我的致命伤害,所以这个bug不解决，我就用windows去</strong>)</li><li>双屏中的副屏不能右键呼出菜单</li></ul><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>万事万物由心生，如果累了，就把不重要的事情都推掉，然后做真正最重要的事情！</strong></p><p><strong>还有，少折腾！</strong>比如你这三天就没有好好刷题，搞这个破deepin…然后浪费大把的赛前训练的时间！你已经后悔了…呜呜呜，对不起，我明天一定好好刷题</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>Deepin</tag>
        <tag>瞎折腾</tag>
        <tag>装系统</tag>
      </tags>
  </entry>
  <entry>
    <title>2019南昌网络赛Hello 2019(cf 750E)线段树_算法日常[24/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-24-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目小趣事"><a href="#题目小趣事" class="headerlink" title="题目小趣事"></a>题目小趣事</h1><p>我在比赛一开场就开始看这题，然后没想出怎么写，12:07我校一个大佬lxc说他拿下了这题的一血，这是一个原题，cf 750E(我只能说:大佬都是移动题库!)然后做完另一个签到题之后，成为第一名，带榜了</p><h2 id="赛后发现1"><a href="#赛后发现1" class="headerlink" title="赛后发现1"></a>赛后发现1</h2><p>Hello 2019 的提交情况如下:<br><strong>通过率：5.66% 正确提交 / 总提交：217 / 3837</strong></p><p>达成学校带崩他校节奏的成就</p><h2 id="赛后发现2"><a href="#赛后发现2" class="headerlink" title="赛后发现2"></a>赛后发现2</h2><p>这题<strong>tourist(codeforces霸榜第一，ACM world final 4小时ak第一人，被评为全球最厉害的十个程序员之一(和c语言之父这些人在一个榜单！))</strong>当年比赛的时候也没有做出来！然后大家说自己竟然尝试了一下当年T神都没有做出来的题目</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8/cf%20750E_hello2019_%E5%8D%97%E6%98%8C2019%E7%BD%91%E7%BB%9C%E8%B5%9B/Tshen.png" alt="Tshen"></p><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://nanti.jisuanke.com/t/41350" target="_blank" rel="noopener">计蒜客传送门</a><br><a href="https://codeforces.com/problemset/problem/750/E" target="_blank" rel="noopener">codeforces 750E</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给你一个串，然后多次询问左右区间，看删除多少个字符能使得这个区间内有9102，而没有8102的subsequence(codeforces中是有2017而没有2016)</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li>肉眼做法,表层理解,很容易看出只要删除8</li><li>因为8放在第一个不好处理，所以改成翻转string，并且翻转l,r,从而变成判断有2019没有2018，</li><li>因为每次询问一个区间，所以需要把dp状态扔到某个数据结构上,所以我们考虑线段树</li><li>线段树更新的时候是拿两段的信息合并，所以不能像做1~n的dp那样记录状态</li></ul><p>考虑2017之间的间隔:</p><p>|　2　|　0　|　1　|　9　|</p><p>0　 　1　 　2　 　3　 　4</p><ul><li><p>线段树的每个节点存一个矩阵A.$mat_{ij}$表示使原串的子序列包含2019中第i个间隔到第j个间隔组成的子串，但不严格包含它的子序列最少需要删除的数字、</p></li><li><p>转移是显然的，和区间dp一样。枚举区间，枚举中间点，然后转移就好了。</p></li><li><p>考虑初值问题，显然的是非2、0、1、9、8的数字对答案不影响，所以令$a<em>{ii}$=0,$a</em>{ij}$=N(取不到就行) (i!=j)</p></li><li><p>考虑当前数字是2的时候，如果我希望只包含子串[0,0]（这里表示两个间隔间的子串），那么就必须删掉这个2，故$a<em>{00}$=1(<strong>可以理解为不想要成为2019是不思进取的行为，所以付出代价—&gt;这样可以在后面处理的时候淘汰掉这些大的状态值</strong>),如果希望包含子串[0,1]，那么什么都不用做，所以$a</em>{01}$=0。对于0、1、7同理。</p></li><li><p>考虑当前数字是8的时候，那么遇到子串[i,3]希望转移回自己(<strong>不想接受8来到达4状态</strong>)，那么需要付出1的代价，因为否则会包含子序列”2018”，同样如果遇到子串[i,4]希望转移回自己(<strong>不想接受8来到达4状态</strong>)，那么也需要付出1的代价(区间如果询问到这里就是真正要删除的数字了，因为4达到状态终点了)。</p></li></ul><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200005</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mat[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">    Node <span class="keyword">operator</span> + (Node x) &#123;</span><br><span class="line">        Node ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;++j) &#123;</span><br><span class="line">                ans.mat[i][j]=N;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">5</span>;++k) &#123;</span><br><span class="line">                    ans.mat[i][j]=min(ans.mat[i][j],mat[i][k]+x.mat[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;++j) &#123;</span><br><span class="line">                a[x].mat[i][j]=(i==j)?<span class="number">0</span>:N;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[l]==<span class="string">'2'</span>) a[x].mat[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>,a[x].mat[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[l]==<span class="string">'0'</span>) a[x].mat[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">0</span>,a[x].mat[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[l]==<span class="string">'1'</span>) a[x].mat[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">0</span>,a[x].mat[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[l]==<span class="string">'9'</span>) a[x].mat[<span class="number">3</span>][<span class="number">4</span>]=<span class="number">0</span>,a[x].mat[<span class="number">3</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[l]==<span class="string">'8'</span>) a[x].mat[<span class="number">3</span>][<span class="number">3</span>]=<span class="number">1</span>,a[x].mat[<span class="number">4</span>][<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(l,m,x&lt;&lt;<span class="number">1</span>);build(m+<span class="number">1</span>,r,x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    a[x]=a[x&lt;&lt;<span class="number">1</span>]+a[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> a[x];</span><br><span class="line">    <span class="keyword">int</span> m=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(m&lt;L) <span class="keyword">return</span> query(m+<span class="number">1</span>,r,L,R,x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(m&gt;=R) <span class="keyword">return</span> query(l,m,L,R,x&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> query(l,m,L,R,x&lt;&lt;<span class="number">1</span>)+query(m+<span class="number">1</span>,r,L,R,x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,q;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>,&amp;n,&amp;q,s+<span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            swap(s[i],s[n-i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">            <span class="keyword">int</span> l,r;<span class="keyword">int</span> tl,tr;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;tl,&amp;tr);</span><br><span class="line">            r = n-tl+<span class="number">1</span>,l = n - tr + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> ans=query(<span class="number">1</span>,n,l,r,<span class="number">1</span>).mat[<span class="number">0</span>][<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">if</span>(ans==N) ans=<span class="number">-1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/yyf0309/p/8475433.html" target="_blank" rel="noopener">阿波罗2003</a></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>这个世界，想不想要永远不是最重要的，重要的，是要不要得起。</strong></p><p><strong>就像每个人都想成功，但是不是每个人都承担得起成功的代价</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>线段树</tag>
        <tag>思维题</tag>
        <tag>算法学习日常</tag>
        <tag>subsequence</tag>
      </tags>
  </entry>
  <entry>
    <title>2019南昌网络赛E.Magic Master_算法日常23[23/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-23-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://nanti.jisuanke.com/t/41352" target="_blank" rel="noopener">计蒜客传送门</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>魔法洗牌，洗完牌后进行1,2,2,2…2..操作，使得最终在John手上的牌是递减的</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li>看这个题目的数据范围我们可以猜测出这题是一个找规律的题目，那我们要怎么构造这个串呢？</li><li>观察题目给的M=1，发现1,2,3都间隔了一个，然后我们推测是间隔M个放置，然后再继续推测之后得到下面的规律</li><li>走M次空格，第M+1次落下，第一个先填1，<strong>循环走</strong></li></ul><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>比如N = 5, M = 4;<br>一开始是 1 <em></em> <em></em><br>然后走4次空格，第5次落下 变成 1 2 <em></em> <em><br>之后同理得到 1 2 </em>3 <em>==&gt; 1 2 </em>3 4 ==&gt; 1 2 5 3 4</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>通过模拟链表实现走M次空格(详见代码)</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度 O(T*N*M) ,接近 O(4*$10^9$) ,6s时间限制，按理1秒 2*$10^8$ 也只够跑 1.2*$10^9$ ,所以要么计蒜客评测机太快，要么数据不够强大,233</p><h2 id="写作小收获"><a href="#写作小收获" class="headerlink" title="写作小收获"></a>写作小收获</h2><p>用转义符<code>\</code>来保持某些符号不成为markdown的标记符，比如我要用多个*,就要防止变成markdown的斜体</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> pos[N], nxt[N], pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m, q, u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) nxt[i] = i+<span class="number">1</span>, pre[i] = i<span class="number">-1</span>;</span><br><span class="line">        nxt[n] = <span class="number">2</span>; pre[<span class="number">2</span>] = n;</span><br><span class="line">        pos[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m+<span class="number">1</span>;j++) &#123;</span><br><span class="line">                cur = nxt[cur];</span><br><span class="line">            &#125;</span><br><span class="line">            pos[cur] = i;</span><br><span class="line">            u = pre[cur]; v = nxt[cur];</span><br><span class="line">            nxt[u] = v; pre[v] = u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;u);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pos[u]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>别人撞了南墙才回头，而我撞了也不回头，我要跨过去</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>思维题</tag>
        <tag>算法学习日常</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第20周[20/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC20%E5%91%A8-20-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-20-100/">SPOJ-LCS,SPOJ-LCS2-后缀自动机SAM专题训练_算法日常[20/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-21-100/">spoj<em>nsubstr_sam后缀自动机</em>算法日常[21/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-22-100/">2019 徐州网络赛 M Longest subsequence_算法日常[22/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B823-23-100/">2019南昌网络赛E.Magic Master_算法日常23[23/100]</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://elemental.medium.com/how-to-take-the-perfect-nap-397ee26a64c7" target="_blank" rel="noopener">How to Take the Perfect Nap</a></p><p>其实自己之前看过这篇报告的中文版，现在看一遍英文版，又温习了一下，也拯救一下从暑假归来后每天要睡9个小时的自己，让自己能恢复战斗状态，每天6小时+30mins咖啡盹</p><ul><li>晚上6小时，正好是4个完整的睡眠周期，完成4次慢波睡眠期处理记忆和信息和4次快速动眼期促进创造力，然后白天再来一个30mins的咖啡盹睡眠恢复精力和警觉(不要进入慢波睡眠，否则在慢波睡眠的时候醒来会很困)就够了，固定下来就好，如果长期不适应4个睡眠周期就加到5个</li><li>咖啡盹就是快速喝完咖啡马上睡30mins</li><li>固定睡眠时间，让生物钟适应</li></ul><h2 id="再附上一篇中文的把"><a href="#再附上一篇中文的把" class="headerlink" title="再附上一篇中文的把"></a>再附上一篇中文的把</h2><p><a href="https://36kr.com/p/5130961" target="_blank" rel="noopener">怎么睡觉，工作效率最高？</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/lewky_liu/article/details/82432045" target="_blank" rel="noopener">Coding Pages申请SSL/TLS证书错误</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/Hexo-Next-Gemini%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E5%8C%96%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E7%9A%84%E6%9B%B4%E6%94%B9/">Hexo-Next-Gemini主题透明化以及背景图片的更改和获取</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 徐州网络赛 M Longest subsequence_算法日常[22/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-22-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://nanti.jisuanke.com/t/41395" target="_blank" rel="noopener">计蒜客传送</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>求s中字典序大于t的<strong>最长子序列</strong>长度</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>sebsequence是子序列，可以不连续，substring才是子串，必须连续</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>对于答案来说，一定是</p><ol><li>前i-1个字符和t的前i个一样，然后第i个字符比t的大</li><li>前缀为t，然后长度比t长</li></ol><p>对于第一种情况，枚举这个 i ，然后找最小的 p 可以使得从(s[1]~s[p]) 中产生($t<em>1$,$t_2$ 到 $t</em>{i-1}$) ,然后在(s[p+1,n])中找最左边的比(t[i]) 大的字符，假如 找到了(s[pos])，那么后面的(s[pos+1,n]) 都可以加到答案后面（因为(s[pos] &gt; t[i]) 已经保证答案大于t了)</p><p>对于第二种，根据求第一种的方法，不难求出</p><p>如何找最小的p？预处理一个(sf[i][c]) 数组，表示(s[i]) 后面第一个字符(c)在哪里即可</p><p>如何找pos? 也是用预处理的数组循环最多26次即可</p><p>复杂度(O(n*26))</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> sf[N][<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N],t[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s+<span class="number">1</span>,t+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) sf[n][i] = n+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预处理一个(sf[i][c]) 数组，表示(s[i]) 后面第一个字符(c)在哪里</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(sf[i],sf[i+<span class="number">1</span>],<span class="keyword">sizeof</span> sf[i]);</span><br><span class="line">        sf[i][s[i+<span class="number">1</span>]-<span class="string">'a'</span>] = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>,res = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=t[i]-<span class="string">'a'</span>+<span class="number">1</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">            pos = min(pos,sf[p][j]);<span class="comment">//找到最近的那个s[pos] &gt; t[i];</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pos != n+<span class="number">1</span>)</span><br><span class="line">            res = max(res,i+n-pos);<span class="comment">//(n-pos)为后面还可以加的长度</span></span><br><span class="line">        <span class="comment">// p在s中找到与t相同的"前缀"(不连续子串可以跳跃)</span></span><br><span class="line">        p = sf[p][t[i]-<span class="string">'a'</span>];</span><br><span class="line">        <span class="keyword">if</span>(p == n+<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果完全相同，那就要严格更大，所以p&lt;n</span></span><br><span class="line">    <span class="keyword">if</span>(p &lt; n) res = max(res,n-p+m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h1><p><a href="https://www.codetd.com/article/7223660" target="_blank" rel="noopener">https://www.codetd.com/article/7223660</a></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>有时候不试一下，永远都不知道自己有多垃圾！不过没有关系，至少我永远向上生长，这就是生命！保持乐观，积极生活，因为人相对于宇宙来说是很渺小的，所以静静观察自己的生活，享受生活吧！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
      </tags>
  </entry>
  <entry>
    <title>spoj_nsubstr_sam后缀自动机_算法日常[21/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-21-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="http://www.spoj.com/problems/NSUBSTR/" target="_blank" rel="noopener">spoj</a><br><a href="https://vjudge.net/problem/SPOJ-NSUBSTR" target="_blank" rel="noopener">VJ</a></p><p>2019年9月6日22:46:10VJ挂了…只能在spoj(所以注册了一手)上交先了，明天来补这个链接</p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给你一个串,求出出现次数最多的长度为i(属于[1,|S|])的字串,输出它的出现次数</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li>每个节点的endpos集合就是它自己代表的子串在串中出现的次数,然后以这个子串为后缀的更长的串出现的位置通过拓扑排序累加上来了,<strong>存到了r[i]中表示这个节点代表的子串在整个串中所有出现的位置总个数！&lt;==&gt;节点i代表的字串的出现次数</strong>,所以r[i]和F[len[i]]用max维护就行了</li><li>然后拓扑排序可以用基数排序来操作，SAM中常用(不用怕，我注释很多)</li><li>因为长度较短的串的F[i]值维护出来之后有可能是比F[i+1]小的，这样的话最优策略是取i+1长的串的后i长的串，这样F[i]值能变大，所以f[i] = max(F[i],F[i+1])</li></ul><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">250010</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> r[N&lt;&lt;<span class="number">1</span>],id[N&lt;&lt;<span class="number">1</span>],b[N],F[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sam</span>&#123;</span></span><br><span class="line">    <span class="comment">// 注意N是题目给的n的两倍,因为节点数最多有2*n-1个</span></span><br><span class="line">    <span class="keyword">int</span> p,q,np,nq,cnt,last,a[N&lt;&lt;<span class="number">1</span>][<span class="number">26</span>],l[N&lt;&lt;<span class="number">1</span>],f[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    sam()&#123;cnt=<span class="number">0</span>;last=++cnt;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cnt=<span class="number">0</span>;last=++cnt;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(l,<span class="number">0</span>,<span class="keyword">sizeof</span>(l));</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        p=last;np=last=++cnt;l[np]=l[p]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!a[p][c]&amp;&amp;p)a[p][c]=np,p=f[p];</span><br><span class="line">        <span class="keyword">if</span>(!p)f[np]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            q=a[p][c];</span><br><span class="line">            <span class="keyword">if</span>(l[p]+<span class="number">1</span>==l[q])f[np]=q;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    nq=++cnt;l[nq]=l[p]+<span class="number">1</span>;</span><br><span class="line">                    <span class="built_in">memcpy</span>(a[nq],a[q],<span class="keyword">sizeof</span>(a[q]));</span><br><span class="line">                    f[nq]=f[q]; f[np]=f[q]=nq;</span><br><span class="line">                    <span class="keyword">while</span>(a[p][c]==q)a[p][c]=nq,p=f[p];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)extend(s[i]-<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给主链的right值先+1.因为他们都是叶子节点(从构造算法就可以看出来,虽然这个性质我做了这个题才知道)</span></span><br><span class="line">        <span class="comment">// 源点就是1号节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">1</span>,i=<span class="number">0</span>;i&lt;n;i++) p=a[p][s[i]-<span class="string">'a'</span>],r[p]++;</span><br><span class="line">        <span class="comment">// 按照len[x]从小到大基数排序，相当于对SAM图进行拓扑排序(源点也是加入排序的)</span></span><br><span class="line">        <span class="comment">// 第一for先按照长度计数，然后第二for再对长度赋予排名，最后第三for让节点长度排名对应于节点</span></span><br><span class="line">        <span class="comment">// 同长度下，先出现的节点排名大(数值小)--&gt;这个没有多大关系,因为同长度的必定不在同一条拓扑链上</span></span><br><span class="line">        <span class="comment">// 因为从源点出发的每一条链的长度都是递增的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) b[l[i]]++;</span><br><span class="line">        <span class="comment">// 下面的for的i表示的是长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) b[i]+=b[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) id[b[l[i]]--]=i;</span><br><span class="line">        <span class="comment">// 从后往前for,自底向上更新parent的right大小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt;i&gt;=<span class="number">1</span>;i--) r[f[id[i]]]+=r[id[i]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新答案</span></span><br><span class="line">        <span class="comment">// 每个节点的endpos集合就是它自己代表的子串在串中出现的次数</span></span><br><span class="line">        <span class="comment">// 然后以这个子串为后缀的更长的串出现的位置通过拓扑排序累加上来了,</span></span><br><span class="line">        <span class="comment">// 存到了r[i]中表示这个节点代表的子串在整个串中所有出现的位置！&lt;==&gt;出现次数</span></span><br><span class="line">        <span class="comment">// 所以r[i]和F[len[i]]用max维护就行了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) F[l[i]]=max(F[l[i]],r[i]);</span><br><span class="line">        <span class="comment">// 因为长度较短的串的F[i]值有可能是比F[i+1]小的，这样的话最优策略是取i+1长的串的后i长</span></span><br><span class="line">        <span class="comment">// 所以f[i] = max(F[i],F[i+1])</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--) F[i]=max(F[i],F[i+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,F[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sam;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sam.solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>有时候状态差，但你不能放弃，因为算法不经历撕心裂肺的思考和试错，是没有生命力的</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Next-Gemini主题透明化以及背景图片的更改和获取</title>
    <url>/Hexo-Next-Gemini%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E5%8C%96%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E7%9A%84%E6%9B%B4%E6%94%B9/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="背景图片的更改"><a href="#背景图片的更改" class="headerlink" title="背景图片的更改"></a>背景图片的更改</h1><h2 id="自动变化背景图片或者固定背景图"><a href="#自动变化背景图片或者固定背景图" class="headerlink" title="自动变化背景图片或者固定背景图"></a>自动变化背景图片或者固定背景图</h2><p>找到路径下的custom.styl文件：<br>hexo/themes/next/source/css/_custom/<br>在该文件中加入如下代码(其实next中有这个代码，只是开发团队默认注释掉了)</p><p><strong>自动背景使用的是unsplash.com提供的API链接，感谢</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">1200px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        background-image:url(https://source.unsplash.com/random/1600x900);      //这一行的括号里填背景图片的路径，将图片重命名为background.jpg放在\themes\next\source\images下</span><br><span class="line">        // background-image:url(/images/background.jpg);      //这一行的括号里填背景图片的路径，将图片重命名为background.jpg放在\themes\next\source\images下</span><br><span class="line">        <span class="selector-tag">background-repeat</span>: <span class="selector-tag">no-repeat</span>;</span><br><span class="line">        <span class="selector-tag">background-attachment</span><span class="selector-pseudo">:fixed</span>;</span><br><span class="line">        <span class="selector-tag">background-position</span><span class="selector-pseudo">:50</span>% 50%;</span><br><span class="line">        <span class="selector-tag">background-size</span><span class="selector-pseudo">:100</span>% 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-id">#footer</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">coler</span>: <span class="number">#eee</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码注解"><a href="#代码注解" class="headerlink" title="代码注解"></a>代码注解</h2><ul><li>background:url为图片路径，也可以直接使用链接</li><li>background-repeat：若果背景图片不能全屏，那么是否平铺显示，充满屏幕</li><li>background-attachment：背景是否随着网页上下滚动而滚动，fixed为固定</li><li>background-position：就是调整图片的位置</li><li>background-size：图片展示大小，这里设置100% 100%的意义为：如果背景图片不能全屏，那么是否通过拉伸的方式将背景强制拉伸至全屏显示。(<strong>让背景图铺满整个页面，<del>简直就是强迫症的解药啊!!!</del></strong>)</li><li>若使用固定图片，那么要将<strong>图片重命名为background.jpg</strong>放在\themes\next\source\images下(<del>说实话，小编一开始不知道要重命名成background，写文章的时候才发现，写文章还是有用呀</del>)</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果很在意网站打开速度的话，不建议使用特别大的背景图片或者是自动变化的背景，因为网站会由于图片太大会拖慢整个网站的载入速度!!</p><h1 id="Gemini主题透明化"><a href="#Gemini主题透明化" class="headerlink" title="Gemini主题透明化"></a>Gemini主题透明化</h1><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>Q:为什么要修改Pisces中的文件？</p><p>A:因为Gemini文件导入了Pisces文件夹中的4个文件</p><h2 id="内容板块透明"><a href="#内容板块透明" class="headerlink" title="内容板块透明"></a>内容板块透明</h2><ol><li>博客根目录 themes\next\source\css_schemes\Pisces_layout.styl 文件 .content-wrap 标签下 background: white修改为：<br><code>background: rgba(255,255,255,0.7); //0.7是透明度</code></li><li>博客根目录 themes\next\source\css_schemes\Gemini\index.styl文件 .post-block 标签下的 background: white修改为：<br><code>background: rgba(255,255,255,0.7); //0.7是透明度</code></li></ol><h2 id="分页-主页最下面的那一小块"><a href="#分页-主页最下面的那一小块" class="headerlink" title="分页(主页最下面的那一小块)"></a>分页(主页最下面的那一小块)</h2><p>博客根目录 themes\next\source\css_schemes\Gemini\index.styl 文件 .pagination 标签下的 background: white修改为：<br><code>background: rgba(255,255,255,0.7); //0.7是透明度</code></p><h2 id="菜单栏背景"><a href="#菜单栏背景" class="headerlink" title="菜单栏背景"></a>菜单栏背景</h2><ol><li>博客根目录 themes\next\source\css_schemes\Pisces_layout.styl 文件 .header-inner 标签下 background: white修改为：<br><code>background: rgba(255,255,255,0.7); //0.7是透明度</code></li><li>博客根目录 themes\next\source\css_schemes\Pisces_sidebar.styl 文件 .sidebar 标签下 增加一行:<br><code>opacity: 0.7; // 0.7透明度自己选择</code></li></ol><h2 id="站点概况背景"><a href="#站点概况背景" class="headerlink" title="站点概况背景"></a>站点概况背景</h2><ol><li>博客根目录 themes\next\source\css_schemes\Pisces_sidebar.styl 文件 .sidebar-inner 标签下 background: white修改为：<br><code>background: rgba(255,255,255,0.7); //0.7是透明度</code></li><li>然后修改博客根目录 themes\next\source\css_schemes\Pisces_layout.styl 文件 .sidebar 标签下 background: $body-bg-color修改为：<br><code>background: rgba(255,255,255,0.7); //0.7是透明度</code></li></ol><h2 id="评论区背景"><a href="#评论区背景" class="headerlink" title="评论区背景"></a>评论区背景</h2><ol><li>博客根目录 themes\next\source\css_schemes\Gemini\index.styl文件 .comments 标签下的 background: white修改为：<br><code>background: rgba(255,255,255,0.7); //0.7是透明度</code></li></ol><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE/%E6%95%88%E6%9E%9C%E5%9B%BE1.png" data-fancybox="images" target="_blank" rel="noopener noreferrer"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE/%E6%95%88%E6%9E%9C%E5%9B%BE1.png" width="50%" height="50%" target="_blank"></a><br><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE/%E6%95%88%E6%9E%9C%E5%9B%BE.png" data-fancybox="images" target="_blank" rel="noopener noreferrer"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE/%E6%95%88%E6%9E%9C%E5%9B%BE.png" width="50%" height="50%" target="_blank"></a><br><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE/%E6%95%88%E6%9E%9C%E5%9B%BE2.png" data-fancybox="images" target="_blank" rel="noopener noreferrer"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE/%E6%95%88%E6%9E%9C%E5%9B%BE2.png" width="50%" height="50%" target="_blank"></a></p><h1 id="看到精美背景想要保存？"><a href="#看到精美背景想要保存？" class="headerlink" title="看到精美背景想要保存？"></a>看到精美背景想要保存？</h1><h2 id="比如我看到了这张背景和我的3D雪花特效的叠加效果简直惊艳"><a href="#比如我看到了这张背景和我的3D雪花特效的叠加效果简直惊艳" class="headerlink" title="比如我看到了这张背景和我的3D雪花特效的叠加效果简直惊艳"></a>比如我看到了这张背景和我的3D雪花特效的叠加效果简直惊艳</h2><p><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE/%E6%95%88%E6%9E%9C%E5%9B%BE3%E7%95%99%E5%BD%B1%E4%BD%86%E6%9A%82%E6%9C%AA%E5%B1%95%E7%A4%BA.png" data-fancybox="images" target="_blank" rel="noopener noreferrer"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE/%E6%95%88%E6%9E%9C%E5%9B%BE3%E7%95%99%E5%BD%B1%E4%BD%86%E6%9A%82%E6%9C%AA%E5%B1%95%E7%A4%BA.png" width="50%" height="50%" target="_blank"></a></p><h2 id="好，我教你啊！"><a href="#好，我教你啊！" class="headerlink" title="好，我教你啊！"></a>好，我教你啊！</h2><ol><li>按F12进入开发者，<strong>然后移动开发者模块和页面之间的分隔线让页面宽度变大到显示背景图</strong>(因为之前设置中设置了只有达到一定宽度才会显示图片)</li><li>在source栏目下找到image.unsplash文件夹下的图id,当然可以立马保存啦(操作详见下图)</li></ol><p><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE/%E5%A6%82%E4%BD%95%E4%BF%9D%E5%AD%98%E6%9C%AC%E7%AB%99%E7%9C%8B%E5%88%B0%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%9A%84random%E7%85%A7%E7%89%87.png" data-fancybox="images" target="_blank" rel="noopener noreferrer"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE/%E5%A6%82%E4%BD%95%E4%BF%9D%E5%AD%98%E6%9C%AC%E7%AB%99%E7%9C%8B%E5%88%B0%E7%9A%84%E7%B2%BE%E7%BE%8E%E7%9A%84random%E7%85%A7%E7%89%87.png" width="50%" height="50%" target="_blank"></a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://wiki.johnhao.tech/%E7%BB%99Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/" target="_blank" rel="noopener">大佬-http://wiki.johnhao.tech</a><br><a href="https://www.jianshu.com/p/30bf702f533c" target="_blank" rel="noopener">大佬-芒果浩明</a><br><a href="https://zhuanlan.zhihu.com/p/30836436" target="_blank" rel="noopener">大佬-路人S</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>SPOJ-LCS,SPOJ-LCS2-后缀自动机SAM专题训练_算法日常[20/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-20-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="LCS"><a href="#LCS" class="headerlink" title="LCS"></a>LCS</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://vjudge.net/problem/SPOJ-LCS" target="_blank" rel="noopener">VJ上的LCS</a><br><a href="https://www.spoj.com/problems/LCS/en/" target="_blank" rel="noopener">spoj上的LCS</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你两个串，求两个串的最长公共字串</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>大佬:<br>对A建后缀自动机，然后用B去匹配，若能匹配上就转移到儿子，否则沿着parent树向上跳</p><p>我的补充:<br>先看当下B串中新加的字符x是否能通过上次匹配的后缀来转移，如果能转移就直接加，<br>否则就要跳到fa树上去匹配更短endpos为p的后缀(为了找到新加入的字符x的转移)，<br>然后在匹配到之后就是匹配到的长度+1(要加上刚进入的x字符的一个长度)</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">250010</span>;</span><br><span class="line"><span class="keyword">char</span> s1[N],s2[N];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sam</span>&#123;</span></span><br><span class="line">    <span class="comment">// 注意N是题目给的n的两倍,因为节点数最多有2*n-1个</span></span><br><span class="line">      <span class="keyword">int</span> p,q,np,nq,cnt,last,a[N&lt;&lt;<span class="number">1</span>][<span class="number">26</span>],l[N&lt;&lt;<span class="number">1</span>],f[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">      sam()&#123;cnt=<span class="number">0</span>;last=++cnt;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">          cnt=<span class="number">0</span>;last=++cnt;</span><br><span class="line">          <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">          <span class="built_in">memset</span>(l,<span class="number">0</span>,<span class="keyword">sizeof</span>(l));</span><br><span class="line">          <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">            p=last;np=last=++cnt;l[np]=l[p]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(!a[p][c]&amp;&amp;p)a[p][c]=np,p=f[p];</span><br><span class="line">            <span class="keyword">if</span>(!p)f[np]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                  q=a[p][c];</span><br><span class="line">                  <span class="keyword">if</span>(l[p]+<span class="number">1</span>==l[q])f[np]=q;</span><br><span class="line">                  <span class="keyword">else</span>&#123;</span><br><span class="line">                        nq=++cnt;l[nq]=l[p]+<span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">memcpy</span>(a[nq],a[q],<span class="keyword">sizeof</span>(a[q]));</span><br><span class="line">                        f[nq]=f[q]; f[np]=f[q]=nq;</span><br><span class="line">                        <span class="keyword">while</span>(a[p][c]==q)a[p][c]=nq,p=f[p];</span><br><span class="line">                  &#125;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">          init();</span><br><span class="line">          <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s1);<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s2);</span><br><span class="line">          <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s1);</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)extend(s1[i]-<span class="string">'a'</span>);</span><br><span class="line">          ans = <span class="number">0</span>;n=<span class="built_in">strlen</span>(s2);</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,p=<span class="number">1</span>,tp=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = s2[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[p][x]) tp++,p = a[p][x];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(;p&amp;&amp;!a[p][x];p=f[p]);</span><br><span class="line">                <span class="keyword">if</span>(!p) tp=<span class="number">0</span>,p=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> tp = l[p] + <span class="number">1</span>,p = a[p][x];</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans,tp);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans );</span><br><span class="line">      &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sam.solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LCS2"><a href="#LCS2" class="headerlink" title="LCS2"></a>LCS2</h1><h2 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://vjudge.net/problem/SPOJ-LCS2" target="_blank" rel="noopener">VJ上的LCS2</a><br><a href="https://www.spoj.com/problems/LCS2/" target="_blank" rel="noopener">spoj上的LCS2</a></p><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给你多个串，求他们的最长公共字串</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p><a href="https://www.cnblogs.com/mjtcn/p/9335863.html" target="_blank" rel="noopener">超级感谢大佬的博文</a></p><p>大佬的想法(果然就是多种值维护一下,但是我竟然没有勇气想下去…-&gt;弱鸡下次勇敢点):</p><p>poj2774或者就是LCS那道题，对一个串建立后缀自动机，另一个在上面匹配。</p><p>(<strong>下面的方法一在代码中有详细注释，建议复制代码后结合起来看</strong>)<br>这道题是对多个串求。那么同样，让每个串在后缀自动机上匹配，然后记录在后缀自动机的每个节点上记录，当前串在这个位置和第一个串的最大匹配数，h数组。</p><p>然后mn数组，每次对于这所有的节点的h取小，为从第2个串到现在所有的串，都能在这个节点上匹配的长度。</p><p>因为一旦某个节点匹配上了，那么它的父节点（parent树）的父节点都会匹配上（因为父节点是当前点的后缀），<br>所以按拓扑倒序，更新父节点的h，为父节点的len，（即最大长度）。</p><p>第二种写法是对n-1个字符串建立SAM，然后用最后一个串在n-1个串上匹配，每个自动机上都有一个当前的指针cur，当前答案ans。对最后一个串从头开始扫，求出最后一个串和每个串以当前字符结尾的最大匹配长度，在这里面取小，每次加入一个字符，可以直接判断cur的下一位，不需要从头开始。空间太大。</p><p></p><p>总结:两种写法大同小异，只枚举举的顺序不同而已。</p><p>其实方法更简洁，更容易看懂，比解法一的缺点是多花了很多空间</p><h2 id="方法一AC代码"><a href="#方法一AC代码" class="headerlink" title="方法一AC代码"></a>方法一AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一 80ms 25.6MB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar())<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;<span class="built_in">isdigit</span>(ch);ch=getchar())x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Suffix_Automaton</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fa[N&lt;&lt;<span class="number">1</span>], trans[N&lt;&lt;<span class="number">1</span>][<span class="number">26</span>], len[N&lt;&lt;<span class="number">1</span>], Last, Index;</span><br><span class="line">    <span class="keyword">int</span> v[N], sa[N&lt;&lt;<span class="number">1</span>], mn[N&lt;&lt;<span class="number">1</span>], h[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> P = Last,NP = ++Index;</span><br><span class="line">        len[NP] = len[P] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; P&amp;&amp;!trans[P][c]; P=fa[P]) trans[P][c] = NP;</span><br><span class="line">        <span class="keyword">if</span> (!P) fa[NP] = <span class="number">1</span>; <span class="comment">//-</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> Q = trans[P][c];</span><br><span class="line">            <span class="keyword">if</span> (len[P] + <span class="number">1</span> == len[Q]) fa[NP] = Q;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> NQ = ++Index;</span><br><span class="line">                fa[NQ] = fa[Q];</span><br><span class="line">                len[NQ] = len[P] + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">memcpy</span>(trans[NQ], trans[Q], <span class="keyword">sizeof</span> trans[Q]);</span><br><span class="line">                fa[Q] = NQ;</span><br><span class="line">                fa[NP] = NQ;</span><br><span class="line">                <span class="keyword">for</span> (; P&amp;&amp;trans[P][c]==Q; P=fa[P]) trans[P][c] = NQ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Last = NP;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Last = Index = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) extend(s[i] - <span class="string">'a'</span>);</span><br><span class="line">        <span class="comment">// index和第一个串s1的下标大致是对应的，但是中间还有克隆的节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=Index; ++i) v[len[i]] ++;</span><br><span class="line">        <span class="comment">// 确实是只有n种长度..前缀的后缀--&gt;所有的串--&gt;所以只用n</span></span><br><span class="line">        <span class="comment">// 这里求前缀和只是为了下面能够求出排名数组,让他们按照深度占比权值(有点像权值线段树的那种)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) v[i] += v[i<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">// sa[i] 排名为i的节点。按深度排名（拓扑用）</span></span><br><span class="line">        <span class="comment">// i号节点按照它的len在v中前缀和减减---&gt;其实就是排名,按照节点的长度(也就是深度)---&gt;因为越深越长</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=Index; ++i) sa[ v[len[i]]-- ] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calcc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s+<span class="number">1</span>), now = <span class="number">0</span>, p = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(h, <span class="number">0</span>, <span class="keyword">sizeof</span>(h));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (trans[p][c]) p = trans[p][c], now ++;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (; p&amp;&amp;!trans[p][c]; p=fa[p]);</span><br><span class="line">                <span class="keyword">if</span> (!p) now = <span class="number">0</span>, p = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> now = len[p] + <span class="number">1</span>, p = trans[p][c];</span><br><span class="line">            &#125;</span><br><span class="line">            h[p] = max(h[p], now);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拓扑倒序，parent树中从深度深的到浅的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=Index; i&gt;=<span class="number">1</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = sa[i];</span><br><span class="line">            mn[t] = min(mn[t], h[t]);</span><br><span class="line">            <span class="comment">// t节点有匹配,并且它的父节点(后缀link)不为源点---&gt;那么让它的父节点的匹配值等于父节点的长度</span></span><br><span class="line">            <span class="comment">// 因为前面的操作是对最长的适配，所以没有管较短串的匹配,所以这里管一下</span></span><br><span class="line">            <span class="comment">// 但是为什么只对父节点，而不对更爷爷节点什么的呢，因为这个拓扑排序从底部向上，所以父节点在之后会出现</span></span><br><span class="line">            <span class="comment">// 所以爷爷节点由后面出现的父节点去管理就行了 ====》 太精妙了，amazing！</span></span><br><span class="line">            <span class="keyword">if</span> (h[t] &amp;&amp; fa[t]) h[fa[t]] = len[fa[t]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        build();</span><br><span class="line">        <span class="built_in">memset</span>(mn, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(mn));</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>) != EOF) calcc();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=Index; ++i) ans = max(ans, mn[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sam.solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法二AC代码"><a href="#方法二AC代码" class="headerlink" title="方法二AC代码"></a>方法二AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法二---N-1个自动机 130ms 175.1MB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar())<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;<span class="built_in">isdigit</span>(ch);ch=getchar())x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SuffixAutomaton</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Last, Index, res, cur, fa[N], trans[N][<span class="number">26</span>], len[N];</span><br><span class="line">    SuffixAutomaton() &#123;Last = Index = cur = <span class="number">1</span>; res = <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> P = Last, NP = ++Index;</span><br><span class="line">        len[NP] = len[P] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; P&amp;&amp;!trans[P][c]; P=fa[P]) trans[P][c] = NP;</span><br><span class="line">        <span class="keyword">if</span> (!P) fa[NP] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> Q = trans[P][c];</span><br><span class="line">            <span class="keyword">if</span> (len[P] + <span class="number">1</span> == len[Q]) fa[NP] = Q;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> NQ = ++Index;</span><br><span class="line">                fa[NQ] = fa[Q];</span><br><span class="line">                len[NQ] = len[P] + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">memcpy</span>(trans[NQ], trans[Q], <span class="keyword">sizeof</span> trans[Q]);</span><br><span class="line">                fa[Q] = NQ;</span><br><span class="line">                fa[NP] = NQ;</span><br><span class="line">                <span class="keyword">for</span> (; P&amp;&amp;trans[P][c]==Q; P=fa[P]) trans[P][c] = NQ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Last = NP;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (trans[cur][c]) &#123;cur = trans[cur][c]; res++; <span class="keyword">return</span> res;&#125;</span><br><span class="line">        <span class="keyword">for</span> (; cur&amp;&amp;!trans[cur][c]; cur=fa[cur]);</span><br><span class="line">        <span class="keyword">if</span> (!cur) res = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> res = len[cur] + <span class="number">1</span>, cur = trans[cur][c];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">char</span> str[N&gt;&gt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>,t = <span class="number">0</span>,len;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>)!=EOF) &#123;</span><br><span class="line">        len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len; ++i)</span><br><span class="line">            sam[t].extend(s[i] - <span class="string">'a'</span>);</span><br><span class="line">        t ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    len = <span class="built_in">strlen</span>(str+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;t; ++j)</span><br><span class="line">            tmp = min(tmp, sam[j].solve(str[i] - <span class="string">'a'</span>));</span><br><span class="line">        ans = max(ans, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>没有自闭，何来爆爽！向自闭的日子致敬！</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第19周[19/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC19%E5%91%A8-19-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.8/2019.8.30" target="_blank" rel="noopener">这段时间生活有点动荡，刷得题就少了</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://onezero.medium.com/the-huawei-sanction-might-just-pop-the-tech-bubble-f7e800e3174" target="_blank" rel="noopener">The Huawei Sanction Might Just Pop the Tech Bubble</a><br>对华为的制裁应该不会引发这个外国科技大佬所说的互联网圈泡沫，但是下跌确实是很可能，所以科技界的朋友们也要赶紧学会华为的危机意识—永远为”冬天”和”黑天鹅事件”做准备</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.luogu.org/blog/Kesdiael3/hou-zhui-zi-dong-ji-yang-xie" target="_blank" rel="noopener">后缀数组学习资料</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-19-100/">SAM后缀自动机学习路线</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>SAM后缀自动机学习路线_算法日常[19/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-19-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="学习路径推荐"><a href="#学习路径推荐" class="headerlink" title="学习路径推荐"></a>学习路径推荐</h1><p>网上有很多的学习SAM的资料，但是很多资料写得比较全面，导致一开始看可能看不懂(<del>可能只是因为博主自己比较菜</del>)，然后博主自己整理了一个学习路线，希望对大家有点帮助</p><ol><li><a href="http://hihocoder.com/problemset/problem/1441" target="_blank" rel="noopener">简介版本的SAM</a></li><li><a href="https://oi-wiki.org/string/sam/" target="_blank" rel="noopener">比较全面的SAM版本</a><ul><li>个人感觉这里的后缀链接初次看有点难懂</li><li>还有那个算法的思路也会有点懵逼，懵逼的话建议可以先看紧接在下面的<code>算法正确性证明</code>，不然很容易自闭</li><li>建议先看<code>简介版本的SAM</code>的后缀链接的介绍先然后再来看这个比较好_大佬请无视</li></ul></li><li><a href="https://www.cnblogs.com/zinthos/p/3899679.html?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">经典题集</a></li></ol><hr><p>2019年9月5日14:21:10 补充，建议参考链接增加以及自己学习历程的一些心得</p><ul><li>增加的参考链接: <a href="https://www.luogu.org/blog/Kesdiael3/hou-zhui-zi-dong-ji-yang-xie" target="_blank" rel="noopener">史上最通俗的后缀自动机详解</a></li><li>学习历程: 我比较菜，所以断断续续地看了5天(主要是看不懂然后就总发呆…(雾))，然后第6天重新看了一遍oi-wiki的教程，发现自己看得懂了！(得益于前几天不断地看简介版和通俗易懂版的，让自己重新看的时候感觉许多都会，然后就有了一个比较全面的认识，然后就终于看懂了SAM算法，自闭6天后要不要这么爽)</li><li>学习心得:<ul><li>找一个安静的环境，让自己能够保持专注</li><li>抽出一整块的时间来看SAM专题</li><li>一次没有看懂没关系，反复看，找各种不同的资料看</li><li>手动笔记，写写画画</li><li>最终总结出自己的笔记</li></ul></li><li>避坑提醒: oi-wiki给的板子中用的是map映射的next，<strong>建议改成<code>int next[符号集大小]</code></strong>，因为我做题时map，unordered_map都TLE了…</li></ul><hr><h1 id="送一个bug-free的注释"><a href="#送一个bug-free的注释" class="headerlink" title="送一个bug_free的注释"></a>送一个bug_free的注释</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *　　　　　　　 ┏┓　 ┏┓+ +</span></span><br><span class="line"><span class="comment"> *　　　　　　　┏┛┻━━━┛┻┓ + +</span></span><br><span class="line"><span class="comment"> *　　　　　　　┃　　　 ┃ 　</span></span><br><span class="line"><span class="comment"> *　　　　　　　┃　　　 ┃ ++ + + +</span></span><br><span class="line"><span class="comment"> *　　　　　　 ████━████┃+</span></span><br><span class="line"><span class="comment"> *　　　　　　　┃　　　 ┃ +</span></span><br><span class="line"><span class="comment"> *　　　　　　　┃　┻　　┃</span></span><br><span class="line"><span class="comment"> *　　　　　　　┃　　　 ┃ + +</span></span><br><span class="line"><span class="comment"> *　　　　　　　┗━┓　 ┏━┛</span></span><br><span class="line"><span class="comment"> *　　　　　　　　┃　 ┃　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　┃　 ┃ + + + +</span></span><br><span class="line"><span class="comment"> *　　　　　　　　┃　 ┃　　　　Code is far away from bug with the animal protecting　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　┃　 ┃ + 　　　　神兽保佑,代码无bug　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　┃　 ┃</span></span><br><span class="line"><span class="comment"> *　　　　　　　　┃　 ┃　　+　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　┃　 ┗━━━┓ + +</span></span><br><span class="line"><span class="comment"> *　　　　　　　　┃  　　 ┣┓</span></span><br><span class="line"><span class="comment"> *　　　　　　　　┃  　　 ┏┛</span></span><br><span class="line"><span class="comment"> *　　　　　　　　┗┓┓┏━┳┓┏┛ + + + +</span></span><br><span class="line"><span class="comment"> *　　　　　　　　 ┃┫┫ ┃┫┫</span></span><br><span class="line"><span class="comment"> *　　　　　　　　 ┗┻┛ ┗┻┛+ + + +</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"厉Hello World哥!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><a href="https://www.xinpianchang.com/a10477709" target="_blank" rel="noopener">生活或许很苦，但我偏要酷</a></p><p><strong>认清生活的残酷然后依旧挣扎着往上爬，致平凡世界里的英雄们！</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>后缀数组</tag>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第18周[18/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC18%E5%91%A8-18-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.8/2019.8.22" target="_blank" rel="noopener">后缀数组自学并题目训练</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/@zdravko/13-things-you-need-to-give-up-if-you-want-to-be-successful-44b5b9b06a26" target="_blank" rel="noopener">13 Things You Should Give Up If You Want To Be Successful</a></p><h2 id="Give-Up-On-Saying-YES-To-Things-That-Don’t-Support-Your-Goals"><a href="#Give-Up-On-Saying-YES-To-Things-That-Don’t-Support-Your-Goals" class="headerlink" title="Give Up On Saying YES To Things That Don’t Support Your Goals"></a>Give Up On Saying YES To Things That Don’t Support Your Goals</h2><p>Successful people know that in order to accomplish their goals, they will have to say NO to certain tasks, activities, and demands from their friends, family, and colleagues.<br>In the short-term, you might sacrifice a bit of instant gratification, but when your goals come to fruition, it will all be worth it.</p><p>是的，这也是杜月笙先生教给我的事情，成功需要代价</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.xinpianchang.com/a10477709" target="_blank" rel="noopener">生活很苦，我偏要酷</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-14-100/">2019杭电多校9题解_算法日常[14/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-15-100/">后缀数组学习路径以及后缀数组板子推送_算法日常[15/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-16-100/">后缀数组基础题poj1743详解_算法日常[16/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-17-100/">HDU5008详解<em>后缀数组</em>二分<em>RMQ</em>算法日常[17/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-18-100/">2019CCPC网络预选赛1003题解_算法日常[18/100]</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>2019CCPC网络预选赛1003 K-th occurrence 题解_算法日常[18/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-18-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="K-th-occurrence"><a href="#K-th-occurrence" class="headerlink" title="K-th occurrence"></a>K-th occurrence</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://vjudge.net/problem/HDU-6704" target="_blank" rel="noopener">VJ上面</a><br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6704" target="_blank" rel="noopener">HDOJ上面</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="解法一SAM解法"><a href="#解法一SAM解法" class="headerlink" title="解法一SAM解法"></a>解法一SAM解法</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/2019CCPC%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/1003an.png" alt></p><hr><p>2019年9月4日19:24:25 补充，不好意思，博主太菜了，补SAM补了6天才看懂，现在第7天才看懂SAM的写法，所以补充一下</p><ol><li>对于题解中说的倍增数组就是代码中的Fa数组，构造极其精巧，建议看一下解法一注释版的代码</li><li>关于权值线段树(就是题解中说的给每种前缀设置一种权值)，其实就是建立线段树的时候，让主席树的每个点都有个权值，这样就可以在询问的时候方便的找到第k大了(具体见代码)</li></ol><hr><h3 id="解法二SA解法"><a href="#解法二SA解法" class="headerlink" title="解法二SA解法"></a>解法二SA解法</h3><p>ST表维护下 后缀排序后的公共长度 的最小值，然后二分找出左右符合的位置，主席树维护下排序后的序列，然后主席树查询第k大即可</p><hr><p>2019年8月27日19:23:14 补充(代码也补充为注释版)(<strong>发现写blog的时候自己的理解确实有明显加深!所以还是要坚持写blog,推荐大家也可以写点博客啥的</strong>)</p><hr><p>我们想要找到所有的字串s的第k个，就要找到所有字串出现的位置，用后缀数组去找的方法就是使用后缀的最长公共前缀长度相同来实现寻找，即找到height数组的一段连续区间的最小值都要是s的长度(当然前缀是s),这里可以用二分区间查找st表版本的rmq信息来确定最终的左右区间，然后再用可持久化线段树来找到这个排名区间里的第k个起始位置(之前建立可持久化线段树的时候就<strong>通过位置信息让每个rank字串在前一个rank字串所建立的线段树树上(最初为空树)新建一条分支树</strong>),rank1字串对应于版本1的主席树(可持久化线段树)，rank2字串对应于版本2的主席树，然后我们询问rank区间[l,r]的时候，就是直接用版本[l,r]的主席树的节点数差来看这里面的字串数是否达到了k个(之前已经保证了前缀相同)，是则继续访问左子树第k大，否则访问右子树第<code>k-左边的个数</code>大(<strong>可以注意到我们左右子树和位置的[l,mid],[mid+1,r]在建树的时候是假定了空间映射关系的!</strong>),这样就可以找到对应位置了</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><h3 id="解法一SAM解法-1"><a href="#解法一SAM解法-1" class="headerlink" title="解法一SAM解法"></a>解法一SAM解法</h3><p>感谢CSU一个大佬提供代码<br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> T[<span class="number">200010</span>][<span class="number">30</span>],fa[<span class="number">200010</span>],len[<span class="number">200010</span>],cnt,last,n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,p=last,np,q,nq;</span><br><span class="line">    last=np=++cnt;</span><br><span class="line">    len[np]=len[p]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;p&amp;&amp;T[p][v]==<span class="number">0</span>;p=fa[p]) T[p][v]=np;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>) fa[np]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        q=T[p][v];</span><br><span class="line">        <span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>) fa[np]=q;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            nq=++cnt;</span><br><span class="line">            len[nq]=len[p]+<span class="number">1</span>;</span><br><span class="line">            fa[nq]=fa[q];</span><br><span class="line">            fa[q]=fa[np]=nq;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">27</span>;i++) T[nq][i]=T[q][i];</span><br><span class="line">            <span class="keyword">for</span>(;T[p][v]==q;p=fa[p]) T[p][v]=nq;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> root[<span class="number">200010</span>],num;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> L,R,sum;</span><br><span class="line">&#125;A[<span class="number">8000000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    A[++num]=A[x];</span><br><span class="line">    x=num;</span><br><span class="line">    A[x].sum++;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=mid) update(A[x].L,l,mid,k,v);</span><br><span class="line">    <span class="keyword">else</span> update(A[x].R,mid+<span class="number">1</span>,r,k,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mer</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>||b==<span class="number">0</span>) <span class="keyword">return</span> a+b;</span><br><span class="line">    <span class="keyword">int</span> z=++num,mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">         A[z].sum=A[a].sum|A[b].sum;</span><br><span class="line">         <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    A[z].L=mer(A[a].L,A[b].L,l,mid);</span><br><span class="line">    A[z].R=mer(A[a].R,A[b].R,mid+<span class="number">1</span>,r);</span><br><span class="line">    A[z].sum=A[A[z].L].sum+A[A[z].R].sum;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qkth</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=A[A[x].L].sum) <span class="keyword">return</span> qkth(A[x].L,l,mid,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> qkth(A[x].R,mid+<span class="number">1</span>,r,k-A[A[x].L].sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;g[<span class="number">200010</span>];</span><br><span class="line"><span class="keyword">int</span> Fa[<span class="number">200010</span>][<span class="number">25</span>],pos[<span class="number">200010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,v;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">19</span>;i++) Fa[u][i]=Fa[Fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;g[u].size();i++)&#123;</span><br><span class="line">        v=g[u][i];</span><br><span class="line">        Fa[v][<span class="number">0</span>]=u;</span><br><span class="line">        dfs(v);</span><br><span class="line">        root[u]=mer(root[u],root[v],<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,m,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        cnt=last=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(T,<span class="number">0</span>,<span class="keyword">sizeof</span>(T));</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">200000</span>;i++) g[i].clear();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;s[i];i++) build(s[i]-<span class="string">'a'</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cnt;i++) g[fa[i]].push_back(i);</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">1</span>,v;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(root,<span class="number">0</span>,<span class="keyword">sizeof</span>(root));</span><br><span class="line">        A[<span class="number">0</span>].L=A[<span class="number">0</span>].R=A[<span class="number">0</span>].sum=num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;s[i];i++)&#123;</span><br><span class="line">            v=s[i]-<span class="string">'a'</span>;</span><br><span class="line">            p=T[p][v];</span><br><span class="line">            pos[i]=p;</span><br><span class="line">            update(root[p],<span class="number">1</span>,n,i,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l,r,k,u,a;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;a);</span><br><span class="line">            p=pos[r];</span><br><span class="line">            k=r-l+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(len[Fa[p][i]]&gt;=k) p=Fa[p][i];</span><br><span class="line">            <span class="keyword">if</span>(a&gt;A[root[p]].sum) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                u=qkth(root[p],<span class="number">1</span>,n,a);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,u-k+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="SAM解法注释版"><a href="#SAM解法注释版" class="headerlink" title="SAM解法注释版"></a>SAM解法注释版</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2019年9月3日20:44:23 开始看</span></span><br><span class="line"><span class="comment">2019年9月4日11:39:03 再看</span></span><br><span class="line"><span class="comment">主席树+SAM都是刚刚学了一点点皮毛，然后就要接受这种魔鬼题目训练，真是毒打</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">感觉后缀数组用的是各种后缀的前缀，而后缀自动机则是用前缀的后缀比较多，因为endpos就相当于前缀的感觉</span></span><br><span class="line"><span class="comment">后缀数组的LCP(Longest Common Prefix)问题等价于后缀树的最小公共祖先LCA(Least Common Ancestor)问题</span></span><br><span class="line"><span class="comment">前者是后缀的共同前缀，后者是前缀endpos的共同后缀(link)---&gt; 也即sam构成的后缀link树的lca</span></span><br><span class="line"><span class="comment">有一点点的融会贯通的感觉真他妈的爽啊！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">题意:</span></span><br><span class="line"><span class="comment">T组,N次询问,  l,r这个子串的第k次出现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> T[<span class="number">200010</span>][<span class="number">30</span>],fa[<span class="number">200010</span>],len[<span class="number">200010</span>],cnt,last,n;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*这里是建立SAM.大佬的板子真滴简洁..*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,p=last,np,q,nq;</span><br><span class="line">    last=np=++cnt;</span><br><span class="line">    len[np]=len[p]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;p&amp;&amp;T[p][v]==<span class="number">0</span>;p=fa[p]) T[p][v]=np;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>) fa[np]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        q=T[p][v];</span><br><span class="line">        <span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>) fa[np]=q;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            nq=++cnt;</span><br><span class="line">            len[nq]=len[p]+<span class="number">1</span>;</span><br><span class="line">            fa[nq]=fa[q];</span><br><span class="line">            fa[q]=fa[np]=nq;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">27</span>;i++) T[nq][i]=T[q][i];</span><br><span class="line">            <span class="keyword">for</span>(;T[p][v]==q;p=fa[p]) T[p][v]=nq;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*root[i]数组表示的是endpos为i的节点*/</span></span><br><span class="line"><span class="keyword">int</span> root[<span class="number">200010</span>],num;</span><br><span class="line"><span class="comment">/*开了40倍的这里是主席树,若只考虑最大的大小和n次修改,每次log(n)的话,那么其实只要2n-1+nlog(n)就行</span></span><br><span class="line"><span class="comment">也就是只要19e5===&gt;也可以直接n &lt;&lt; 5 ,即(2^5)*n    */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> L,R,sum;</span><br><span class="line">&#125; A[<span class="number">8000000</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pos[i]=p;---&gt; pos数组就是endpos数组,不懂可以参考[oi-wiki/sam](https://oi-wiki.org/string/sam/)</span></span><br><span class="line"><span class="comment">update(root[p],1,n,i,1);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*下面三句话就是1. 获取之前的节点(之前也可能是空节点)信息</span></span><br><span class="line"><span class="comment">    2. 让当前的root[]等于新得到的id(sum)_3.然后在这个id上进行玩耍*/</span></span><br><span class="line">    <span class="comment">/*总体上就是记录一条新建的边上的所有信息,最主要的是维护权值--为了求出第k大*/</span></span><br><span class="line">    <span class="comment">/*我们从递归的角度看进去,发现每个node左右点都是从1开始一直加的，所以这就是权值主席树*/</span></span><br><span class="line">    A[++num]=A[x];</span><br><span class="line">    x=num;</span><br><span class="line">    A[x].sum++;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=mid) update(A[x].L,l,mid,k,v);</span><br><span class="line">    <span class="keyword">else</span> update(A[x].R,mid+<span class="number">1</span>,r,k,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*root[u]=mer(root[u],root[v],1,n);*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mer</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>||b==<span class="number">0</span>) <span class="keyword">return</span> a+b;</span><br><span class="line">    <span class="keyword">int</span> z=++num,mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="comment">/*因为sum要么一样,要么某一个为0,所以用'或'操作*/</span></span><br><span class="line">         A[z].sum=A[a].sum|A[b].sum;</span><br><span class="line">         <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    A[z].L=mer(A[a].L,A[b].L,l,mid);</span><br><span class="line">    A[z].R=mer(A[a].R,A[b].R,mid+<span class="number">1</span>,r);</span><br><span class="line">    A[z].sum=A[A[z].L].sum+A[A[z].R].sum;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">u=qkth(root[p],1,n,a);</span></span><br><span class="line"><span class="comment">printf("%d\n",u-k+1);</span></span><br><span class="line"><span class="comment">返回的是endpos值...也就是返回的是串的右端点...也就是说答案是u-k+1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qkth</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=A[A[x].L].sum) <span class="keyword">return</span> qkth(A[x].L,l,mid,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> qkth(A[x].R,mid+<span class="number">1</span>,r,k-A[A[x].L].sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;g[<span class="number">200010</span>];</span><br><span class="line"><span class="keyword">int</span> Fa[<span class="number">200010</span>][<span class="number">25</span>],pos[<span class="number">200010</span>];</span><br><span class="line"><span class="comment">/*dfs(1)*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,v;</span><br><span class="line">    <span class="comment">/*这里i为什么是&lt;=19?...---&gt;每次插入主席树一条边需要log(n),这题就是约等18左右,开到19是为了保险</span></span><br><span class="line"><span class="comment">    这里的大的Fa不是sam中的fa*/</span></span><br><span class="line">    <span class="comment">/*最最开始这里的初始化都是0,后面就是链状的，用i来dp，真是太巧妙了！</span></span><br><span class="line"><span class="comment">    比如Fa[u][0]=0;Fa[v][0]=u;Fa[w][0]=v.  那么Fa[w][1]=Fa[v][0]=u</span></span><br><span class="line"><span class="comment">    这就是dp叠层数了===&gt; 所以后面使用的时候就直接用Fa[p][i]就行了*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">19</span>;i++) Fa[u][i]=Fa[Fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;g[u].size();i++)&#123;</span><br><span class="line">        v=g[u][i];</span><br><span class="line">        <span class="comment">/*v的直接父亲是u...*/</span></span><br><span class="line">        Fa[v][<span class="number">0</span>]=u;</span><br><span class="line">        dfs(v);</span><br><span class="line">        root[u]=mer(root[u],root[v],<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,m,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        cnt=last=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(T,<span class="number">0</span>,<span class="keyword">sizeof</span>(T));</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">200000</span>;i++) g[i].clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*构建SAM*/</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;s[i];i++) build(s[i]-<span class="string">'a'</span>);</span><br><span class="line">        <span class="comment">/*i的后缀link放入i,也就是g表示源点到终止节点的方向,fa数组的反hash*/</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cnt;i++) g[fa[i]].push_back(i);</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">1</span>,v;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(root,<span class="number">0</span>,<span class="keyword">sizeof</span>(root));</span><br><span class="line">        A[<span class="number">0</span>].L=A[<span class="number">0</span>].R=A[<span class="number">0</span>].sum=num=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*插入构建主席树*/</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;s[i];i++)&#123;</span><br><span class="line">            v=s[i]-<span class="string">'a'</span>;</span><br><span class="line">            <span class="comment">/*p就是转移之后的节点啊，所以就是说每个节点在主席树上都是一棵新树*/</span></span><br><span class="line">            p=T[p][v];</span><br><span class="line">            <span class="comment">/*对，pos就是endpos，转移就是转移到下一个状态*/</span></span><br><span class="line">            pos[i]=p;</span><br><span class="line">            update(root[p],<span class="number">1</span>,n,i,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*前面生成g[]数组的时候,fa[i]最小值就是1,所以dfs(1)就是从源点跑到各个点去,然后合并每个endpos对应的所有后缀...*/</span></span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l,r,k,u,a;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;a);</span><br><span class="line">            <span class="comment">/*获取endpos为r的状态点*/</span></span><br><span class="line">            p=pos[r];</span><br><span class="line">            <span class="comment">/*这里的k竟然是长度...*/</span></span><br><span class="line">            k=r-l+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">/*为啥又是19,这个是哪来的数字！==&gt;难道说是一个log(n)的大小！好像是！</span></span><br><span class="line"><span class="comment">            那么这里的意思应该就是: 找出最短的长度大于要求的字串长的后缀</span></span><br><span class="line"><span class="comment">            然后如果对应的节点的权值不够a(其实就是题中说的k),那么直接输出-1</span></span><br><span class="line"><span class="comment">            否则就去主席树中找出答案，所以dfs(1)应该就是从源点出发找到终止节点之类的操作</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            可得好好研究一下Fa数组的作用! 这里从它的作用来看就是用在了自成一体的fa树！就是</span></span><br><span class="line"><span class="comment">            答案中说的  扒出 parent树 ，然后利用这个来操作...找到这个串位置对应于主席树的位置</span></span><br><span class="line"><span class="comment">            因为之前的fa[]是与主席树没有任何联系的，所以我们需要这个Fa来构建联系</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(len[Fa[p][i]]&gt;=k) p=Fa[p][i];</span><br><span class="line">            <span class="keyword">if</span>(a&gt;A[root[p]].sum) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                u=qkth(root[p],<span class="number">1</span>,n,a);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,u-k+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二SA解法-1"><a href="#解法二SA解法-1" class="headerlink" title="解法二SA解法"></a>解法二SA解法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100100</span>;</span><br><span class="line"><span class="keyword">int</span> t1[N],t2[N],sum[N],rk[N],ht[N],sa[N],str[N];<span class="keyword">char</span> s[<span class="number">100100</span>];</span><br><span class="line"><span class="comment">/*最小19*N,保守(2^5)*N(即N&lt;&lt;5)*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node1</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125; tr[N * <span class="number">22</span>];</span><br><span class="line"><span class="keyword">int</span> f[N][<span class="number">22</span>];</span><br><span class="line"><span class="keyword">int</span> root[N], tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *x=t1,*y=t2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) sum[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) sum[x[i]=str[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++) sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--sum[x[i]]]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p,j=<span class="number">1</span>;p&lt;=n;j&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-j;i&lt;n;i++) y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) sum[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) sum[x[y[i]]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++) sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--sum[x[y[i]]]]=y[i];</span><br><span class="line">        swap(x,y);</span><br><span class="line">        p=<span class="number">1</span>;</span><br><span class="line">        x[sa[<span class="number">0</span>]]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) x[sa[i]]=y[sa[i<span class="number">-1</span>]]==y[sa[i]]&amp;&amp;y[sa[i<span class="number">-1</span>]+j]==y[sa[i]+j]?p<span class="number">-1</span>:p++;</span><br><span class="line">        <span class="keyword">if</span>(p&gt;=n) <span class="keyword">break</span>;</span><br><span class="line">        m=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;n--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) rk[sa[i]]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k)k--;<span class="keyword">else</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j=sa[rk[i]<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>(str[i+k]==str[j+k])k++;</span><br><span class="line">        ht[rk[i]]=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*对ht数组建立st表,这样就能取区间LCP*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i][<span class="number">0</span>] = ht[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">22</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= n; j++)</span><br><span class="line">            f[j][i] = min(f[j][i - <span class="number">1</span>], f[j + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pl, <span class="keyword">int</span> pr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = log2(pr - pl + <span class="number">1.0</span>);</span><br><span class="line">    <span class="keyword">return</span> min(f[pl][t], f[pr - (<span class="number">1</span> &lt;&lt; t) + <span class="number">1</span>][t]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// root[i] = update1(root[i - 1], 1, n, sa[i] + 1);</span></span><br><span class="line"><span class="comment">/*root数组的key是rk,然后值是key对应的值是线段树节点位置(1是主根)</span></span><br><span class="line"><span class="comment">root也是tr的键,val记录的是某个rk的在root[rk]号树上的**位置前缀和**</span></span><br><span class="line"><span class="comment">然后tr数组就就是记录着主席树上的节点轨迹</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update1</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*主席树外分支++*/</span></span><br><span class="line">    <span class="keyword">int</span> cur = ++tot;</span><br><span class="line">    <span class="comment">/*新开轨迹获取之前轨迹的信息,在之前信息上添加*/</span></span><br><span class="line">    tr[cur] = tr[pre];</span><br><span class="line">    tr[cur].val++;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> cur;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*动态开左孩子或者右孩子点*/</span></span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) tr[cur].l = update1(tr[pre].l, l, mid, pos);</span><br><span class="line">    <span class="keyword">else</span> tr[cur].r = update1(tr[pre].r, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// queryk(root[cntl - 1], root[cntr], 1, n, k)</span></span><br><span class="line"><span class="comment">/*cntl - 1 的rk也是LCP符合条件的，所以这里需要cntl-1*/</span></span><br><span class="line"><span class="comment">/*pl.pr是rk区间对应的根区间，他们的val值记录着sa之间的差值，类是于线段树rmq=&gt;可以rkq</span></span><br><span class="line"><span class="comment">然后是主席树是同左同右操作的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryk</span><span class="params">(<span class="keyword">int</span> pl, <span class="keyword">int</span> pr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[tr[pr].l].val - tr[tr[pl].l].val &gt;= k) <span class="keyword">return</span> queryk(tr[pl].l, tr[pr].l, l, mid, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> queryk(tr[pl].r, tr[pr].r, mid + <span class="number">1</span>, r, k - (tr[tr[pr].l].val - tr[tr[pl].l].val));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;<span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">int</span> l, r, k;</span><br><span class="line">    <span class="keyword">int</span> ll, rr, mid;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">int</span> cntl, cntr;<span class="keyword">int</span> cnt;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        n=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) str[i] = s[i] - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line">        str[n]=<span class="number">0</span>;</span><br><span class="line">        get_sa(n+<span class="number">1</span>,<span class="number">30</span>);</span><br><span class="line">        <span class="comment">/*这里是ht的st_rmq*/</span></span><br><span class="line">        build(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ; i++) &#123;</span><br><span class="line">            root[i] = update1(root[i - <span class="number">1</span>], <span class="number">1</span>, n, sa[i] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">            tmp = r - l + <span class="number">1</span>;</span><br><span class="line">            l = rk[l - <span class="number">1</span>];</span><br><span class="line">            ll = <span class="number">1</span>, rr = l;</span><br><span class="line">            <span class="keyword">while</span>(ll &lt;= rr) &#123;</span><br><span class="line">                mid = (ll + rr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                cnt = <span class="number">100000</span>;</span><br><span class="line">                <span class="keyword">if</span>(mid + <span class="number">1</span> &lt;= l) cnt = query(mid + <span class="number">1</span>, l);</span><br><span class="line">                <span class="keyword">if</span>(cnt &gt;= tmp) &#123;</span><br><span class="line">                    cntl = mid;</span><br><span class="line">                    rr = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ll = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ll = l, rr = n;</span><br><span class="line">            <span class="keyword">while</span>(ll &lt;= rr) &#123;</span><br><span class="line">                mid = (ll + rr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                cnt = <span class="number">100000</span>;</span><br><span class="line">                <span class="keyword">if</span>(l + <span class="number">1</span> &lt;= mid) cnt = query(l + <span class="number">1</span>, mid);</span><br><span class="line">                <span class="keyword">if</span>(cnt &gt;= tmp) &#123;</span><br><span class="line">                    cntr = mid;</span><br><span class="line">                    ll = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    rr = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cntr - cntl + <span class="number">1</span> &lt; k) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, queryk(root[cntl - <span class="number">1</span>], root[cntr], <span class="number">1</span>, n, k));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考大佬链接"><a href="#参考大佬链接" class="headerlink" title="参考大佬链接"></a>参考大佬链接</h3><p><a href="https://blog.csdn.net/mmk27_word/article/details/100045708" target="_blank" rel="noopener">https://blog.csdn.net/mmk27_word/article/details/100045708</a></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>世界上总是存在很多的二八定律，不过也应该二八定律，因为总有那么一些人愿意花几倍于人的自律和代价去提高一点点被幸运之神眷顾的机会</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>后缀数组</tag>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU5008详解_后缀数组_二分_RMQ_算法日常[17/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-17-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="HDU5008"><a href="#HDU5008" class="headerlink" title="HDU5008"></a>HDU5008</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://vjudge.net/problem/HDU-5008" target="_blank" rel="noopener">VJ上面</a><br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5008" target="_blank" rel="noopener">hdu上面</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个串，q次查询里面第k大的字串，并且要求输出这个串最早出现的位置的左右下标值</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><strong>Tips:看不懂题解的话可以看题解下面的题解小细节(<del>之所以在前面提示是因为小编经常看到一个东西自己想了半天，然后发现后面竟然有解释…所以感觉有点浪费时间，所以自己的博文应该防止自己陷入同样的坑</del>)</strong></p><h3 id="解法一-无RMQ-O-case-q-log-n-n"><a href="#解法一-无RMQ-O-case-q-log-n-n" class="headerlink" title="解法一 无RMQ O(case*q*(log_(n)+n))"></a>解法一 无RMQ O(<code>case*q*(log_(n)+n)</code>)</h3><p>考虑找到第k小的子串，直接拿原串先构造后缀数组，统计一下第i个后缀有多少个不同的前缀num[i]（也就是在原串中有多少个不重复的子串），按sa排序后，这些连续出现的子串的字典序也是相同的，那么对num[i]求前缀和后就可以去二分一个位置，找到字典序第k小的子串出现的位置pos了(到这里解法二也要用)。这里找到的位置不一定是最靠左的(不理解可以看下面的题解分析)，所以还要在原串中找一下最左的位置，其实到了这里，直接向后，暴力遍历后面排名的串(不理解可以看下面的题解分析)，若串的最长的连续的height[i]&gt;=目标子串长度，则维护min(L,l)就可以直接得到最小的答案</p><h3 id="解法二-RMQ-O-case-n-log-n-q-log-n"><a href="#解法二-RMQ-O-case-n-log-n-q-log-n" class="headerlink" title="解法二 RMQ O(case*(n*log_(n)+q*log_(n)))"></a>解法二 RMQ O(<code>case*(n*log_(n)+q*log_(n))</code>)</h3><p>当然解法一在极限数组（例如10W个a）很可能会TLE的，所以我们来看更快的方法，以应对更高的要求，把平时的节俭(<del>抠门</del>)习惯在计算机上面发挥到极致</p><p>先像解法一前面部分一样确定了当前的位置pos，我们要做的就是在pos后面找个R，使得[pos,R]这个区间的height的最小值&gt;=目标子串的长度，那么找R可以直接在[POS,n]中二分，由于我们的height数组并不是有序的，所以我们不能使用lower<em>bound,但是要应对多次询问，我们不能像解法一一样暴力了，所以可以使用RMQ，在case开始的时候用n*log</em>(n)进行预处理，然后在多次查询中享受O(1)带来的极致体验(<del>节俭的生活就是如此地惬意</del>),最后我们在[pos,R]区间再RMQ一下就得到最后的答案了。注意这里求区间的RMQ和求答案的RMQ是查询的两个数组，要分别初始化…</p><h2 id="题解细节精讲QA"><a href="#题解细节精讲QA" class="headerlink" title="题解细节精讲QA"></a>题解细节精讲QA</h2><p><strong>Q1:</strong> 为什么后面只要找pos后的后缀中的前缀，不用往前找？而且为什么不同的串是那样求出来的？<br><strong>A:</strong></p><h3 id="首先是关于一个字符串有多少不同子串的问题，串由小到大排起序来应该是按照sa-i-的顺序排出来的产生的。"><a href="#首先是关于一个字符串有多少不同子串的问题，串由小到大排起序来应该是按照sa-i-的顺序排出来的产生的。" class="headerlink" title="首先是关于一个字符串有多少不同子串的问题，串由小到大排起序来应该是按照sa[i]的顺序排出来的产生的。"></a>首先是关于一个字符串有多少不同子串的问题，串由小到大排起序来应该是按照sa[i]的顺序排出来的产生的。</h3><p>比如abbacd，排序出来的后缀是这样的<br>rank值i—-对应的后缀sa[i]</p><p>1—-abbacd　　　第一个串产生的6个<strong>前缀</strong>都是新的子串(a,ab,abb……)</p><p>2—-acd　　　　　第二个串除了和上一个串的相同的前缀a(长度为1) 3-1=2 产生了2个子串</p><p>3—-bacd　　　　　4-0=4</p><p>4—-bbacd　　　　5-1=4</p><p>5—-cd　　　　　　2－0=0</p><p>6—-d　　　　　　　1－0=0</p><p>所以所有不同的前缀应该是(len-sa[i])-height[i]的和，即后缀串长(总串长减后缀起始位置)减去与上一个串的最长公共前缀，然后求和。<br>如果你不了解height数组—-&gt;建议看看<a href="https://www.wolfdan.cn/2019/08/20/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-15-100/">学习后缀数组的小建议</a></p><h3 id="然后我们可以观察到字串是按照排名过来的"><a href="#然后我们可以观察到字串是按照排名过来的" class="headerlink" title="然后我们可以观察到字串是按照排名过来的"></a>然后我们可以观察到字串是按照排名过来的</h3><p>a,ab,abb,abba,abbac,abbacd,ac,acd,b,ba,……</p><h3 id="并且也可以观察到第k大的不同的串如果在多个位置出现，那么一定是在后面的串中出现，比如k-3-即abb只能在后面的串出现-在abba，abbac-abbacd中出现-—-gt-所以只要在后面查找"><a href="#并且也可以观察到第k大的不同的串如果在多个位置出现，那么一定是在后面的串中出现，比如k-3-即abb只能在后面的串出现-在abba，abbac-abbacd中出现-—-gt-所以只要在后面查找" class="headerlink" title="并且也可以观察到第k大的不同的串如果在多个位置出现，那么一定是在后面的串中出现，比如k=3,即abb只能在后面的串出现(在abba，abbac,abbacd中出现)—&gt;所以只要在后面查找"></a>并且也可以观察到第k大的不同的串如果在多个位置出现，那么一定是在后面的串中出现，比如k=3,即abb只能在后面的串出现(在abba，abbac,abbacd中出现)—&gt;所以只要在后面查找</h3><p><strong>主要原因是所有的不同的串都是每个后缀的前缀</strong></p><p><strong>Q2:</strong> 为什么我们找到的第一个不是最靠左的呢？<br><strong>A:</strong><br>这里可以举一个反例就解决了，而且其实我们在题解二也举了这个例子(10w个a),我们这里为了分析方便就举例给的串是aaa，那么<br>排名rank　　　　　对应的后缀串<br>1　　　　　　　　　　a(rank[1]=2,即是后缀2)<br>2　　　　　　　　　　aa<br>3　　　　　　　　　　aaa<br><strong>因此我们就可以看到第一个找到的a不是位置上最左边的，反而是最右边的</strong></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>提交都是G++</p><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> sa[maxn],height[maxn],rank[maxn],t[maxn],t2[maxn],c[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line">LL sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_sa</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *x=t,*y=t2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)c[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)c[x[i]=str[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--c[x[i]]]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-k;i&lt;n;i++)y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>(sa[i]&gt;=k)y[p++]=sa[i]-k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)c[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)c[x[y[i]]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--c[x[y[i]]]]=y[i];</span><br><span class="line">        swap(x,y);</span><br><span class="line">        x[sa[<span class="number">0</span>]]=<span class="number">0</span>;p=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">            x[sa[i]]=(y[sa[i<span class="number">-1</span>]]==y[sa[i]]&amp;&amp;y[sa[i<span class="number">-1</span>]+k]==y[sa[i]+k]?p<span class="number">-1</span>:p++);</span><br><span class="line">        <span class="keyword">if</span>(p&gt;=n)<span class="keyword">break</span>;</span><br><span class="line">        m=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getheight</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)::rank[sa[i]]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k)k--;</span><br><span class="line">        <span class="keyword">int</span> j=sa[::rank[i]<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>(str[i+k]==str[j+k])k++;</span><br><span class="line">        height[::rank[i]]=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">    sum[<span class="number">1</span>]=n-sa[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]+n-sa[i]-height[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">    LL l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    process();</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        LL v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;v);</span><br><span class="line">        LL k=(l^r^v)+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*获取有第k排名的不同字符的起始位置(sum见process函数)*/</span></span><br><span class="line">        <span class="keyword">int</span> pos=lower_bound(sum+<span class="number">1</span>,sum+<span class="number">1</span>+n,k)-sum;</span><br><span class="line">        <span class="comment">/*因为每个串都是  后缀 所以sum[pos]-(k-1)就能得到第k个起始的后缀长度！</span></span><br><span class="line"><span class="comment">        然后用n减去,就是k起始的位置！</span></span><br><span class="line"><span class="comment">        (字符串下标从0开始,可以用k=1,来模拟理解一遍) */</span></span><br><span class="line">        LL tl=sa[pos],tr=n-(sum[pos]-k+<span class="number">1</span>);</span><br><span class="line">        l=tl,r=tr;</span><br><span class="line">        <span class="keyword">int</span> len=tr-tl+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(pos+<span class="number">1</span>&lt;=n&amp;&amp;height[pos+<span class="number">1</span>]&gt;=len)&#123;</span><br><span class="line">            pos++;</span><br><span class="line">            tl=sa[pos],tr=tl+len<span class="number">-1</span>;</span><br><span class="line">            l=min(l,tl),r=min(r,tr);</span><br><span class="line">        &#125;</span><br><span class="line">        l++,r++;</span><br><span class="line">        <span class="keyword">if</span>(pos&gt;=n+<span class="number">1</span>)l=r=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;l&lt;&lt;<span class="string">" "</span>&lt;&lt;r&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str)!=EOF)&#123;</span><br><span class="line">        n=<span class="built_in">strlen</span>(str);</span><br><span class="line">        build_sa(<span class="number">123</span>,n+<span class="number">1</span>);</span><br><span class="line">        getheight(n);</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">205000</span>;</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> belong[maxn];</span><br><span class="line"><span class="keyword">int</span> s[maxn],rs[maxn];</span><br><span class="line"><span class="keyword">int</span> sa[maxn],t[maxn],t2[maxn],c[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,tt;</span><br><span class="line"><span class="keyword">int</span> rank[maxn],height[maxn];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">2</span>][maxn][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> LOG[maxn];</span><br><span class="line">ll num[maxn];</span><br><span class="line"><span class="keyword">int</span> len,l;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123; <span class="keyword">return</span> c-<span class="string">'a'</span>+<span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">fdx</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> <span class="keyword">char</span>(x<span class="number">-1</span>+<span class="string">'a'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=n; i++) ::rank[sa[i]]=i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (k) k--;</span><br><span class="line">        <span class="keyword">int</span> j=sa[::rank[i]<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>(s[i+k]==s[j+k]) k++;</span><br><span class="line">        height[::rank[i]]=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="keyword">int</span> i,*x=t,*y=t2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) c[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) c[x[i]=s[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; i++) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">      sa[--c[x[i]]]=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=n-k; i&lt;n; i++) y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) <span class="keyword">if</span> (sa[i]&gt;=k) y[p++]=sa[i]-k;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;m; i++) c[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) c[x[y[i]]]++;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;m; i++) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) sa[--c[x[y[i]]]] = y[i];</span><br><span class="line">        swap(x,y);</span><br><span class="line">        p=<span class="number">1</span>;</span><br><span class="line">        x[sa[<span class="number">0</span>]]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">        x[sa[i]]=(y[sa[i<span class="number">-1</span>]]==y[sa[i]] &amp;&amp; y[sa[i<span class="number">-1</span>]+k]==y[sa[i]+k])? p<span class="number">-1</span> : p++;</span><br><span class="line">        <span class="keyword">if</span> (p&gt;=n) <span class="keyword">break</span>;</span><br><span class="line">        m=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ_init</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> A[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) d[x][i][<span class="number">0</span>]=A[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j)&lt;=n; j++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n; i++)</span><br><span class="line">            d[x][i][j]=min(d[x][i][j<span class="number">-1</span>],d[x][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=LOG[R-L+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> min(d[x][L][k],d[x][R-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">105000</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;(k+<span class="number">1</span>))&lt;=i) k++;</span><br><span class="line">        LOG[i]=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str))&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;l; i++) s[i]=idx(str[i]);</span><br><span class="line">        n=l;</span><br><span class="line">        s[n]=<span class="number">0</span>;</span><br><span class="line">        da(<span class="number">33</span>,n);</span><br><span class="line">        calheight(n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) num[i]=n-sa[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) num[i]-=height[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) num[i]+=num[i<span class="number">-1</span>];</span><br><span class="line">        ll tot=num[n];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        ll la=<span class="number">0</span>,lb=<span class="number">0</span>;</span><br><span class="line">        ll k;</span><br><span class="line">        <span class="comment">/*d[0]存着height的rmq,d[1]存着sa的rmq*/</span></span><br><span class="line">        RMQ_init(<span class="number">0</span>,height);</span><br><span class="line">        RMQ_init(<span class="number">1</span>,sa);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;k);</span><br><span class="line">            k=(k^la^lb)+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (k&gt;=<span class="number">1</span> &amp;&amp; k&lt;=tot)&#123;</span><br><span class="line">                <span class="keyword">int</span> pos=lower_bound(num+<span class="number">1</span>,num+<span class="number">1</span>+n,k)-num;</span><br><span class="line">                <span class="comment">/*这个len求得很精致,k-(pos-1)位置起始的不同串的个数,</span></span><br><span class="line"><span class="comment">                这样就能得到k结束位置距离height结束位置的串长，加上height就是正好len*/</span></span><br><span class="line">                <span class="keyword">int</span> len=k-num[pos<span class="number">-1</span>]+height[pos];</span><br><span class="line">                <span class="keyword">int</span> l=pos+<span class="number">1</span>,r=n;</span><br><span class="line">                <span class="keyword">int</span> mid;</span><br><span class="line">                <span class="keyword">int</span> L=pos,R;</span><br><span class="line">                <span class="comment">/*二分右端点使得右边的最需最长公共字串是我们的k长串*/</span></span><br><span class="line">                <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                    mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (RMQ(<span class="number">0</span>,pos+<span class="number">1</span>,mid)&gt;=len) l=mid+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> r=mid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*因为上面二分是mid+1,所以这里需要保险一下*/</span></span><br><span class="line">                <span class="keyword">if</span> (RMQ(<span class="number">0</span>,pos+<span class="number">1</span>,l)&gt;=len) R=l; <span class="keyword">else</span> R=l<span class="number">-1</span>;</span><br><span class="line">                <span class="comment">/*所有地方求最小的sa*/</span></span><br><span class="line">                la=RMQ(<span class="number">1</span>,L,R);</span><br><span class="line">                lb=la+len<span class="number">-1</span>;la++;lb++;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,la,lb);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> la=lb=<span class="number">0</span>,<span class="built_in">puts</span>(<span class="string">"0 0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考:<br><a href="http://www.voidcn.com/article/p-xboamjdx-bg.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-xboamjdx-bg.html</a><br><a href="https://www.cnblogs.com/chanme/p/4000976.html" target="_blank" rel="noopener">https://www.cnblogs.com/chanme/p/4000976.html</a></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>从明天起，做一个幸福的人(每天只玩半个小时的手机,让自己要么大屏高效,要么认真体验生活)</p><p>喂马、劈柴，周游世界</p><p>从明天起，关心粮食和蔬菜</p><p>我有一所房子，面朝大海，春暖花开</p><p>从明天起，和每一个亲人通信</p><p>告诉他们我的幸福</p><p>那幸福的闪电告诉我的</p><p>我将告诉每一个人</p><p>给每一条河每一座山取一个温暖的名字</p><p>陌生人，我也为你祝福</p><p>愿你有一个灿烂的前程</p><p>愿你有情人终成眷属</p><p>愿你在尘世获得幸福</p><p>我只愿面朝大海，春暖花开</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>后缀数组</tag>
        <tag>狼胆带你每天头铁一题</tag>
      </tags>
  </entry>
  <entry>
    <title>后缀数组基础题poj1743详解_算法日常[16/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-16-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="POJ1743"><a href="#POJ1743" class="headerlink" title="POJ1743"></a>POJ1743</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=1743" target="_blank" rel="noopener">POJ上面</a></p><p><a href="https://vjudge.net/problem/POJ-1743" target="_blank" rel="noopener">VJ上面</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个字符串，求最长重复子串，这两个子串不能重叠</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>由于配置不是简单的匹配，有升降调的处理，但是我们无法确定升降的幅度，所以我们首先对输入的数组进行差值处理</li><li>可以发现同一个旋律的区段，它们的差值数组是相等的</li><li>因为之前我们处理成了差值，所以我们内卷了一个值，我们的差值相当于左右两个值，所以4个值代表着5个值</li><li><strong>所以只要找到最长相同串长的长度不小于4的差值区段即可</strong></li><li>由于需要求出最长的长度，考虑二分后验证可行性，二分区段的长度x，对差值数组求一遍后缀数组，将最长公共前缀大于等于x的划分成一组，如果存在一组的sa差值大于等于x+1(详见下面的重点解释)，那么就表示x长度的差值数组能够被找到。二分结束即可得到答案。</li></ul><h2 id="没学后缀数组？"><a href="#没学后缀数组？" class="headerlink" title="没学后缀数组？"></a>没学后缀数组？</h2><p><a href="https://www.wolfdan.cn/2019/08/20/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-15-100/">出门左转给你后缀数组学习合集</a></p><h2 id="思路重点"><a href="#思路重点" class="headerlink" title="思路重点"></a>思路重点</h2><h3 id="为什么c-1-ans-1"><a href="#为什么c-1-ans-1" class="headerlink" title="为什么c+1,ans+1"></a>为什么c+1,ans+1</h3><p>二分检查的时候，最长公共前缀是x,sa差值却要大于x+1:</p><p>因为之前我们处理成了差值，所以我们内卷了一个值，我们的差值相当于左右两个值，所以4个值代表着5个值.所以最长公共字串只要在4的时候就相当于5,然后sa的差值还是要相间隔5才行==&gt;这样真实的5个值也才是真的间隔5个值，所以同理答案也就是<code>c+1</code>(<code>ans+1</code>)</p><p>比如:<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line"> 1 1 1 1 &apos; 1 1 1 1</span><br></pre></td></tr></table></figure><p></p><p>中间的<code>&#39;</code>也是1，但是代表的5,6，所以如果从这里开始和前面的4个1构成相同串的话，然后就重叠了一个，所以必须从<code>&#39;</code>后面1开始</p><p>我看了别的几个博主对于这题的分析没有谈及，这里，还有些代码没有考虑这里也能AC，说明数据都去卡时间了，没有卡下面这个特例:<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><p></p><h3 id="为什么da函数的n值要加1而getheight函数不用"><a href="#为什么da函数的n值要加1而getheight函数不用" class="headerlink" title="为什么da函数的n值要加1而getheight函数不用"></a>为什么da函数的n值要加1而getheight函数不用</h3><p>da要加一个位置的字符,让它比所有的字符都小，所以这个字符起始的后缀是其本身，其排名为0(rank[n]=0,sa[0]=n)<br>然而calheight却不要…因为calheight直接从rank值为1(rank为0的地方是添加的最小字符)的地方记到n，根本不会用到<code>sa[0]</code>(排名为0的后缀)，重点还有<strong>for中用的是&lt;=</strong>..所以只要使用n.</p><p><code>for(i=1;i&lt;=n;i++) ::rank[sa[i]]=i;</code></p><h3 id="height分组为什么直接遍历下去分就好，不用吧height值相同的放在一起"><a href="#height分组为什么直接遍历下去分就好，不用吧height值相同的放在一起" class="headerlink" title="height分组为什么直接遍历下去分就好，不用吧height值相同的放在一起"></a>height分组为什么直接遍历下去分就好，不用吧height值相同的放在一起</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/poj1743_height%E6%95%B0%E7%BB%84%E5%88%86%E7%BB%84%E5%88%86%E6%9E%90.png" alt></p><h2 id="AC代码1-推荐"><a href="#AC代码1-推荐" class="headerlink" title="AC代码1(推荐)"></a>AC代码1(推荐)</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">int</span> sa[maxn],rank[maxn],height[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> wa[maxn],wb[maxn],wv[maxn],ws[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span>&#123;<span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,p,*x=wa,*y=wb,*t;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) ::ws[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) ::ws[x[i]=r[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++) ::ws[i]+=::ws[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--::ws[x[i]]]=i;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;j*=<span class="number">2</span>,m=p)&#123;</span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++) y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wv[i]=x[y[i]];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) ::ws[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) ::ws[wv[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++) ::ws[i]+=::ws[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--::ws[wv[i]]]=y[i];</span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        x[sa[i]]=cmp(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*r为字符串数组,sa是后缀数组,n为字符串长度*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*用sa[]得到rank[]*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) ::rank[sa[i]]=i;</span><br><span class="line">    <span class="comment">/*j就是后缀i的前一名的后缀位置,然后如果前一个串之间有k,那么就从k--起步*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;height[::rank[i++]]=k)</span><br><span class="line">    <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[::rank[i]<span class="number">-1</span>];r[i+k]==r[j+k];k++);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">为什么check里面的间隔是c+1:</span></span><br><span class="line"><span class="comment">    因为之前我们处理成了差值，所以我们内卷了一个值，</span></span><br><span class="line"><span class="comment">    我们的差值相当于左右两个值，所以4个值代表着5个值</span></span><br><span class="line"><span class="comment">    所以最长公共字串只要在4的时候就相当于5,然后sa的</span></span><br><span class="line"><span class="comment">    差值还是要相间隔5才行==&gt;这样真实的5个值也才是真的</span></span><br><span class="line"><span class="comment">    间隔5个值，所以同理答案也就是c+1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Max=sa[<span class="number">1</span>],Min=sa[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">/*这里的for是枚举的排名值，而height就是相邻排名的</span></span><br><span class="line"><span class="comment">        最长公共前缀,所以直接分组就行了*/</span></span><br><span class="line">        <span class="keyword">if</span>(height[i]&gt;=c) Max=max(Max,sa[i]),Min=min(Min,sa[i]);</span><br><span class="line">        <span class="keyword">else</span> Max=sa[i],Min=sa[i];</span><br><span class="line">        <span class="keyword">if</span>(Max-Min&gt;=c+<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">cin</span>&gt;&gt;str[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++) str[i]=str[i+<span class="number">1</span>]-str[i]+<span class="number">90</span>;</span><br><span class="line">        <span class="comment">/*因为转变差值了，所以少一个值*/</span></span><br><span class="line">        str[n<span class="number">-1</span>]=<span class="number">0</span>;n--;</span><br><span class="line">        <span class="comment">// for(int i=0;i&lt;=n-1;i++) cout&lt;&lt;str[i]&lt;&lt;" "; cout&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*da要加一个位置的字符,让它比所有的字符都小</span></span><br><span class="line"><span class="comment">        然而calheight却不要...因为calheight直接从rank只为1(rank为0的地方是添加的最小字符)</span></span><br><span class="line"><span class="comment">        的地方记到n(用的是&lt;=)..所以只要使用n.不需要n+1*/</span></span><br><span class="line">        da(str,sa,n+<span class="number">1</span>,<span class="number">178</span>);</span><br><span class="line">        calheight(str,sa,n);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=n,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid)) l=mid+<span class="number">1</span>,ans=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;<span class="number">4</span>) <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;ans+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AC代码2-RMQ版"><a href="#AC代码2-RMQ版" class="headerlink" title="AC代码2(RMQ版)"></a>AC代码2(RMQ版)</h2><p><strong>此AC代码为2019年8月22日做<a href="https://www.wolfdan.cn/2019/08/22/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-17-100/">HDU5008(因为那题最好还是用RMQ的后缀数组题)</a>的时候发现的</strong><br>不过这题用RMQ比较鸡肋，为什么? <strong>请看下面的代码头部注释</strong><br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">今天在第二次研究hdu5008的时候,发现好多题目都是没有用rmq的</span></span><br><span class="line"><span class="comment">但是总有大佬不满足于暴力裸sa就完事,于是都加了rmq,</span></span><br><span class="line"><span class="comment">然后我有点看不懂,就去逛oi-wiki,发现居然有不重叠重复两次</span></span><br><span class="line"><span class="comment">的串也可以用rmq，那不就是我昨天做的poj1743的更优做法吗？</span></span><br><span class="line"><span class="comment">是的，然后就在网上搜到了O(test*(nlogn+logn))的做法！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">之前的写法是O(test*nlogn)的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">但是实测发现RMQ版的反而还慢了100多ms!好像是因为他的check还是O(n)而非O(1)的</span></span><br><span class="line"><span class="comment">因为这里的check是我们自己去寻找一个左右区间，而非输入直接给我们左右区间，</span></span><br><span class="line"><span class="comment">所以这里的寻找的复杂度是O(n),所以RMQ无济于补</span></span><br><span class="line"><span class="comment">而且RMQ是nlog(n)的预处理...  所以当然会慢啊 ---&gt; 所以在更大一个量级的询问的时候再用比较好</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">----------------上面为简单分析-----下面为用途---------------</span></span><br><span class="line"><span class="comment">这里有rmq求排名区间内最远的sa位置差值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">21000</span>;</span><br><span class="line"><span class="keyword">int</span> dp1[maxn][<span class="number">20</span>],dp2[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> mm[maxn];</span><br><span class="line"><span class="keyword">int</span> str[maxn],tmp[maxn];</span><br><span class="line"><span class="keyword">int</span> wa[maxn],wb[maxn],wv[maxn],ws[maxn];</span><br><span class="line"><span class="keyword">int</span> sa[maxn],ranks[maxn],height[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,p,*x=wa,*y=wb,*t;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) ws[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) ws[x[i]=r[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++) ws[i]+=ws[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--ws[x[i]]]=i;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;j*=<span class="number">2</span>,m=p)&#123;</span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++) y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wv[i]=x[y[i]];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) ws[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) ws[wv[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++) ws[i]+=ws[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--ws[wv[i]]]=y[i];</span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">            x[sa[i]]=cmp(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) ranks[sa[i]]=i;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k) k--;</span><br><span class="line">        j=sa[ranks[i]<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>(r[i+k]==r[j+k]) k++;</span><br><span class="line">        height[ranks[i]]=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initRMQ</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*mm其实是log,这里赋值为-1是为了后面mm[1]=0,也就是2^0=1*/</span></span><br><span class="line">    mm[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">/*(i&amp;(i-1))==0表示n==0或者是2的倍数*/</span></span><br><span class="line">        mm[i]=((i&amp;(i<span class="number">-1</span>))==<span class="number">0</span>)?mm[i<span class="number">-1</span>]+<span class="number">1</span>:mm[i<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">/*这里是预处理sa的rmq*/</span></span><br><span class="line">        dp1[i][<span class="number">0</span>]=dp2[i][<span class="number">0</span>]=sa[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mm[n];j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">            dp1[i][j]=max(dp1[i][j<span class="number">-1</span>],dp1[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">            dp2[i][j]=min(dp2[i][j<span class="number">-1</span>],dp2[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rmq</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=mm[y-x+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> max(dp1[x][k],dp1[y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k])-min(dp2[x][k],dp2[y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> len,<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">1</span>,e=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(e&lt;N)&#123;</span><br><span class="line">        <span class="keyword">if</span>(height[e+<span class="number">1</span>]&gt;=len<span class="number">-1</span>) e++;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(rmq(s,e)&gt;=len) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            s=++e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N)&amp;&amp;N)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;str[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)</span><br><span class="line">            tmp[i]=str[i+<span class="number">1</span>]-str[i]+<span class="number">90</span>;</span><br><span class="line">        tmp[N<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*这里没有N--,所以直接使用的N,而RMQ使用的N-1,height封锁掉N号位置*/</span></span><br><span class="line">        da(tmp,N,<span class="number">200</span>);</span><br><span class="line">        initRMQ(N<span class="number">-1</span>);</span><br><span class="line">        height[N]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">1</span>,right=N/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid,N)) left=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(right&lt;<span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>我不管你是什么垃圾，我只看结果</strong></p><p><strong>要达到结果，你应该知道怎么做</strong></p><p><strong>I know you have the urge to give up!</strong></p><p><strong>But you must keep faith!</strong></p><p><strong>You do make a difference!</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>后缀数组</tag>
        <tag>狼胆带你每天头铁一题</tag>
      </tags>
  </entry>
  <entry>
    <title>后缀数组学习路径以及后缀数组板子推送_算法日常[15/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-15-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="学习后缀数组的小建议"><a href="#学习后缀数组的小建议" class="headerlink" title="学习后缀数组的小建议"></a>学习后缀数组的小建议</h1><h2 id="时刻分析数组含义"><a href="#时刻分析数组含义" class="headerlink" title="时刻分析数组含义"></a>时刻分析数组含义</h2><p>学习后缀数组的核心是时刻分析这到底是<strong>排名i的后缀位置</strong>还是<strong>后缀i的排名值</strong></p><p>一般的<code>SA[i]</code>代表着排名第i的后缀位置从哪里开始</p><p>然后<code>Rank[i]</code>代表着后缀i的排名</p><p><strong>后缀i</strong>就从下标i开始一直到字符串末尾的那个后缀<code>s.substr(i)</code></p><h2 id="演算"><a href="#演算" class="headerlink" title="演算"></a>演算</h2><p>脑子的内存是有限的，所以有时候想不出来，尽量使用草稿纸加以演算，这样才能更高效地学习后缀数组(<del>否则像小编这种脑子不怎么好使的，不演算之前看了一天都没看懂某两行代码</del>)</p><h1 id="后缀数组学习材料"><a href="#后缀数组学习材料" class="headerlink" title="后缀数组学习材料"></a>后缀数组学习材料</h1><p>当然小编也是一个初学者，所以暂时只能说出一些学习的小建议，让我写出来还是不太现实，不过小编可以给你们推荐一些学习的资料</p><h2 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h2><p><strong>下面这篇论文基本上网罗了后缀数组的方方面面，而且写得也十分详细，所以十分推荐</strong><br><a href="https://github.com/wolfdan666/BlogPic/tree/master/%E7%AE%97%E6%B3%95/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84" target="_blank" rel="noopener">后缀数组论文分享</a></p><h2 id="学习网址"><a href="#学习网址" class="headerlink" title="学习网址"></a>学习网址</h2><p>也挺详细的</p><p><a href="https://oi-wiki.org/string/sa/" target="_blank" rel="noopener">OI-wiki上的介绍</a></p><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://cn.vjudge.net/article/752?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">当然是先刷一手kuangbin专题</a></p><h2 id="板子整理推送-LTS"><a href="#板子整理推送-LTS" class="headerlink" title="板子整理推送(LTS)"></a>板子整理推送(LTS)</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">板子声明 :</span></span><br><span class="line"><span class="comment">1. r从0开始,而非像oi-wiki中的从1开始</span></span><br><span class="line"><span class="comment">2. [build使用 n + 1 , calheight 使用 n ](https://www.wolfdan.cn/2019/08/21/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-16-100/)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> sa[maxn],wa[maxn],wb[maxn],wv[maxn],ws[maxn];</span><br><span class="line"><span class="comment">/*LCP:最长公共字串部分*/</span></span><br><span class="line"><span class="keyword">int</span> rank[maxn],height[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*r为字符串数组,sa是后缀数组,n为字符串长度,m为字符种类数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,p,*x=wa,*y=wb,*t;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) ws[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) ws[x[i]=r[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++) ws[i]+=ws[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--ws[x[i]]]=i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;j*=<span class="number">2</span>,m=p)&#123;</span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++) y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;</span><br><span class="line">        <span class="comment">/*提取第一关键字*/</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wv[i]=x[y[i]];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) ws[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) ws[wv[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++) ws[i]+=ws[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--ws[wv[i]]]=y[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        x[sa[i]]=(y[sa[i<span class="number">-1</span>]]==y[sa[i]]&amp;&amp;r[sa[i<span class="number">-1</span>]+j]==r[sa[i]+j])?p<span class="number">-1</span>:p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*r为字符串数组,sa是后缀数组,n为字符串长度*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*用sa[]得到rank[]*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) rank[sa[i]]=i;</span><br><span class="line">    <span class="comment">/*j就是后缀i的前一名的后缀位置,然后如果前一个串之间有k,那么就从k--起步*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;height[rank[i++]]=k)</span><br><span class="line">    <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rank[i]<span class="number">-1</span>];r[i+k]==r[j+k];k++);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>愿回首岁月之时，你不会后悔</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
      </tags>
  </entry>
  <entry>
    <title>2019杭电多校9题解_算法日常[14/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-14-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="jls题解"><a href="#jls题解" class="headerlink" title="jls题解"></a>jls题解</h1><p>因为有些 ddl 要肝.. 把视频题解咕了..大家凑合着看文字题解吧</p><p>今年又是 Rikka 和 Yuta 在多校上秀恩爱的一年（说不定也是最后一年了.. sad</p><h2 id="1001-Rikka-with-Quicksort"><a href="#1001-Rikka-with-Quicksort" class="headerlink" title="1001 Rikka with Quicksort"></a>1001 Rikka with Quicksort</h2><p>难度：medium</p><p>考察了大家对快速排序时间复杂度推导的熟悉程度（当然我是打表推式子的）</p><p>如果打表的话可以考虑下面这个式子，它是计算在 $m$ 处增加一个 $1$ 对答案的贡献。</p><script type="math/tex;mode=display">\begin{aligned}

h_m(i) &= 0 & i < m\\

h_m(i) &= 1 & i =m \\

h_m(i) &= \frac{1}{i}\sum_{j=1}^{i}\left( h_m(j-1) + h_m(i-j)\right)  & i > m

\end{aligned}</script><p>打表之后可以知道 $h_m(m)=1,h_m(n)=\frac{2(n+1)}{(m+1)(m+2)} (n &gt; m)$。应该归纳一下就可以直接证明。所以把对应的贡献求和之后可以得到答案就是：</p><script type="math/tex;mode=display">2(n+1)H(n)-4n-\frac{2(m+2)H(m+1)-4(m+1)-m)(n+1)}{m+2}</script><p>其中 $H(n)$ 表示调和级数。因为模数确定，可以用分段打表的策略来求调和级数的具体值：即把 $H(kS)$ 的值给打入程序中，这样每一次只需要计算 $kS+1$ 到 $n$ 的逆元就行了。</p><h2 id="1002-Rikka-with-Cake"><a href="#1002-Rikka-with-Cake" class="headerlink" title="1002 Rikka with Cake"></a>1002 Rikka with Cake</h2><p>难度：medium easy</p><p>用欧拉（欧拉欧拉欧拉）公式 $V-E+F = 2$ 来算蛋糕的块数。</p><p>首先考虑点数 $V$，蛋糕的四个角以及射线的端点贡献了 $n+4$ 个顶点（$K$ 太丑了我们用 $n$ 表示射线数），射线和四条边的交点共有 $n$ 个，射线之间的交点有 $c$ 个，因此点数是 $2n+4+c$。</p><p>接着考虑边数，对于每一条射线，假设别的射线和他的交点有 $c_i$ 个，那么这条射线被切成了 $c_i+1$ 段，因此所有射线的边数对应的是 $2c+n$（因为每一个交点被用了两次）。同时因为四条边一共和射线交了 $n$ 次，所以四条边界上共有 $4+n$ 条边，所以 $E=2c+2n+4$。</p><p>因此总的区域数为 $F=2+c$，因为要去掉最外面的无穷区域，所以答案就是 $1+c$。于是问题就变成了求交点个数 $c$。这是一个经典的问题，分四个方向讨论一下离散化用树状数组求就行。时间复杂度 $O(n \log n)$</p><h2 id="1003-Rikka-with-Mista"><a href="#1003-Rikka-with-Mista" class="headerlink" title="1003 Rikka with Mista"></a>1003 Rikka with Mista</h2><p>难度：medium-easy</p><p>在，为什么迫害米斯达？</p><p>可以对每一位分开来计算，和最大不超过 $10^{10}$，因此最多只有 $10$ 位。只要对每一位算出它在多少种情况下是 $4$，全部加起来就可以了。</p><p>$40$ 的数据范围指明了可以用 meet in middle 来做，可以先用 $O(2^{\frac{n}{2}})$ 的复杂度分别把前 $\frac{n}{2}$ 个数和后 $\frac{n}{2}$ 个数的所有和求出来，分别存在数组 $A$ 和 $B$ 中，那么对于第 $i$ 位来说，答案就是有多少个数对 $i,j$ 满足 $(A_i+B_j) \text{ mod } 10^{i+1} \in [4 \times 10^i,5 \times 10^i)$。这个问题只要对 $A$ 和 $B$ 按照 $x \text{ mod } 10^{i+1}$ 排序后用 two pointer 扫就可以了。</p><p>对每一位分开来做时间复杂度是 $O(2^{\frac{n}{2}}n \log w_i)$，瓶颈在堆每一位排序。不难发现对每一位排序可以用一次归并排序来实现，这样就能省下一个 $\log$，时间复杂度是 $O(2^{\frac{n}{2}}n)$。</p><h2 id="1004-Rikka-with-Geometric-Sequence"><a href="#1004-Rikka-with-Geometric-Sequence" class="headerlink" title="1004 Rikka with Geometric Sequence"></a>1004 Rikka with Geometric Sequence</h2><p>难度：medium</p><p>首先长度是 $1$ 的答案就是 $n$，长度为 $2$ 的答案就是 $\frac{n(n-1)}{2}$。我们考虑长度大于等于 $3$ 的情况。</p><p>假设公比的最简分数表示是 $\frac{a}{b}(a &gt; b,\gcd(a,b) = 1)$，等比数列长度是 $k$，那么 $x$ 能作为这样的一个等比数列的最后一项的条件就是 $a^{k-1}|x$，因此这样的等比数列一共有 $\left \lfloor \frac{n}{a^{k-1}} \right \rfloor$。而枚举了 $a$，满足小于 $a$ 且与 $a$ 互质的 $b$ 的数量是 $\varphi(a)$，其中 $\varphi$ 表示欧拉函数。 因此我们可以枚举 $a$ 然后对答案求和：</p><script type="math/tex;mode=display">\sum_{a=2}^n \varphi(a)\left \lfloor \frac{n}{a^{k-1}} \right \rfloor</script><p>显然有贡献的 $a$ 必须小于等于 $\sqrt[k-1] n$，因此当 $k&gt;3$ 的时候就能暴力枚举 $a$ 统计答案了，问题就在于 $k=3$ 的时候的处理。这个时候可以证明 $\left \lfloor \frac{n}{a^2} \right \rfloor$ 的取值最多只有 $\sqrt[3] n$ 种：当 $a \leq \sqrt[3]n$ 的时候，只有 $\sqrt[3] n$ 种值，当 $a &gt; \sqrt[3]n$ 的时候，这个商小于等于 $\sqrt[3]n$，因此最多也就只有 $\sqrt[3]n$ 种答案。</p><p>所以相当于把 $a$ 的取值分成了 $\sqrt[3]n$ 段，对每一段分别用杜教筛求 $\varphi(n)$ 的前缀和就可以了。这样的时间复杂度比较迷幻，我展开一层积分一下可以得到时间复杂度是 $O(n^{\frac{5}{12}})$。不确定最终的时间复杂度是什么。但是如果预处理前 $5 \times 10^7$ 项的欧拉函数，可以非常轻松的跑过去。</p><h2 id="1005-Rikka-with-Game"><a href="#1005-Rikka-with-Game" class="headerlink" title="1005 Rikka with Game"></a>1005 Rikka with Game</h2><p>难度：easy</p><p>签到题，随便脑补一下就能知道答案。首先如果第一位是 $a-x$ 的话，先手会直接结束游戏：如果先手增加第一位，那么后手直接结束游戏；如果先手不增加第一位，那么后手增加第一位，此时如果先手还不结束游戏，后手直接选择结束。这三种情况下游戏结束的字典序都要比游戏开始的时候字典序大。</p><p>如果第一位是 $y$，那么不管先手还是后手都不会选择修改它：如果先手修改它，后手直接结束游戏；如果后手修改它，先手再选择同一位，然后在下一次轮到先手的时候结束。这样对于修改 $y$ 的那一方都是亏的。</p><p>如果第一位是 $z$，那么先手会选择修改它，之后后手也会选择修改它，然后就回到了第一种情况先手直接结束游戏，因此结果就是第一位变成了 $b$.</p><p>在上面三种情况下，只有第二种情况游戏不会再只考虑第一位的情况下结束，这时因为大家都不会动第一位，所以相当于不存在，直接考虑后面的情况就可以。</p><p>所以最后的结论就是，找到第一位不是 $y$ 的位，如果它是 $z$，则修改成 $b$，否则不变。 时间复杂度 $O(n)$。</p><h2 id="1006-Rikka-with-Coin"><a href="#1006-Rikka-with-Coin" class="headerlink" title="1006 Rikka with Coin"></a>1006 Rikka with Coin</h2><p>难度：easy</p><p>首先 $10$ 分的硬币最多只会用一个，如果用了两个，直接替换成一个 $10$ 分一个 $20$ 分一定不亏。</p><p>$20$ 分的硬币最多只会用三个，如果用了四个，直接替换成一个 $10$ 分两个 $20$ 分一个 $50$ 分一定不亏。</p><p>$50$ 分的硬币最多只会用一个，如果用了两个，直接替换成一个 $50$ 分和一个一元一定不亏。</p><p>对于任何一种情况，重复使用上述规则一定会达到一个 $10$ 分硬币最多一个，$20$ 分最多三个，$50$ 分最多一个的情况，不会陷入重复甩锅的死循环。</p><p>因此枚举这三种硬币分别用了多少个，然后整百的部分直接用一元硬币填，取最少的答案就行了。</p><h2 id="1007-Rikka-with-Travel"><a href="#1007-Rikka-with-Travel" class="headerlink" title="1007 Rikka with Travel"></a>1007 Rikka with Travel</h2><p>难度：medium easy</p><p>基础直径练习题。</p><p>考虑判断 $(x,y)$ 能不能出现。劼论：任意取树上的一条直径，那么如果 $(x,y)$ 能出现，那么一定存在一种方案使得直径的两端都被使用了。证明很简单：假设存在一个端点没有被使用，那么考虑两条直线的四个端点 $a,b,c,d$，一定可以把一个端点给移动到直径的这个端点上，因为直径是树上最长的路径，因此这次移动一定不会减少路径的长度。</p><p>考虑对每一个长度 $x$，求可以满足的最长的 $y$，这样所有小于等于 $y$ 的值也都能被满足。考虑在直径上计算这些值：第一种情况，直径的两端分属不同的路径，那么可以枚举直径的一个端点那条路径在直径上的最后一个点，那么这一条路径的最大长度就是这个点到直径端点的距离加上这个点往直径外的最大延伸长度，另一条路径的最大长度也可以类似地求，其中最大延伸长度可以用一个 $O(n)$ 的 DFS 计算出来。第二种情况是有一条路径就是这条直径，那么另一条路径就是这条直径之外的最长路径长度，这个只要把直径上的点都删了再求一遍直径就行。</p><p>总的时间复杂度为 $O(n)$。</p><h2 id="1008-Rikka-with-Stable-Marriage"><a href="#1008-Rikka-with-Stable-Marriage" class="headerlink" title="1008 Rikka with Stable Marriage"></a>1008 Rikka with Stable Marriage</h2><p>难度：medium</p><p>稳定婚姻真实一个深刻的模型啊..这题明明很简单但是不知道为什么没人做。</p><p>考虑把男生和女生分别放到一棵 trie 树里面，然后考虑最高位：首先肯定是让不同子树的男生女生进行匹配，如果左子树里有一队，右子树里有一队，那么交换他们的伴侣肯定一个更好的选择。而因为左右子树的大小可能不均匀，所以在分开来匹配之后，不妨设左子树有一些男生剩下，右子树有一些女生剩下，这个时候就只能让败者组的他们互相舔舐伤口了。</p><p>写成代码很简单，下面是一个简单的伪代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">match</span><span class="params">(node_b, node_g, depth)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (node_b.size == <span class="number">0</span> || node_g.size == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (depth == <span class="number">-1</span>) &#123;</span><br><span class="line">		marriage(node_b, node_g); <span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	match(node_b.l, node_g.r, depth - <span class="number">1</span>);</span><br><span class="line">	match(node_b.r, node_g.l, depth - <span class="number">1</span>);</span><br><span class="line">	match(node_b.l, node_g.l, depth - <span class="number">1</span>);</span><br><span class="line">	match(node_b.r, node_g.r, depth - <span class="number">1</span>);</span><br><span class="line">	node_b.update_size();</span><br><span class="line">	node_g.update_size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>node_b</code> 和 <code>node_g</code> 分别表示男孩和女孩对应的 trie 树节点，<code>depth</code> 表示现在考虑的是哪一层。大致的思想就是暴力递归下去然后贪心的匹配就行了。</p><p>因为每递归 $O(\log a_i)$ 层一定会有一对新人产生，所以总的时间复杂度是 $O(n \log a_i)$ 的。</p><h2 id="1009-Rikka-with-Traffic-Light"><a href="#1009-Rikka-with-Traffic-Light" class="headerlink" title="1009 Rikka with Traffic Light"></a>1009 Rikka with Traffic Light</h2><p>难度：medium hard</p><p>首先可以发现一定存在一个最优方案，所有绿灯区间长度都大于等于 $T_1$，所有红灯区间长度都大于等于 $T_2$。如果如果小于的话，反正这一段时间也没有办法让人过红绿灯，不如就不变了。接着考虑如果灯在第 $t$ 时刻变成了绿灯，最优解中它会在什么时候变成红灯。（对于红灯变成绿灯的分析类似）</p><p>第一种可能性是在 $t+T_1$ 时刻变成红灯，在这种情况下，一定有在 $t$ 之前（包括 $t$） 时刻到达且还没有过马路的人，不然这一段没有人能过马路。</p><p>第二种可能性是在 $t+T_1$ 时刻之后，考虑在这段绿灯中最后过马路的那个人 $i$，他会在 $t_i+T_1$ 时刻后通过马路。因此这段绿灯在第 $t_i+T_1$ 时刻结束一定不亏。</p><p>我们把所有 $t_i+T_1$ 或者 $t_i+T_2$ (取决于 $i$ 的种类) 作为关键点，设 $f_i$ 为在第 $i$ 个人对应的关键切换成另一种灯时的已经能确定过马路时间的人的总等待时间（不妨假设第 $i$ 个人是第一类人）。注意这儿已经能确定过马路时间的人包括在 $t_i$ 时刻之前到达的第一类人和第 $t_i+T_1$ 时刻之前达到的第二类人 (最开始发现的性质保证了他们都能在 $t_i+T_1$) 时刻过马路。</p><p>考虑转移，首先从 $t_i+T1$ 开始，最优方案可能会进行若干段第一种可能性的转移，接着通过一个第二种可能性的转移直接跳到后面的某一个关键点。因为第一种可能性要求必须要有对应的人在等待，因此第一种转移最多进行 $O(n)$ 次。我们可以枚举第一段转移进行的次数，并求出对应的总等待时间（总等待时间的定义和 $f_i$ 一样）。</p><p>最后要处理的就是从枚举的这 $O(n)$ 段到后面的某一个关键点之间的转移，这个把式子列出来之后可以发现用斜率优化就能直接优化到 $O(n)$ 了。</p><p>总时间复杂度为 $O(n^2)$。数据造的我想吐。</p><h2 id="1010-Rikka-with-Defensive-Line"><a href="#1010-Rikka-with-Defensive-Line" class="headerlink" title="1010 Rikka with Defensive Line"></a>1010 Rikka with Defensive Line</h2><p>难度：medium hard</p><p>我九条可怜最喜欢做的一件事，就是出大几何题，对自以为多开就能 AK 的人说“不”。</p><p>过气计算几何选手拼尽全力出的计算几何题..然后根本没人帮我验题..偷偷搞了一个 60 核 server 并行用极角排序验了一下.. 发现这个数据范围的 $O(n^2 \log n)$ 的极角排序并行后两三分钟就跑完了.. 感觉有点牛逼</p><p>首先可以发现对于一个凸包来说，如果一个直线和它有交，那么一定在直线的两侧（不严格）都有至少一个凸包上的顶点。因此我们对点集剥 $m$ （因为 $K$ 太丑这儿就用 $m$ 代替了）层凸包（重复求凸包，删除凸包上的点这一过程 $m$ 次），只有这些凸包上的点可能作为防御线的两个点之一，其他点都没有用了。</p><p>枚举一个点集中的点，把这个点作为坐标系的原点，那么对于任何一个方案，它小于等于 $m$ 的那一边一定覆盖了 $y$ 轴正半轴或者负半轴中的一个。可以先求所有覆盖了 $y$ 轴正半轴的方案，那么另一边只要对称一下再做一遍就行。同时不妨假设另一个端点在 $x$ 轴正方向，逆方向的情况也只要对称一下就行。</p><p>考虑这时哪些点可能作为答案：答案是把 $y$ 轴沿着逆时针防线方向旋转碰到的前 $m$ 个点。同时为了判断这些点是否合法还需要求沿着顺时针方向旋转碰到的前 $m$ 个点。如果把这些点求出来，那么就只要对每一个点看一下这 $2m+1$ 个点（包括原点）里是否有超过 $m$ 个点在这一边就行，这是一个非常基础的 two pointer （注意处理共线的情况）。</p><p>问题的关键就是如何求逆时针方向（顺时针方向同理）的前 $m$ 个点。因为现在的点集有特殊性：由 $m$ 个相互嵌套的凸包组成，因此我们考虑只有一个凸包的特殊情况。讨论可以发现，$y$ 轴正半轴和凸包的交点以及原点到凸包的切点把凸包分成了若干段，其中每一段从极角上考虑都是有序的。因此 $m$ 个凸包一共分成了 $O(m)$ 段，用一个多路归并把这些段归并起来就行。求交点可以按照 $x$ 轴排序枚举原点，这样就可以分上下凸壳分别扫过去；求割点可以用旋转卡壳预处理，这两部分总的时间复杂度都是 $O(nm)$ 的。</p><p>算上 $m$ 路归并的复杂度 $O(m \log m)$，总的时间复杂度为 $O(nm \log m)$。</p><h2 id="1011-Rikka-with-Segment-Tree"><a href="#1011-Rikka-with-Segment-Tree" class="headerlink" title="1011 Rikka with Segment Tree"></a>1011 Rikka with Segment Tree</h2><p>难度：medium</p><p>这个题是一个简单的分形题.. 做法也很传统，就是大力递归下去，难点在于比较麻烦。</p><p>我们用 $F(N)$ 表示到线段树的区间长度到 $N$ 为止的求和。那么除了 $1$ 的情况直接结束，其他的线段树都会递归左子树和右子树。如果我们假设左右子树都是从 $1$ 开始重新标号的话，那么左右子树都是递归到 $\frac{N}{2}$ 上下取整的子问题，这一部分用一个记忆化的递归就行。</p><p>考虑合并左右子树成 $n$ 的情况，首先所有叶子节点的深度都会增加 $1$，这一部分的贡献是 $\sum<em>{n=2}^N \sum</em>{i=1}^n i$，可以直接计算。</p><p>最后，因为加上左子树之后，右子树的所有点的编号会对应地发生变化，因此需要再算上对应的贡献。令 $g(n)$ 表示对应区间为 $n$ 的线段树所有叶子节点的深度和，设 $m$ 是最大的整数满足 $2^m \leq n$，那么 $g(n) = nm+2(n-2^m)$。而这一部分的贡献就是：</p><script type="math/tex;mode=display">\sum_{n=2}^N \left \lceil \frac{N}{2}\right \rceil g\left(\left \lfloor \frac{n}{2}\right \rfloor\right)</script><p>推一个式子加上一通预处理，就能 $O(1)$ 计算这个和式了。</p><p>如果用 map 来进行记忆化的话，时间复杂度为 $O(\log^2 n)$。</p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><ul><li><p>jls真牛逼</p></li><li><p>自己因为浪，导致今天又没学到什么，继续加油吧</p></li><li><p>你真的有在拼吗？想一想你3个月后的回想，你会后悔吗</p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第17周[17/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC17%E5%91%A8-17-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.8/2019.8.17" target="_blank" rel="noopener">虽然比赛很自闭，但仍一直在补牛客杭电多校题目，一起加油</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/s/story/your-work-is-the-only-thing-that-matters-26a47ccf778c" target="_blank" rel="noopener">Your Work Is the Only Thing That Matters</a><br><strong>If you cease practicing for a second, if you let your mind get wound too tight or simply allowed to drift elsewhere, you will lose that ability. Your bat will stop connecting with the ball, your batting average will drop and soon enough you yourself will be dropped, first from the majors and then the sport altogether.</strong></p><p><strong>是啊，我们只要放松一秒，我们的竞技水平就会急剧下滑，所以我们不能放松，否则就是万丈深渊，输掉曾经所有的努力</strong></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/yockie/article/details/52674366" target="_blank" rel="noopener">C++11使用emplace_back代替push_back</a><br>这个文章好久好在它的泛用性，你可以使用里面的头文件去做其他的时间测试</p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-8-100/">银联挑战赛复赛A,B题_算法日常[8/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-9-100/">10进制矩阵快速幂-狼胆带你每天头铁一题-算法日常[9/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-10-521/">折半搜索_算法日常[10/521]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-11-100/">2019牛客多校9E题详解_算法日常[11/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-12-100/">2019牛客多校10 B题_算法日常[12/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-13-100/">2019牛客第十场F题详解_算法日常[13/100]</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客第十场F题详解_算法日常[13/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-13-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="2019牛客第十场F题详解"><a href="#2019牛客第十场F题详解" class="headerlink" title="2019牛客第十场F题详解"></a>2019牛客第十场F题详解</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://ac.nowcoder.com/acm/contest/890/F" target="_blank" rel="noopener">2019牛客第十场F题详解</a></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%8D%81%E5%9C%BA/F_1.png" alt><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%8D%81%E5%9C%BA/F_2.png" alt></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><strong>我的分析请看代码</strong><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%8D%81%E5%9C%BA/F_an.png" alt></p><p><strong>本来以为发现了更快更简单的做法，结果想写成思路给大家看，然后不断想怎么表述这个算法，想着想着发现这是一个假的超快AC算法，然后大家有兴趣的话可以看我的AC代码二的分析(果然写blog<del>做搬运工</del>也是有收获的)</strong></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">6e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">6e5</span>+<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],cnt[maxn],ans,n,r;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; h[maxn];</span><br><span class="line"><span class="built_in">multiset</span> &lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> p=s.find(cnt[x]);</span><br><span class="line">    s.erase(p); cnt[x]++;</span><br><span class="line">    s.insert(cnt[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> p=s.find(cnt[x]);</span><br><span class="line">    s.erase(p); cnt[x]--;</span><br><span class="line">    s.insert(cnt[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">        <span class="comment">/* 统一右移2*r */</span></span><br><span class="line">        a[i]+=r*<span class="number">2</span>; b[i]+=r*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="comment">/*打a[i]的时候,把a[i]-r,a[i]+r也叠加上a[i]上面的值,</span></span><br><span class="line"><span class="comment">        这样就能使得a[i]表示打a[i]能获得的总值*/</span></span><br><span class="line">        h[a[i]-r].pb(b[i]);</span><br><span class="line">        h[a[i]].pb(b[i]);</span><br><span class="line">        h[aa[i]+r].pb(b[i]);</span><br><span class="line">        cnt[b[i]]++; cnt[b[i]-r]++; cnt[b[i]+r]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=r;i&lt;=N-r;i++) s.insert(cnt[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=r;i&lt;=N-r;i++)&#123;</span><br><span class="line">        <span class="comment">/*得到中间打这里能够得到的个数*/</span></span><br><span class="line">        <span class="keyword">int</span> ret=(<span class="keyword">int</span>)h[i].size();</span><br><span class="line">        <span class="comment">/*暂时删除相关的所有列值*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x:h[i]) del(x),del(x-r),del(x+r);</span><br><span class="line">        <span class="comment">/*然后得到当下最大的3列值*/</span></span><br><span class="line">        <span class="keyword">auto</span> p=s.rbegin();</span><br><span class="line">        ans=max(ans,ret+(*p));</span><br><span class="line">        <span class="comment">/*再把列值插回去*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x:h[i]) add(x),add(x-r),add(x+r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="能更快AC的假算法"><a href="#能更快AC的假算法" class="headerlink" title="能更快AC的假算法"></a>能更快AC的假算法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*直接行列序列化排序的做法,真滴是好想法!*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*2019年8月18日20:26:30 发现这是一个假做法！靠着数据水才过的！因为这里只比较了最大的3个</span></span><br><span class="line"><span class="comment">行值，就去比较列值了！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">因为可能有一种情况就是选第4大行，但是取到的列值更多，这应该是有可能出现的，</span></span><br><span class="line"><span class="comment">总之这种做法虽然能过   但是是有可能遗漏情况的假算法！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">必须要枚举到所有的行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M =<span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> num[M *<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span>  n , r , ans;</span><br><span class="line"><span class="keyword">int</span> cnt[M * <span class="number">3</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x , y;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node d)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; d.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[M] , b[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt;r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i].x &gt;&gt; a[i].y;</span><br><span class="line">        a[i].x++;</span><br><span class="line">        a[i].y++;</span><br><span class="line">        num[a[i].x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*枚举每个行坐标,相加从上到下3行的值--&gt;二维降到一维*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100000</span>;i++)&#123;</span><br><span class="line">        <span class="comment">/*之所以放在最左边是因为i是从最左边开始,免去判断*/</span></span><br><span class="line">        b[i].x = num[i] + num[i +r] + num[i +r +r];</span><br><span class="line">        b[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*行值获利大到小排序*/</span></span><br><span class="line">    sort(b + <span class="number">1</span> ,b + <span class="number">100001</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(cnt , <span class="number">0</span> ,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">            <span class="comment">/*除去原来的行(3次行值取max)以外的其他列的值的统计*/</span></span><br><span class="line">            <span class="keyword">if</span>(a[j].x != b[i].id &amp;&amp; a[j].x != b[i].id +r  &amp;&amp; a[j].x != b[i].id +r * <span class="number">2</span>) cnt[a[j].y]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; M;j++) sum = max( sum , cnt[j] + cnt[j +r] +cnt[j + r + r]);</span><br><span class="line">        ans = max(ans , sum + b[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天叨叨一句"><a href="#每天叨叨一句" class="headerlink" title="每天叨叨一句"></a>每天叨叨一句</h1><p><strong>天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，曾益其所不能</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>贪心</tag>
        <tag>算法学习日常</tag>
        <tag>狼胆带你每天头铁一题</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客多校10 B题_算法日常[12/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-12-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="2019牛客多校10-B题"><a href="#2019牛客多校10-B题" class="headerlink" title="2019牛客多校10 B题"></a>2019牛客多校10 B题</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://ac.nowcoder.com/acm/contest/890/B" target="_blank" rel="noopener">2019牛客多校10 B题</a><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%8D%81%E5%9C%BA/B_1.png" alt="B_1"></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%8D%81%E5%9C%BA/B_2.png" alt="B_2"></p><h2 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%8D%81%E5%9C%BA/B_A.png" alt="B_A"></p><p><strong>(详见代码注释)</strong></p><p><strong>C++由于容易数据溢出，所以必须加限制，否则会造成数据溢出的错误，昨晚WA了两个小时的血的教训</strong></p><p>k不会到很大的数据范围(限制在了k&lt;10^12)</p><p>然后递归的时候是一样的,最终也是递归到x==1,x==2</p><p>是按照题中斐波那契递归回去的，所以不会出错</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p><strong>写了python版之后去写C++版本的，结果一直WA了整整2个多小时，眼睛痛，所以决定明天早起再看看哪里出错了并给出C++版的AC代码</strong>(第二天已经更新)</p><h3 id="Python3版"><a href="#Python3版" class="headerlink" title="Python3版"></a>Python3版</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"></span><br><span class="line">lf = [<span class="number">0</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment"># 一千多项的时候远远超过了10^12+7的</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>) :</span><br><span class="line">    lf.append(lf[<span class="number">-2</span>] + lf[<span class="number">-1</span>])</span><br><span class="line">    <span class="comment"># if _ == 999:</span></span><br><span class="line">    <span class="comment">#     print(If[-1])</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, s)</span> :</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"COFFEE"</span>[s]</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CHICKEN"</span>[s]</span><br><span class="line">    <span class="keyword">if</span> s &gt;= lf[x<span class="number">-2</span>] :</span><br><span class="line">        <span class="keyword">return</span> f(x - <span class="number">1</span>, s - lf[x - <span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> f(x - <span class="number">2</span>, s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(eval(input())) :</span><br><span class="line">    n, s = map(int, input().split())</span><br><span class="line">    s -= <span class="number">1</span></span><br><span class="line">    <span class="comment"># 从s到min(s+10,lf[n]), 用中括号括起来生成列表</span></span><br><span class="line">    r = [f(n, t) <span class="keyword">for</span> t <span class="keyword">in</span> range(s, min(s + <span class="number">10</span>, lf[n]))]</span><br><span class="line">    print(<span class="string">''</span>.join(r))</span><br></pre></td></tr></table></figure><h3 id="C-AC代码1-与题解思路相同的"><a href="#C-AC代码1-与题解思路相同的" class="headerlink" title="C++AC代码1_与题解思路相同的"></a>C++AC代码1_与题解思路相同的</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line">ll len[<span class="number">505</span>];</span><br><span class="line"><span class="built_in">string</span> ans;</span><br><span class="line"><span class="keyword">int</span> T,n;ll k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x,ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> <span class="string">"COFFEE"</span>[k];</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">2</span>) <span class="keyword">return</span> <span class="string">"CHICKEN"</span>[k];</span><br><span class="line">    <span class="keyword">if</span>(k&gt;=len[x<span class="number">-2</span>]) <span class="keyword">return</span> f(x<span class="number">-1</span>,k-len[x<span class="number">-2</span>]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> f(x<span class="number">-2</span>,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    len[<span class="number">1</span>] = <span class="number">6</span>,len[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    ll mx = <span class="number">1e13</span>;</span><br><span class="line">    <span class="comment">/*这里最好不要break,否则会造成数组的部分是0值，除非先赋值为mx</span></span><br><span class="line"><span class="comment">    (当然也可以使用C++AC代码二的特殊提前处理去使用break)</span></span><br><span class="line"><span class="comment">    但是可以通过min控制数值大小，以免引发数据溢出错误</span></span><br><span class="line"><span class="comment">    可以使用min的原因是，k不会到很大的数据范围</span></span><br><span class="line"><span class="comment">    然后递归的时候是一样的,最终也是递归到x==1,x==2</span></span><br><span class="line"><span class="comment">    是按照题中斐波那契递归回去的，所以不会出错*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">500</span>;i++)&#123;</span><br><span class="line">        len[i] = min(len[i<span class="number">-2</span>]+len[i<span class="number">-1</span>],mx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">cin</span>&gt;&gt;T;T--;)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        k-=<span class="number">1</span>;</span><br><span class="line">        ans.clear();</span><br><span class="line">        ll tn = min(k+<span class="number">10</span>,len[n]);</span><br><span class="line">        <span class="keyword">for</span>(ll i=k;i&lt;tn;i++)&#123;</span><br><span class="line">            ans += f(n,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-AC代码2"><a href="#C-AC代码2" class="headerlink" title="C++AC代码2"></a>C++AC代码2</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll len[<span class="number">505</span>];</span><br><span class="line"><span class="built_in">string</span> str[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, ll a, ll b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*substr的第二个参数是长度*/</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt;= <span class="number">2</span>) <span class="keyword">return</span> str[x].substr(a<span class="number">-1</span>, b);</span><br><span class="line">    <span class="keyword">if</span>(a+b<span class="number">-1</span> &lt;= len[x<span class="number">-2</span>]) <span class="keyword">return</span> dfs(x<span class="number">-2</span>, a, b);</span><br><span class="line">    <span class="keyword">if</span>(a &gt; len[x<span class="number">-2</span>]) <span class="keyword">return</span> dfs(x<span class="number">-1</span>, a-len[x<span class="number">-2</span>], b);</span><br><span class="line">    <span class="comment">/*分段后..x-1可以直接从1开始了*/</span></span><br><span class="line">    <span class="keyword">return</span> dfs(x<span class="number">-2</span>, a, len[x<span class="number">-2</span>]-a+<span class="number">1</span>) + dfs(x<span class="number">-1</span>, <span class="number">1</span>, b-(len[x<span class="number">-2</span>]-a+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    str[<span class="number">1</span>] = <span class="string">"COFFEE"</span>; str[<span class="number">2</span>] = <span class="string">"CHICKEN"</span>;</span><br><span class="line">    len[<span class="number">1</span>] = <span class="number">6</span>, len[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    ll mx = <span class="number">1e17</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">500</span>; i++) &#123;</span><br><span class="line">        <span class="comment">/*前缀和*/</span></span><br><span class="line">        len[i] = len[i<span class="number">-1</span>] + len[i<span class="number">-2</span>];</span><br><span class="line">        <span class="comment">/* i=80就会跳出*/</span></span><br><span class="line">        <span class="keyword">if</span>(len[i] &gt; mx) &#123;<span class="comment">/*cout&lt;&lt;i&lt;&lt;endl;*/</span><span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; ll k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="comment">/*提前给x降低大小，所以就可以前面使用break，并且减少递归的次数*/</span></span><br><span class="line">        <span class="keyword">for</span>(x = <span class="number">1</span>; x &lt;= n; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(len[x] &gt;= k+<span class="number">10</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == n+<span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; dfs(x<span class="number">-1</span>, k, min(<span class="number">10l</span>l, len[x]-k+<span class="number">1</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>((n-x)%<span class="number">2</span>) x++;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; dfs(x, k, min(<span class="number">10l</span>l, len[x]-k+<span class="number">1</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>不用去刻意讨好谁，因为只有做自己，才配得上最棒的人生</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>狼胆带你每天头铁一题</tag>
        <tag>斐波那契数列</tag>
        <tag>递归</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客多校9E题详解_算法日常[11/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-11-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="组合数学思维题"><a href="#组合数学思维题" class="headerlink" title="组合数学思维题"></a>组合数学思维题</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://ac.nowcoder.com/acm/contest/889/E" target="_blank" rel="noopener">2019牛客多校9 E题</a></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B9%9D%E5%9C%BA/E_ti1.png" alt="ti1"></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B9%9D%E5%9C%BA/E_ti2.png" alt="ti2"></p><h2 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h2><p><strong>其实解法一二的本质内核是一样的，可以都看一下</strong></p><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>当合并这两个集合的时候，应该将这两个集合合并后消失的贡献减去<br>消失的贡献就应该是选择了一个a，选择了一个b，从剩下的众多集合中选择两个<br>(即cd,ce,ef……)那么这个怎么算呢，可以用完全平方公式来推导<br>(a+b+c+d)^2=a^2+b^2+c^2+d^2+2ab+2ac+2bc+2ad+2bd+2cd<br>所以众多集合中选择任意选择两个的情况可以用（和的平方-平方的和）/2来求（最重要的一步）</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B9%9D%E5%9C%BA/E_tijie_ldm.png" alt="tijie"></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><h3 id="解法一代码"><a href="#解法一代码" class="headerlink" title="解法一代码"></a>解法一代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> f[MAXN], sz[MAXN];</span><br><span class="line">ll sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sqr</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1l</span>l * x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] == x ? x : (f[x] = getf(f[x]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    ll ans = (__int128) n * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) * (n - <span class="number">3</span>) / <span class="number">24</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        f[i] = i;</span><br><span class="line">        sz[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*最开始的平方和*/</span></span><br><span class="line">    sum = n;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        u = getf(u);</span><br><span class="line">        v = getf(v);</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">0</span> || u==v) <span class="keyword">goto</span> END;</span><br><span class="line">        <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">            <span class="comment">/*减掉合并部分的平方和*/</span></span><br><span class="line">            sum -= sqr(sz[u]) + sqr(sz[v]);</span><br><span class="line">            <span class="comment">/*后面的(sqr(n - sz[u] - sz[v]) - sum) / 2;就是`和的平方`-`平方和`=`剩下的所有两两组合`*/</span></span><br><span class="line">            ll tmp = <span class="number">1l</span>l * sz[u] * sz[v] * (sqr(n - sz[u] - sz[v]) - sum) / <span class="number">2</span>;</span><br><span class="line">            f[u] = v;</span><br><span class="line">            sz[v] += sz[u];</span><br><span class="line">            <span class="comment">/*新的平方和的维护*/</span></span><br><span class="line">            sum += sqr(sz[v]);</span><br><span class="line">            <span class="comment">/*减去合并减少的贡献值*/</span></span><br><span class="line">            ans -= tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        END:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二代码"><a href="#解法二代码" class="headerlink" title="解法二代码"></a>解法二代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll C[maxn][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> p[maxn], sz[maxn], cnt[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++) C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            C[i][j] = C[i<span class="number">-1</span>][j] + C[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == p[x] ? x : p[x] = Find(p[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx = Find(x), fy = Find(y);</span><br><span class="line">    <span class="keyword">if</span>(fx != fy) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fx &gt; fy) swap(fx, fy);</span><br><span class="line">        p[fx] = fy;</span><br><span class="line">        ll tp = C[n-sz[fx]-sz[fy]][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : st) &#123;</span><br><span class="line">            tp -= C[i][<span class="number">2</span>]*cnt[i];</span><br><span class="line">        &#125;</span><br><span class="line">        tp += C[sz[fx]][<span class="number">2</span>]+C[sz[fy]][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(tp &gt; <span class="number">0</span>) ans -= <span class="number">1L</span>L*sz[fx]*sz[fy]*tp;</span><br><span class="line">        cnt[sz[fx]]--;</span><br><span class="line">        cnt[sz[fy]]--;</span><br><span class="line">        <span class="keyword">if</span>(cnt[sz[fx]] == <span class="number">0</span>) st.erase(sz[fx]);</span><br><span class="line">        <span class="keyword">if</span>(cnt[sz[fy]] == <span class="number">0</span>) st.erase(sz[fy]);</span><br><span class="line">        sz[fy] += sz[fx];</span><br><span class="line">        cnt[sz[fy]]++;</span><br><span class="line">        st.insert(sz[fy]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        sz[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[<span class="number">1</span>] = n; st.insert(<span class="number">1</span>);</span><br><span class="line">    ans = C[n][<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        Union(u, v);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>生活总是很奇妙，我们到底该去向何方？</p><p>世俗的成功吗？还是当下的快乐呢？</p><p>珍惜身边的人呢？还是继续寻找？</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>狼胆带你每天头铁一题</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>折半搜索_算法日常[10/521]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-10-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://ac.nowcoder.com/acm/contest/889/D" target="_blank" rel="noopener">2019牛客多校9 D题</a></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B9%9D%E5%9C%BA/D_ti.png" alt="D_ti"></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>折半搜索,详见下面的算法推荐和下面的AC的代码</p><p><a href="https://oi-wiki.org/search/#meet-in-middle" target="_blank" rel="noopener">meet-in-middle</a></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ll v;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; r) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt; r.v; &#125;</span><br><span class="line">&#125;b[maxn];</span><br><span class="line">ll arr[<span class="number">40</span>];</span><br><span class="line">ll a[maxn], c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; ll sum;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;sum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;arr[i]);</span><br><span class="line">    <span class="keyword">int</span> x = n/<span class="number">2</span>, y = n-x;</span><br><span class="line">    <span class="keyword">int</span> up1 = (<span class="number">1</span>&lt;&lt;x), up2 = (<span class="number">1</span>&lt;&lt;y);</span><br><span class="line">    <span class="comment">/*全0到全1串的遍历，然后之后是对每个串的逐位遍历，记录此串的和值*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &amp; (<span class="number">1</span>&lt;&lt;j)) a[i] += arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up2; i++) &#123;</span><br><span class="line">        b[i].id = i; b[i].v = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &amp; (<span class="number">1</span>&lt;&lt;j)) b[i].v += arr[x+j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*让B[i]数组有序，然后使用lower_bound去搜索*/</span></span><br><span class="line">    sort(b, b+up2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up2; i++) c[i] = b[i].v;</span><br><span class="line">    <span class="comment">/*这里复杂度是2^18*log(2^18) = 4.7*10^6左右*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up1; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> p = lower_bound(c, c+up2, sum-a[i])-c;</span><br><span class="line">        <span class="keyword">if</span>(c[p]+a[i] == sum) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &amp; (<span class="number">1</span>&lt;&lt;j)) <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> id = b[p].id;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(id &amp; (<span class="number">1</span>&lt;&lt;j)) <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天叨叨一句"><a href="#每天叨叨一句" class="headerlink" title="每天叨叨一句"></a>每天叨叨一句</h1><h2 id="“我不同意你，-但我可以支持你”"><a href="#“我不同意你，-但我可以支持你”" class="headerlink" title="“我不同意你， 但我可以支持你”"></a>“我不同意你， 但我可以支持你”</h2><p>李开复原来是学法律的，但他爱好计算机，后来师从美国卡内基梅隆大学计算机学院院长罗杰·瑞迪。</p><p>罗杰非常喜欢李开复，把自己的知识毫无保留地传授给李开复，使得他在编程水平突飞猛进。但随着研究的深入，李开复与导师有了分歧，尤其是在计算机语音识别系统研究时，罗杰主张用传统的方法，可是李开复却想从另一个方向，这悖离了主流，有别于大多数语音技术同行。怎么办？导师给李开复指出来了，让他“悬崖勒马”。可是李开复还是想按照自己的想法做。</p><p>有不少关系李开复的好心人提醒他：“你在计算机领域还乳臭未干，人家罗杰是美国国家工程学院和美国艺术与科学学院院士，你听导师的，可以少走弯路。”可是李开复却说：“我想另辟溪径。”“可是这样会得罪导师，如果得不到他的支持，你可能寸步难行。你另搞一套，如果成了，让他多没面子。相反你顺从了他，他是总统特别顾问委员会信息委员会成员、‘图灵奖’获得者，有他的提携，将来前途不可限量。”可是那时的李开复没想那么复杂，还是决定走自己的路。</p><p>没想到，尽管导师批评了李开复几次，可是李开复一意孤行。罗杰说：<strong>“作为科学家，我也不是全知全能。我不同意你的看法，但我可以支持你。”</strong>这让李开复非常意外。</p><p>此后，李开复就放开手脚大干起来。不久，罗杰又来问李开复：“有没有什么困难？”“暂时没有。”“如果有什么需要我帮助的，尽管说啊。”李开复反问道：“你不生我的气啊？”“‘不认同’不等于‘不支持’。”罗杰说。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.sina.com.cn/s/blog_98acb6e70102w95o.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_98acb6e70102w95o.html</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>狼胆带你每天头铁一题</tag>
        <tag>折半搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>10进制矩阵快速幂-狼胆带你每天头铁一题-算法日常[9/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-9-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="头铁来源"><a href="#头铁来源" class="headerlink" title="头铁来源"></a>头铁来源</h1><p>因为狼胆小编本人比较垃圾，所以只能每天带大家头铁一题简单常识题(大佬眼中的常识，我这个蒟蒻还只能头铁)，希望能帮助到小白，那就很开心了</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://ac.nowcoder.com/acm/contest/885/B" target="_blank" rel="noopener">2019牛客多校5 B题</a></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%BA%94%E5%9C%BA/B_ti.png" alt="B_ti"></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="理想中的草稿状态"><a href="#理想中的草稿状态" class="headerlink" title="理想中的草稿状态"></a>理想中的草稿状态</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%BA%94%E5%9C%BA/%E7%90%86%E6%83%B3%E8%8D%89%E7%A8%BF.png" alt="理想"></p><h3 id="真实的草稿状态"><a href="#真实的草稿状态" class="headerlink" title="真实的草稿状态"></a>真实的草稿状态</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%BA%94%E5%9C%BA/%E7%8E%B0%E5%AE%9E%E8%8D%89%E7%A8%BF.png" alt="真实"></p><h3 id="dreammoon大佬的官方的题解也可以看看"><a href="#dreammoon大佬的官方的题解也可以看看" class="headerlink" title="dreammoon大佬的官方的题解也可以看看"></a>dreammoon大佬的官方的题解也可以看看</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%BA%94%E5%9C%BA/%E8%BF%99%E9%87%8C%E7%9A%84%E5%8D%95%E4%BD%8D%E6%98%AFbase%EF%BC%8C%E5%BA%95%E7%9A%84%E6%84%8F%E6%80%9D...%E4%BB%A5%E5%89%8D%E4%B8%80%E7%9B%B4get%E4%B8%8D%E5%88%B0%E6%A2%A6%E6%9C%88%E5%A4%A7%E4%BD%AC%E7%9A%84%E7%82%B9.png" alt></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">3000010</span>;</span><br><span class="line">ULL MOD;</span><br><span class="line"><span class="keyword">char</span> s[SIZE];</span><br><span class="line"><span class="comment">/*矩阵相乘，第一行乘以第一列，第一行乘以第二列……也可以使用for两重循环求*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(ULL* c1, ULL* c2, ULL *res)</span></span>&#123;</span><br><span class="line">    res[<span class="number">0</span>] = (c1[<span class="number">0</span>] * c2[<span class="number">0</span>] + c1[<span class="number">1</span>] * c2[<span class="number">2</span>]) % MOD;</span><br><span class="line">    res[<span class="number">1</span>] = (c1[<span class="number">0</span>] * c2[<span class="number">1</span>] + c1[<span class="number">1</span>] * c2[<span class="number">3</span>]) % MOD;</span><br><span class="line">    res[<span class="number">2</span>] = (c1[<span class="number">2</span>] * c2[<span class="number">0</span>] + c1[<span class="number">3</span>] * c2[<span class="number">2</span>]) % MOD;</span><br><span class="line">    res[<span class="number">3</span>] = (c1[<span class="number">3</span>] * c2[<span class="number">3</span>] + c1[<span class="number">2</span>] * c2[<span class="number">1</span>]) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> x1,x2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x1, &amp;x2, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%llu"</span>,s, &amp;MOD);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 统计长度，并且把个位的值(即最后一位的值)减去1 */</span></span><br><span class="line">    <span class="keyword">for</span>(; s[len]; len++);</span><br><span class="line">    s[len<span class="number">-1</span>]--;</span><br><span class="line">    <span class="comment">/* 个位减掉了之后向前面借位 */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; s[i] &lt; <span class="string">'0'</span>; i--)&#123;</span><br><span class="line">        s[i] = <span class="string">'9'</span>;</span><br><span class="line">        s[i<span class="number">-1</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    ULL now0 = x1, now1 = x2;</span><br><span class="line">    ULL d[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">2</span>] = b;</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">3</span>] = a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> it = len - <span class="number">1</span>; it &gt;= <span class="number">0</span>; it--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(d[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span>(ULL) * <span class="number">12</span>);</span><br><span class="line">        <span class="comment">/*A "常数"矩阵相乘4次*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">1</span>; p &lt; <span class="number">4</span>; p++)&#123;</span><br><span class="line">            mul(d[p<span class="number">-1</span>], d[p<span class="number">-1</span>], d[p]);</span><br><span class="line">        &#125;</span><br><span class="line">        s[it] -= <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">4</span>; p++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((s[it] &gt;&gt; p) &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                ULL* ml = d[p];</span><br><span class="line">                <span class="built_in">std</span>::tie(now0, now1) = <span class="built_in">std</span>::make_pair((ml[<span class="number">0</span>] * now0 + ml[<span class="number">1</span>] * now1) % MOD,(ml[<span class="number">2</span>] * now0 + ml[<span class="number">3</span>] * now1) % MOD);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mul(d[<span class="number">1</span>], d[<span class="number">3</span>], d[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%llu\n"</span>, now1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="少量知识点"><a href="#少量知识点" class="headerlink" title="少量知识点"></a>少量知识点</h3><p><a href="http://www.cplusplus.com/reference/tuple/tie/?kw=tie" target="_blank" rel="noopener">tie</a></p><p>pair是tuple的一个子集</p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>今天看到一禅小和尚: 我们尝遍生活的苦，却都只是为了过好平凡的一生</p><p><strong>但我觉得如果自己明知道人生是苦，明知道<a href="https://www.wolfdan.cn/2019/08/05/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-4-100/">人是基因的机器人(参见算法日常4的叨叨)</a>，却认认认真真地选择好好生活，这就是一种伟大，这就是自由，这就是自己的突破，就是自己的英雄！</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>狼胆带你每天头铁一题</tag>
        <tag>数学</tag>
        <tag>矩阵快速幂</tag>
        <tag>10进制矩阵快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title>银联挑战赛复赛A,B题_算法日常[8/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-8-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>8月10号是计算机设计大赛决赛答辩的最后一天，这天下午是牛客多校8，晚上是银联挑战赛复赛，队友出去吃吃喝喝了，我点个外卖，打着比赛，然后第一题就卡住不会做，然后自闭了，果然银联的比赛很重视数学题啊啊啊，是我数学题没怎么练，太菜了—-&gt;所以菜导致既没有吃到好东西，又导致爆零没太多收获，所以还是需要多多努力</p><h1 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h1><h2 id="爱喝「肥宅快乐水」的班长"><a href="#爱喝「肥宅快乐水」的班长" class="headerlink" title="爱喝「肥宅快乐水」的班长"></a>爱喝「肥宅快乐水」的班长</h2><p><a href="https://nanti.jisuanke.com/t/40548" target="_blank" rel="noopener">爱喝「肥宅快乐水」的班长</a></p><h2 id="题目解法"><a href="#题目解法" class="headerlink" title="题目解法"></a>题目解法</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/2019%E9%93%B6%E8%81%94%E6%8C%91%E6%88%98%E8%B5%9B%E5%A4%8D%E8%B5%9B/A_an.png" alt="A_an"></p><h2 id="看不懂的知识链接"><a href="#看不懂的知识链接" class="headerlink" title="看不懂的知识链接"></a>看不懂的知识链接</h2><p><a href="https://zh.wikipedia.org/wiki/%E9%9A%94%E6%9D%BF%E6%B3%95" target="_blank" rel="noopener">隔板法</a></p><p>扩展的隔板法中：</p><p>转化前的空盒 == 转化后每个盒子至少放一个</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e3</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> C[M][M];</span><br><span class="line"><span class="keyword">int</span> T,n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll &amp;a,ll v)</span></span>&#123;</span><br><span class="line">    a += v;</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= mod) a-=mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            C[i][j]=C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(C[i][j]&gt;=mod) C[i][j]-=mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    pre();</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;C[n+m<span class="number">-2</span>][m<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h1><h2 id="整数对"><a href="#整数对" class="headerlink" title="整数对"></a>整数对</h2><p><a href="https://nanti.jisuanke.com/t/40549" target="_blank" rel="noopener">整数对</a></p><h2 id="题目解法-1"><a href="#题目解法-1" class="headerlink" title="题目解法"></a>题目解法</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/2019%E9%93%B6%E8%81%94%E6%8C%91%E6%88%98%E8%B5%9B%E5%A4%8D%E8%B5%9B/B_an.png" alt="B_an"></p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll T,n,m,p,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        ll x = n/p;</span><br><span class="line">        <span class="keyword">for</span>(ll r = <span class="number">0</span>; r &lt; p ; r++ )&#123;</span><br><span class="line">            <span class="comment">/*求出b的种类数*/</span></span><br><span class="line">            ll bn = m/(p/__gcd(r,p));</span><br><span class="line">            <span class="comment">/*分别对应题解的1,2,3种情况,其实1,3可以合并*/</span></span><br><span class="line">            <span class="keyword">if</span>(!r) ans+=x*bn;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span>&lt;r &amp;&amp; r&lt;=n%p) ans+=(x+<span class="number">1</span>)*bn;</span><br><span class="line">            <span class="keyword">else</span> ans+=x*bn;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>人心的成见如同一座大山，我们总是口上说不能有偏见，其实真正的内心想法却不是这样的…</p><p>所以我对别人的偏见，我只能尽量克制，让自己理性对待，然后做之不止，乃成君子</p><p>对于别人对自己的偏见不要在意，而是要专注自己的目标</p><p>感觉自己生来就有一种追求挑战的血液，在小时候尤为明显，但是感觉在长久的教化过程中削弱了，所以我想要找回本真，生命不息，战斗不止，和天生的不公斗到底，做自己的英雄</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>组合数学</tag>
        <tag>隔板法</tag>
        <tag>数学思维题</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第16周[16/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC16%E5%91%A8-16-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.8/2019.8.10" target="_blank" rel="noopener">牛客多校8的签到</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://humanparts.medium.com/being-happy-is-hard-work-bcc222913c79" target="_blank" rel="noopener">Being Happy Is Hard Work</a><br>好多生词啊，所以决定开始背单词<br><strong>Happiness, in other words, is practiced.</strong></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://oi-wiki.org/ds/seg/" target="_blank" rel="noopener">打算法比赛一定要熟练使用线段树啊，血的教训</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-4-100/">2019杭电多校1006和1007算法日常[4/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8-5-100/">后缀数组-算法学习日常[5/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-6-100/">2019杭电多校6_1005算法日常[6/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-7-100/">2019牛客多校8_B题算法日常[7/100]</a></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>生活总有太多的美好无法用相机记录下来，所以那就给每一个当下投以最好的微笑吧</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客多校8_B题算法日常[7/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-7-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接以及描述"><a href="#题目链接以及描述" class="headerlink" title="题目链接以及描述"></a>题目链接以及描述</h2><p><a href="https://ac.nowcoder.com/acm/contest/888/B" target="_blank" rel="noopener">2019牛客多校8_B题</a><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%85%AB%E5%9C%BA/B1.png" alt></p><h2 id="题意以及思路"><a href="#题意以及思路" class="headerlink" title="题意以及思路"></a>题意以及思路</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%85%AB%E5%9C%BA/B2.png" alt></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn], c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="comment">/*c[i]记录的是a[i]的上一个位置加1的位置*/</span></span><br><span class="line">        c[i] = b[a[i]]+<span class="number">1</span>;</span><br><span class="line">        b[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ans += <span class="number">1L</span>L*(n-i+<span class="number">1</span>)*(i-c[i]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每日一句叨叨"><a href="#每日一句叨叨" class="headerlink" title="每日一句叨叨"></a>每日一句叨叨</h1><p><strong>但求精进,无问西东</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>思维题</tag>
        <tag>算法学习日常</tag>
      </tags>
  </entry>
  <entry>
    <title>2019杭电多校6_1005算法日常[6/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-6-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6638" target="_blank" rel="noopener">2019杭电多校6_1005_HDU6638</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="自己"><a href="#自己" class="headerlink" title="自己"></a>自己</h3><p>一开想偏了，想着像以前0,1矩阵那种同权值点一样叠加成为矩形的最大面积来求解，这样子就能让复杂度在O(n^2)的样子</p><p>然后并非如此，这里的权值w是一个可正可负的整数…自己隐隐约约地感觉复杂度要达到O(n^2*log(n)),但是没有往下想，虽然想了也不一定会,,,emmmm,继续努力吧</p><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><ul><li>首先将纵坐标离散化到 O(n) 的范围内，方便后续的处理。</li><li>将所有点按照横坐标排序，枚举矩形的上边界，然后往后依次加入每个点，这样就确定了矩形的上下边界。</li><li>设 v[y] 表示矩形内部纵坐标为 y 的点的权值和，则答案为 v 的最大子段和，用线段树维护带修改的最大子段和即可。</li><li>时间复杂度 O(n^2*log(n))</li></ul><h2 id="std理解版"><a href="#std理解版" class="headerlink" title="std理解版"></a>std理解版</h2><p>今天比较晚了，明天要出一趟远门，所以暂时没有手写，对不起自己啊，等回家一定要好好把这个重新写几遍<br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2010</span>,M=<span class="number">4100</span>;</span><br><span class="line"><span class="keyword">int</span> Case,n,m,i,j,k,cb,b[N],pos[N];ll pre[M],suf[M],s[M],v[M],ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span><span class="keyword">int</span> x,y,z;&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> E&amp;a,<span class="keyword">const</span> E&amp;b)</span></span>&#123;<span class="keyword">return</span> a.x&lt;b.x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*用纵坐标建的线段树，大佬对于线段树的理解以及如同我对1+1的理解一样了！*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">  pre[x]=suf[x]=s[x]=v[x]=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">    pos[a]=x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid=(a+b)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  build(x&lt;&lt;<span class="number">1</span>,a,mid),build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">  x=pos[x];</span><br><span class="line">  s[x]+=p;</span><br><span class="line">  <span class="keyword">if</span>(s[x]&gt;<span class="number">0</span>)pre[x]=suf[x]=v[x]=s[x];<span class="keyword">else</span> pre[x]=suf[x]=v[x]=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">/*上传的操作精辟,orz*/</span></span><br><span class="line">  <span class="keyword">for</span>(x&gt;&gt;=<span class="number">1</span>;x;x&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">/*根的左边的 = max(左子树之前的,左子树+右子树之前的)*/</span></span><br><span class="line">    pre[x]=max(pre[x&lt;&lt;<span class="number">1</span>],s[x&lt;&lt;<span class="number">1</span>]+pre[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">/*根的右边的 = max(右子树右边的,右子树+左子树右边的)*/</span></span><br><span class="line">    suf[x]=max(suf[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],s[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+suf[x&lt;&lt;<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">/*s是直接叠加的*/</span></span><br><span class="line">    s[x]=s[x&lt;&lt;<span class="number">1</span>]+s[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    <span class="comment">/*区间最大值 = max(左子树最大,右子树最大,左子树后面的+左子树前面的)*/</span></span><br><span class="line">    v[x]=max(max(v[x&lt;&lt;<span class="number">1</span>],v[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]),suf[x&lt;&lt;<span class="number">1</span>]+pre[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Case);</span><br><span class="line">  <span class="keyword">while</span>(Case--)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(cb=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;e[i].x,&amp;e[i].y,&amp;e[i].z);</span><br><span class="line">      b[++cb]=e[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*离散化纵坐标*/</span></span><br><span class="line">    sort(b+<span class="number">1</span>,b+cb+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(m=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=cb;i++)<span class="keyword">if</span>(i==<span class="number">1</span>||b[i]!=b[m])b[++m]=b[i];</span><br><span class="line">    <span class="comment">/*给横坐标排序*/</span></span><br><span class="line">    sort(e+<span class="number">1</span>,e+n+<span class="number">1</span>,cmp);</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*用离散化后的纵坐标覆盖掉原来的纵坐标*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)e[i].y=lower_bound(b+<span class="number">1</span>,b+m+<span class="number">1</span>,e[i].y)-b;</span><br><span class="line">    <span class="comment">/*枚举上边界，x是行号，是上边界*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(i==<span class="number">1</span>||e[i].x!=e[i<span class="number">-1</span>].x)&#123;</span><br><span class="line">      build(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">      <span class="comment">/*加入点确定好下边界，这样上下边界都确定好了*/</span></span><br><span class="line">      <span class="keyword">for</span>(j=i;j&lt;=n;j=k)&#123;</span><br><span class="line">        <span class="comment">/*又是逐步插入空树维护区间最大值的操作*/</span></span><br><span class="line">        <span class="keyword">for</span>(k=j;k&lt;=n&amp;&amp;e[j].x==e[k].x;k++)change(e[k].y,e[k].z);</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;v[<span class="number">1</span>])ans=v[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>今天是情人节，然而…没得女朋友…不过有队友和我一起大杭电多校还是很开心的啦(<del>还是有点点失落</del>)</p><h2 id="虽然"><a href="#虽然" class="headerlink" title="虽然"></a>虽然</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8%E7%9A%84%E5%8F%A8%E5%8F%A8/6%E4%B8%83%E5%A4%95%E6%83%85%E4%BA%BA%E8%8A%82/1.jpg" alt></p><h2 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h2><p><strong>谁终将声震人间，必长久深自缄默</strong></p><p><strong>谁终将点燃闪电，必长久如云漂泊</strong></p><p><strong>全力以赴打完这一段时光的退役赛一定会是一个大学乃至人生最珍贵的记忆</strong>，所以这段时间先不要让自己被一个体内的激素控制，<strong>等时机到了，一定会更加美好！加油吧，少年！</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>线段树</tag>
        <tag>算法学习日常</tag>
      </tags>
  </entry>
  <entry>
    <title>后缀数组-算法学习日常[5/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8-5-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="后缀数组论文分享"><a href="#后缀数组论文分享" class="headerlink" title="后缀数组论文分享"></a>后缀数组论文分享</h1><p><a href="https://github.com/wolfdan666/BlogPic/tree/master/%E7%AE%97%E6%B3%95/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84" target="_blank" rel="noopener">后缀数组论文分享</a></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>人一能之，己百之；人十能之，己千之。果能此道矣，虽愚必明，虽柔必强。</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>后缀数组</tag>
      </tags>
  </entry>
  <entry>
    <title>2019杭电多校1006和1007算法日常[4/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-4-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><ul><li>今天是杭电多校第5场，然后1006签到本来应该10mins内写完，然后我菜鸡写了2小时(各种问题<del>不熟练</del>和<del>紧张</del>)，赛后发现有大佬用dc3(一种据说复杂度O(n)的后缀数组算法,发现自己孤陋寡闻)</li><li>1007真滴有趣…闪电蛇皮走位，然后自己想复杂了一点点…</li></ul><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2019+Multi-University+Training+Contest+5&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener">2019杭电多校5</a></p><h2 id="1006解法"><a href="#1006解法" class="headerlink" title="1006解法"></a>1006解法</h2><p>Ekmp，用s.substr(1)的串来做ekmp函数的原串，s做ekmp函数的匹配串，这样跑一次ekmp就行，然后累加extend</p><p><a href="https://segmentfault.com/a/1190000008663857" target="_blank" rel="noopener">ekmp学习教程·我觉得比较好的一个(我也用这个学的)</a></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="comment">// int next[1000000];</span></span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">int</span> extend[<span class="number">1000000</span>];</span><br><span class="line"><span class="built_in">string</span> S, T;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="comment">/* 求解 T 中 next[]，注释参考 GetExtend() */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="built_in">string</span> &amp; T, <span class="keyword">int</span> &amp; m, <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, p = <span class="number">0</span>;</span><br><span class="line">    next[<span class="number">0</span>] = m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= p || i + next[i - a] &gt;= p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= p)</span><br><span class="line">                p = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (p &lt; m &amp;&amp; T[p] == T[p - i])</span><br><span class="line">                p++;</span><br><span class="line"></span><br><span class="line">            next[i] = p - i;</span><br><span class="line">            a = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            next[i] = next[i - a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 求解 extend[] */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetExtend</span><span class="params">(<span class="built_in">string</span> &amp; S, <span class="keyword">int</span> &amp; n, <span class="built_in">string</span> &amp; T, <span class="keyword">int</span> &amp; m, <span class="keyword">int</span> extend[], <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, p = <span class="number">0</span>;</span><br><span class="line">    GetNext(T, m, next);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= p || i + next[i - a] &gt;= p) <span class="comment">// i &gt;= p 的作用：举个典型例子，S 和 T 无一字符相同</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= p)</span><br><span class="line">                p = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (p &lt; n &amp;&amp; p - i &lt; m &amp;&amp; S[p] == T[p - i])</span><br><span class="line">                p++;</span><br><span class="line"></span><br><span class="line">            extend[i] = p - i;</span><br><span class="line">            a = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            extend[i] = next[i - a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;S;</span><br><span class="line">        n = S.size();</span><br><span class="line">        T = S.substr(<span class="number">1</span>);</span><br><span class="line">        m = n - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*可能程序以为我用了前面的函数声明中的next[],所以说我模棱两可,加个全局的命名空间就行</span></span><br><span class="line"><span class="comment">        或者换个变量名也行*/</span></span><br><span class="line">        <span class="comment">// GetExtend(T, m, S, n, extend, ::next);</span></span><br><span class="line">        GetExtend(T, m, S, n, extend, nxt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; extend[j] &lt;&lt; " \n"[j==m-1];</span></span><br><span class="line">            ans += extend[j]+j==n<span class="number">-1</span> ? extend[j] : extend[j]+<span class="number">1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1007解法"><a href="#1007解法" class="headerlink" title="1007解法"></a>1007解法</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p>a[i] = a[i-1]+a[i-3],就是对于第i项有两种情况，要么是直接往上走要么是闪电<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E6%9D%AD%E7%94%B5/%E7%AC%AC%E4%BA%94%E5%9C%BA/1007_an.png" alt></p><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>dls说暴力打表找规律比较不用动脑子，哭了，臭大佬，好过分</p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a[<span class="number">1</span>] = a[<span class="number">2</span>] = a[<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; maxn; i++) a[i] = (a[i<span class="number">-1</span>]+a[i<span class="number">-3</span>])%mod;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) swap(l, r);</span><br><span class="line">        <span class="keyword">if</span>(l != <span class="number">1</span>) l++;</span><br><span class="line">        <span class="keyword">if</span>(r != n) r--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a[r-l+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>因为今天一直在听dls的直播，尽管后面的题听不懂，想听听dls一般解题思路是啥(<del>其实后面听不懂就容易发呆了</del>),所以今天还没有补很多题，然后就只写了这么一点点,<del>我好弱啊</del></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>人总得有个目标，才能继续勇敢而坚强地活着，大部分成年人，在三十岁左右已经没了活着的目标，为了不让自己死去，他们制造了一个孩子，有了这个小孩，他们终于找到了努力工作和继续活下去的目标。</p><p>不，不是的，那是基因的谎言…让你这个机器人帮忙传递他们的存在</p><p>但如果你知道这是谎言，并决定真的要选择它，那才是真正的选择</p><p>教育本来就是不平等的，有些人很年轻就是OI金牌了，然而有些人还在发愁下次要怎么骗外公外婆我出去玩了，其实是偷偷跑去了网吧，如饥似渴地<strong>享受</strong>那几个小时的奥比岛，赛尔号，功夫派，洛克王国，地下城与勇士，英雄联盟…(从小学到高中渐渐变化的是游戏),然而别人早就享受到了算法的美妙，并将来很大程度能因此受到更好的教育，然后享受社会上最好的资源，过上幸福的生活，虽然我不能这样定义幸福，但是不平等确实存在，想要跨越社会阶层的鸿沟，可能要花上很久很久的努力.不过，我认为，跨越社会阶层的鸿沟，才是这个和平时代个人最英雄的挑战.做你自己的英雄，不断超越自己，并同时珍爱身边的人，过好这一生…</p><p>今天说的好像有点小多，叨叨叨多了，快滚去运动洗澡睡觉，明天继续来补题</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>ekmp</tag>
      </tags>
  </entry>
  <entry>
    <title>Python写字符串模拟真香_算法日常[3/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-3-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://ac.nowcoder.com/acm/contest/886/B" target="_blank" rel="noopener">2019牛客多校第6场B题</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%85%AD%E5%9C%BA/B_ti.png" alt></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>把8段中每段都处理成为一个整数,然后找出最长的连续0,相同的长度的话就让0放前面的段(因为0的ASCII码是48,比:的58小),然后进行判断性输出(<strong>数字用%x可以实现以16进制输出</strong>)</p><p><strong>详见代码注释</strong></p><h3 id="C-版AC代码"><a href="#C-版AC代码" class="headerlink" title="C++版AC代码"></a>C++版AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*"%x"以16进制的形式输出,是我孤陋寡闻了*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ii=<span class="number">1</span>;ii&lt;=T;ii++)&#123;</span><br><span class="line">        <span class="keyword">int</span> f=<span class="number">0</span>,l=<span class="number">0</span>,nl=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*观察下面的代码容易知道,只有最前面为0的时候是f=1,</span></span><br><span class="line"><span class="comment">        其他地方为0,f为i-nl(减掉了0的长度即为0开始的地方)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        综上:</span></span><br><span class="line"><span class="comment">        f是最长连续0开始的位置</span></span><br><span class="line"><span class="comment">        然后l是保存维护最长连续0的长度</span></span><br><span class="line"><span class="comment">        nl是当前的最长连续0的长度*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)&#123;</span><br><span class="line">            a[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">16</span>;j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;t);</span><br><span class="line">                a[i]=a[i]*<span class="number">2</span>+t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!a[i]) nl++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">/*判断现在的连续0的数目是否超过之前的连续0的数目*/</span></span><br><span class="line">                <span class="keyword">if</span>(nl&gt;=l&amp;&amp;nl&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                    f=i-nl;l=nl;</span><br><span class="line">                &#125;</span><br><span class="line">                nl=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">8</span>&amp;&amp;nl&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nl&gt;l)&#123;</span><br><span class="line">                    f=i-nl+<span class="number">1</span>;l=nl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*末尾有0，但是末尾的连续0和最前面的连续0相同</span></span><br><span class="line"><span class="comment">                所以考虑字典序最小，由于'0'-48,':'-58</span></span><br><span class="line"><span class="comment">                所以优先让前面输出0,后面就输出':'*/</span></span><br><span class="line">                <span class="keyword">if</span>(nl==l&amp;&amp;f==<span class="number">1</span>)&#123;</span><br><span class="line">                    f=i-nl+<span class="number">1</span>;l=nl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>,ii);</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">":"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==f)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">":"</span>);</span><br><span class="line">                i+=l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">8</span>)<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%x%c"</span>,a[i],<span class="string">":\n"</span>[i==<span class="number">8</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>通过枚举每种有0的串，然后统一加到一个列表中，之后通过sort(优先长度然后优先字典序)，最后输出</p><p><strong>详见我的Python注释代码</strong></p><h3 id="Python-AC代码"><a href="#Python-AC代码" class="headerlink" title="Python_AC代码"></a>Python_AC代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">T=int(input())</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(T):</span><br><span class="line">    b=input()</span><br><span class="line">    a=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="comment"># 这个[2:]是去掉'0x'</span></span><br><span class="line">        a.append(hex(int(b[i*<span class="number">16</span>:i*<span class="number">16</span>+<span class="number">16</span>],<span class="number">2</span>))[<span class="number">2</span>:])</span><br><span class="line">    s=[]</span><br><span class="line">    s.append(<span class="string">':'</span>.join(a))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">            <span class="comment"># 对每个i中的后缀长a[i:j+1]判断各元素是否都是等于0的</span></span><br><span class="line">            <span class="comment"># 是就直接把字符串丢进去,比C++AC版本中的记录长度简单很多</span></span><br><span class="line">            <span class="keyword">if</span> all(map(<span class="keyword">lambda</span> x:x==<span class="string">'0'</span>,a[i:j+<span class="number">1</span>])):</span><br><span class="line">                <span class="comment"># 用':'分隔的a[i]串</span></span><br><span class="line">                s.append(<span class="string">':'</span>.join(a[:i])+<span class="string">'::'</span>+<span class="string">':'</span>.join(a[j+<span class="number">1</span>:]))</span><br><span class="line">    <span class="comment"># 优先用长度排序,其实是同长度按照字典序排序</span></span><br><span class="line">    s.sort(key=<span class="keyword">lambda</span> x:(len(x),x))</span><br><span class="line">    print(<span class="string">'Case #%d:'</span>%(t+<span class="number">1</span>),s[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>岁月还漫长总会有人陪你骑马喝酒走四方</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>Python写算法</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第15周[15/521]</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC15%E5%91%A8-15-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST15/beauty.jpg" alt></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.7/2019.7.31" target="_blank" rel="noopener">已经下定决心要努力刷题了，所以每天都有刷</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/mit-technology-review/china-has-started-a-grand-experiment-in-ai-education-it-could-reshape-how-the-world-learns-c771f5980deb" target="_blank" rel="noopener">China Has Started a Grand Experiment in AI Education. It Could Reshape How the World Learns.</a></p><h2 id="语句摘选"><a href="#语句摘选" class="headerlink" title="语句摘选"></a>语句摘选</h2><ul><li>In three hours we understand students more than the three years spent by the best teachers.</li><li>Three things have fueled China’s AI education boom. The first is tax breaks and other incentives for AI ventures that improve anything from student learning to teacher training to school management. For VCs, this means such ventures are good bets. According to one estimate, China led the way in over $1 billion invested globally last year in AI education.</li><li>Second, academic competition in China is fierce. Ten million students a year take the college entrance exam, the gaokao. Your score determines whether and where you can study for a degree, and it’s seen as the biggest determinant of success for the rest of your life. <strong>Parents willingly pay for tutoring or anything else that helps their children get ahead.</strong></li><li>Finally, <strong>Chinese entrepreneurs have masses of data at their disposal to train and refine their algorithms.</strong>The population is vast, people’s views on data privacy are much more lax than in the West (especially if they can get coveted benefits like academic performance in return), and parents are big believers in the potential of technology, having seen how much it has transformed the country in just a few decades.</li><li>Squirrel’s approach may yield great results on traditional education, but it doesn’t prepare students to be flexible in a changing world, the experts I spoke to say. “There’s a difference between adaptive learning and personalized learning,” says Chris Dede, a professor at Harvard University in the Technology, Innovation, and Education Program. Squirrel is doing adaptive learning, which is about “understanding exactly what students know and don’t know.” <strong>But it pays no attention to what they want to know or how they learn best.</strong> Personalized learning takes their interests and needs into account to “<strong>orchestrate the motivation and time for each student so they are able to make progress.</strong>”</li><li>Much of Squirrel’s philosophy stems from Li’s own experiences as a child. When he was young, he didn’t have very good emotional intelligence, he says, and reading books on the subject didn’t help. So he spent half a year dividing the skill into 27 different components and trained himself on each one. He trained himself to be more observant, for example, and to be an interesting conversationalist (“I spent a lot of time finding 100 topics, so I have a lot of material to talk with others,” he says). <strong>He even trained himself to keep smiling when others criticized him. (“After that, in my life, I do not have any enemies.”)</strong> The method gave him the results he wanted — along with the firm belief that anything can be taught this way.</li><li>That’s exactly what China lacks. If you are able to speak multiple languages, you are able to talk to different people; you are able to communicate different ideas<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2></li><li>估计阅读时间是17mins，然而我抠脚的英语水平加上文章的深度和联想性让我看了整整一个小时</li><li>AI教学有很好的数据分析优势，计算机的快速处理数据能力，不分日夜地工作能力，都使得AI教学有很好的前景，只要不断地迭代分析数据的算法，一定可以让计算机拥有快速检测一个学生水平的能力，<strong>传统老师与计算机的差距在于经验的积累速度，不过对于单个知识点来说目前可能一个老师可能能给更好的帮助</strong>，所以我认为当下如果有AI算法辅助分析一个学生的水平，然后给针对的训练，再在个别的知识点上用上老师，那么可以大大降低对老师经验性的要求。因为我认为一个顶级老师和一个初级老师的区别仅在于对知识系统性的掌握以及对学生知识框架的快速认识能力上面(后者为主)，所以有了AI算法的辅助，将能降低家长花重金请名师的成本，而可以请一个初级老师+AI算法辅助的方式</li><li>感叹世界变化之快！</li><li>感觉自己如果要成为认知层的上层人士，必须和世界进行连接，和更多的大师交流，那就必须学好英语，不然看一篇这样简单的文章要花上太久的时间…所以坚持好好学English！</li></ul><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://oi-wiki.org/" target="_blank" rel="noopener">推荐一个OIwiki网站,内容很全面,分享给你们</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/AcWing-245-%E4%BD%A0%E8%83%BD%E5%9B%9E%E7%AD%94%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E5%90%97/">线段树入门-AcWing-245-你能回答这些问题吗</a></p><p><a href="https://www.wolfdan.cn/priority-queue%E5%92%8Cmultiset%E5%BC%82%E5%90%8C%E4%BB%A5%E5%8F%8A%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%A9%BA%E6%A0%91%E6%8F%92%E5%85%A5%E7%BB%B4%E6%8A%A4%E5%88%9D%E8%A7%81/">priority-queue和multiset异同以及线段树空树插入维护初见</a></p><p><a href="https://www.wolfdan.cn/8%E6%95%B0%E7%A0%81%E5%92%8C15%E6%95%B0%E7%A0%81%E7%AE%97%E6%B3%95%E7%BB%93%E8%AE%BA%E5%92%8C%E5%BB%B6%E5%B1%95/">8数码和15数码算法结论和延展</a></p><p><a href="https://www.wolfdan.cn/%E5%86%99%E5%B0%81%E6%83%85%E4%B9%A6%E7%BB%99%E7%AE%97%E6%B3%951/">拓扑排序以及C++读取空行[算法学习日常1/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-2-100/">反二分题的做法-算法日常[2/100]</a></p><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-3-100/">Python写字符串模拟真香_算法日常[3/100]</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>反二分题的做法-算法日常[2/100]</title>
    <url>/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-2-100/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>今天是个好日子，开局多校D看起来就是个简单的<del>二分模拟</del>,马上动手写起来啊！然后一直写到了比赛结束(当然中途看了一下其他题,并且给队友提供了j题的解题思路)</p><h2 id="反二分的2019牛客多校6D题"><a href="#反二分的2019牛客多校6D题" class="headerlink" title="反二分的2019牛客多校6D题"></a>反二分的2019牛客多校6D题</h2><p><a href="https://ac.nowcoder.com/acm/contest/886/D" target="_blank" rel="noopener">题目链接</a></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%85%AD%E5%9C%BA/D_ti.png" alt></p><h2 id="哒哒马蹄终究是错"><a href="#哒哒马蹄终究是错" class="headerlink" title="哒哒马蹄终究是错"></a>哒哒马蹄终究是错</h2><p>因为这个题目终极不是正规的二分做法！因为答案根本不满足二分算法中的答案单调性，比如如下反例<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">15 5</span><br><span class="line">39 39 39 39 39 60 60 60 60 60 100 100 100 100 100</span><br></pre></td></tr></table></figure><p></p><p>答案是199，而200不能是答案，201也不能是答案</p><p>(二分输出答案是216)(<strong>因为二分总是在较大数值的时候是满足的可能性极大的,所以二分后整体的结果偏大,其实有更小的答案漏掉了</strong>)</p><p>不过这题的美丽错误美就美在了它让人有种是二分的错误—(<strong>哒哒的马蹄，是个美丽的错误</strong>)</p><h2 id="如何AC"><a href="#如何AC" class="headerlink" title="如何AC"></a>如何AC</h2><p>不过因为数据比较弱(其实造一个完美避开二分的数据几乎是不可能在题目数据范围实现的，如果可以，那我把二分后往小的方向开得更远一下枚举，根据上面分析为了避免小概率事件还可以多搞一下向大的方向也枚举)，所以我们现在可以有两种做法</p><ol><li>先二分，然后在这个ans下继续向小的方向枚举20项</li><li>因为答案的下界和上界相差很小，可以直接枚举<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%85%AD%E5%9C%BA/D_an.png" alt></li></ol><h3 id="二分再向小方向走"><a href="#二分再向小方向走" class="headerlink" title="二分再向小方向走"></a>二分再向小方向走</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">因为数据弱，所以不满足单调性的时候这样这样来凑一手</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,K,v[M],sum,vis[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x*K&lt;sum || x&lt;v[n<span class="number">-1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=v[n<span class="number">-1</span>] &amp;&amp; K&gt;=n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp=<span class="number">0</span>,ts=sum;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ts&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> tps = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=n &amp;&amp; vis[n-i]) i++;</span><br><span class="line">        <span class="keyword">if</span>(n-i&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            tps += v[n-i];</span><br><span class="line">                <span class="comment">// cout&lt;&lt;"I get you! : "&lt;&lt;v[n-i]&lt;&lt;endl;</span></span><br><span class="line">            vis[n-i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">while</span>(tps&lt;x)&#123;</span><br><span class="line">            <span class="keyword">int</span> tn = upper_bound(v,v+n-i,x-tps)-v;</span><br><span class="line">            <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;=tn &amp;&amp; vis[tn-j]) j++;</span><br><span class="line">            <span class="keyword">if</span>(tn-j&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                tps += v[tn-j];</span><br><span class="line">                    <span class="comment">// cout&lt;&lt;"I get you! : "&lt;&lt;v[tn-j]&lt;&lt;endl;</span></span><br><span class="line">                vis[tn-j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;"How much is the tps "&lt;&lt;tps&lt;&lt;endl;</span></span><br><span class="line">        ts -= tps;</span><br><span class="line">        tmp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tmp&gt;K) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;<span class="keyword">int</span> kase=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;K;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;v[i]; sum+=v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(v,v+n);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">1e6</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r) &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;"l: "&lt;&lt;l&lt;&lt;" r: "&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid)) r=mid;<span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=ans;i&gt;=ans<span class="number">-20</span>;i--) <span class="keyword">if</span>(check(i)) ans = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;kase++&lt;&lt;<span class="string">": "</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正规做法-从下界开始枚举"><a href="#正规做法-从下界开始枚举" class="headerlink" title="正规做法-从下界开始枚举"></a>正规做法-从下界开始枚举</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码来源--杭电的一个二人小分队 jesus</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1086</span>;</span><br><span class="line"><span class="keyword">int</span> v[N],vis[N];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> vv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> left=n;</span><br><span class="line">    <span class="keyword">int</span> maxx=n,no=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(num)&#123;</span><br><span class="line">        <span class="keyword">int</span> sp=vv;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=maxx;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="comment">//如果当前剩余容量比最小的更小，不能继续装，退出循环</span></span><br><span class="line">            <span class="keyword">if</span>(sp&lt;v[no])<span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//如果当前剩余容量足够，并且物品i还没有装过，则装入</span></span><br><span class="line">            <span class="keyword">if</span>(sp&gt;=v[i]&amp;&amp;!vis[i])&#123;</span><br><span class="line">                sp=sp-v[i];vis[i]=<span class="number">1</span>;left--;</span><br><span class="line">                <span class="comment">//如果无剩余，直接退出循环</span></span><br><span class="line">                <span class="keyword">if</span>(!sp)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//压缩下次寻找的范围</span></span><br><span class="line">        <span class="keyword">while</span>(vis[maxx])maxx--;</span><br><span class="line">        <span class="keyword">while</span>(vis[no])no++;</span><br><span class="line">        num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果无剩余，则正好输出</span></span><br><span class="line">    <span class="keyword">if</span>(!left)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cases;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cases);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ti=<span class="number">1</span>;ti&lt;=cases;ti++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v[i]);</span><br><span class="line">            sum+=v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(v+<span class="number">1</span>,v+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> b=sum/k;</span><br><span class="line">        <span class="keyword">if</span>(sum%k)b++;</span><br><span class="line">        <span class="keyword">int</span> maxx=max(v[n],b);</span><br><span class="line">        <span class="keyword">int</span> ans=maxx;</span><br><span class="line">        <span class="keyword">int</span> i=maxx;</span><br><span class="line">        <span class="keyword">while</span>(i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check(i))&#123;</span><br><span class="line">                ans=i;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,ti,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>人生本来就是一场修行，人的基因把我们当做机器人，然后让我们为他们传递生命</strong>，所以给我们制造了很多激素，其中一些情绪激素让我们时而快乐时而悲伤，时而兴奋时而自闭，我们可能无法改变太多，唯有做的就是享受这个当机器人还能发发牢骚的快乐，并享受这一次人生的偶然，尽自己的快乐，去奋斗，去创造，因为平庸更使自己感到乏味…<strong>那就成为一个，不断进化，并快乐地享受其中的机器人吧</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>反二分</tag>
      </tags>
  </entry>
  <entry>
    <title>拓扑排序以及C++读取空行[算法学习日常1/100]</title>
    <url>/%E5%86%99%E5%B0%81%E6%83%85%E4%B9%A6%E7%BB%99%E7%AE%97%E6%B3%951/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="算法学习日常第一天"><a href="#算法学习日常第一天" class="headerlink" title="算法学习日常第一天"></a>算法学习日常第一天</h1><p>2019年8月2日</p><ul><li><p>今天上午，<a href="https://oi-wiki.org/intro/resources/" target="_blank" rel="noopener">重新认识算法的全貌<del>各种资源及知识点总结</del></a></p></li><li><p>并且还了解到了<a href="https://oi-wiki.org/intro/common-mistakes/" target="_blank" rel="noopener"><del>常见错误写法</del></a>，当然自己当年也写过很多错误</p></li><li><p>下午先是补牛客5的多校G题的dp—接着昨天的补都补了90mins(含对着手写第一遍)，还是太菜了</p></li><li>然后补H题，发现自己昨天写了3个小时的这个题目不是<del>字符串插入题</del>…而是一个<strong>拓扑排序</strong>题..真的自己菜得可怕..写错分类怎么可能做对，然后自己又焦虑了很久，知道2019年8月2日15:48:15才静下来认真地学习拓扑排序<ul><li>拓扑排序在紫书上学了下，就是把点对关系看成一个图里面的指向关系，即把每一个点对看做小数指向大数的有向边，如果图没有有向环的话，说明是可以的，否则是不行的</li><li>记自己头铁处理空行读入，搞了整整一个小时读取空行</li></ul></li></ul><h2 id="拓扑排序以及空行头铁见代码"><a href="#拓扑排序以及空行头铁见代码" class="headerlink" title="拓扑排序以及空行头铁见代码"></a>拓扑排序以及空行头铁见代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2019年8月2日19:25:05</span></span><br><span class="line"><span class="comment">拓扑排序bfs</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">拓扑排序算法思想</span></span><br><span class="line"><span class="comment">1、在AOV网络中选一个没有直接前驱的顶点, 并输出之;</span></span><br><span class="line"><span class="comment">2、从图中删去该顶点, 同时删去所有它发出的有向边;---&gt;(我下面的题目使用stop实现删除)</span></span><br><span class="line"><span class="comment">3、重复以上步骤, 直到</span></span><br><span class="line"><span class="comment">◆ 全部顶点均已输出，拓扑有序序列形成，拓扑排序完成；</span></span><br><span class="line"><span class="comment">◆ 或者图中还有未输出的顶点，但已跳出处理循环。这说明图中还剩下一些顶点，</span></span><br><span class="line"><span class="comment">它们都有直接前驱，再也找不到没有前驱的顶点了。这时AOV网络中必定存在有向环。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,lentmp;</span><br><span class="line"><span class="built_in">string</span> s[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="comment">/*用string本来可以不用下面的len*/</span></span><br><span class="line"><span class="keyword">int</span> len[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> it[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="built_in">string</span> ans,t;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m*(m<span class="number">-1</span>)/<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t&gt;&gt;lentmp;</span><br><span class="line">        <span class="keyword">int</span> x=t[<span class="number">0</span>]-<span class="string">'a'</span>,y=t[<span class="number">1</span>]-<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y) swap(x,y);</span><br><span class="line">        len[x][y] = lentmp;</span><br><span class="line">        <span class="comment">// if(lentmp) cin&gt;&gt;s[x][y];</span></span><br><span class="line">        <span class="comment">/*我的头铁(~~比赛因此卡1小时去谷歌~~)写法</span></span><br><span class="line"><span class="comment">        先直接用cin.get()吃掉t和lentmp后面的回车</span></span><br><span class="line"><span class="comment">        再getline(),</span></span><br><span class="line"><span class="comment">        否则getline会吃那个回车而导致少读数据*/</span></span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">        getline(<span class="built_in">cin</span>,s[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!solve()) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*暴力检测每队关系是否和整个串中的样子是一样的</span></span><br><span class="line"><span class="comment">法二: 也可以每一对关系得到一个ans的tmp串,然后再去==判断</span></span><br><span class="line"><span class="comment">      但是效率低</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[k]==<span class="string">'a'</span>+i||ans[k]==<span class="string">'a'</span>+j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ans[k]!=s[i][j][now]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    now++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(now!=len[i][j]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="comment">/* 这里是每个大串的排序关系-通过m次的关系问询确定的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        注意前面巧妙地处理出了j小于k---&gt;这就是拓扑排序的思路</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        1.对没有出现过的关系(即s[j][k]的那一维全为空)stop[j]和stop[k]全都赋值为1</span></span><br><span class="line"><span class="comment">        2.对于到最后了的关系(即s[j][k][]='\0')全赋空</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        因为有m*(m-1)/2 对 关系，也就是每两个都有比较，所以一定能够得出最前面的一个字符..所以就完美了！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        这里每次stop都会清零！*/</span></span><br><span class="line">        <span class="keyword">bool</span> stop[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;m;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!s[j][k][it[j][k]]) stop[j]=stop[k]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s[j][k][it[j][k]]==<span class="string">'a'</span>+j) stop[k]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> stop[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> done = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!stop[j])&#123;</span><br><span class="line">                ans+=<span class="string">'a'</span>+j;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(k&lt;j) it[k][j]++;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(k&gt;j) it[j][k]++;</span><br><span class="line">                &#125;</span><br><span class="line">                done = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!done) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!check()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>晚上成功补完H题和I题，发现好像没有时间补B题了，明天上午来补一下B题</li></ul><h1 id="每日一句叨叨"><a href="#每日一句叨叨" class="headerlink" title="每日一句叨叨"></a>每日一句叨叨</h1><p><strong>杜月笙知道成功需要代价</strong>，他想为自己洗白(小时候家里穷只能混黑帮)，为整个帮派洗白，但穿了大半辈子长褂(为了不露出纹身)，让自己的说书先生给自己讲了大半辈子学，也为上海的繁荣安定做了大半辈子贡献，但却最终未被认可(通过人脉被选之为一个参议长，但蒋介石让他自己退位)，<strong>但杜月笙却永远被后人被历史铭记</strong></p><p><strong>若命运不公，那就和它斗到底！</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习日常</tag>
        <tag>拓扑排序</tag>
        <tag>BFS</tag>
        <tag>读取空行</tag>
      </tags>
  </entry>
  <entry>
    <title>8数码和15数码算法结论和延展</title>
    <url>/8%E6%95%B0%E7%A0%81%E5%92%8C15%E6%95%B0%E7%A0%81%E7%AE%97%E6%B3%95%E7%BB%93%E8%AE%BA%E5%92%8C%E5%BB%B6%E5%B1%95/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="此类问题是否有解"><a href="#此类问题是否有解" class="headerlink" title="此类问题是否有解"></a>此类问题是否有解</h1><h2 id="定义一个东西"><a href="#定义一个东西" class="headerlink" title="定义一个东西"></a>定义一个东西</h2><p>先定义此类问题矩阵的逆序数的和值为除去0以外其他数的排列(把二维一行行地读取的循序的排列)的逆序数和</p><h2 id="发现一"><a href="#发现一" class="headerlink" title="发现一"></a>发现一</h2><p>我们可以发现排列中相邻的两个数交换位置会它们两相互之间的逆序数值,<strong>而其他部分以及他们各自和其他部分的逆序数值都不变</strong>,所以矩阵的逆序数+1或-1,也就是矩阵的逆序数的奇偶性发生了改变</p><h2 id="发现二"><a href="#发现二" class="headerlink" title="发现二"></a>发现二</h2><p>我们还可以发现0左右移动不影响矩阵的逆序数的奇偶性，然而如果是上(下)移动的话，就想到于一个数连续和左(右)边3个数进行了交换位置，所以矩阵的逆序数的奇偶性会变</p><h2 id="发现三"><a href="#发现三" class="headerlink" title="发现三"></a>发现三</h2><p>矩阵的改变只能通过与0变换位置，所以只有在与0上下交换的时候才会产生矩阵的逆序数的奇偶性的变化</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>所以我们知道最终状态逆序数为0,且最后0在最后一行(<code>高中学化学经常讲终态法</code>)，也就是矩阵要有解，最终逆序数的奇偶性为偶，<strong>那么就要在初始状态的逆序数上面 加上 0值在初始状态移动到最后一行产生的逆序数奇偶性的变化值</strong>仍为偶数则有解</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="有解性"><a href="#有解性" class="headerlink" title="有解性"></a>有解性</h2><h3 id="题"><a href="#题" class="headerlink" title="题"></a>题</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6620" target="_blank" rel="noopener">HDU-6620 2019杭电多校4</a></p><h3 id="手写AC代码"><a href="#手写AC代码" class="headerlink" title="手写AC代码"></a>手写AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,a[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!a[i])&#123;</span><br><span class="line">                cnt+=<span class="number">3</span>-i/<span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[j] &amp;&amp; a[j]&gt;a[i])</span><br><span class="line">                        cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt&amp;<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求最少步数"><a href="#求最少步数" class="headerlink" title="求最少步数"></a>求最少步数</h2><p><strong>如果我们要求解步数的话,我们首先是用逆序数进行判定是否有解，有解才进行搜索</strong></p><p>使用曼哈顿距离递减 和 IDA*(迭代层数达到120层就放弃) 的方式<br>曼哈顿是初始排列到目标排列每个数字abs(x1-x2)+abs(y1+y2)的和值</p><h3 id="给个板子"><a href="#给个板子" class="headerlink" title="给个板子"></a>给个板子</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先用结论判断是否有解呀！不然没解跑这个会死循环，燃烧你的CPU的话我不背锅哦</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//limit全部的曼哈顿距离之和</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">4</span>][<span class="number">4</span>], map2[<span class="number">16</span>], limit;</span><br><span class="line"><span class="keyword">int</span> flag, length;</span><br><span class="line"><span class="comment">//各个数字应在位置(i,j)对照表,比如0在位置(3,3)</span></span><br><span class="line"><span class="keyword">int</span> goal[<span class="number">16</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">3</span>,<span class="number">3</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                   &#123;<span class="number">0</span>,<span class="number">3</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                   &#123;<span class="number">1</span>,<span class="number">3</span>&#125;,&#123;<span class="number">2</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                   &#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">0</span>&#125;,&#123;<span class="number">3</span>,<span class="number">1</span>&#125;,&#123;<span class="number">3</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nx[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123; <span class="number">-1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">-1</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//估价函数,曼哈顿距离,小于等于实际总步数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hv</span><span class="params">(<span class="keyword">int</span> a[][<span class="number">4</span>])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="comment">// 不算0</span></span><br><span class="line">            <span class="keyword">if</span> (w != <span class="number">0</span>)</span><br><span class="line">                cost += <span class="built_in">abs</span>(i - goal[w][<span class="number">0</span>]) + <span class="built_in">abs</span>(j - goal[w][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* x,y起始坐标，len是已经走过的长度,pre_move是上次走的方向 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len, <span class="keyword">int</span> pre_move)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> dv = hv(<span class="built_in">map</span>);</span><br><span class="line">    <span class="keyword">if</span> (len == limit) &#123;</span><br><span class="line">        <span class="comment">//成功 退出</span></span><br><span class="line">        <span class="keyword">if</span> (dv == <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            length = len;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//超过预设长度 回退</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//不和上一次移动方向相反,对第二步以后而言</span></span><br><span class="line">        <span class="keyword">if</span> (i + pre_move == <span class="number">3</span> &amp;&amp; len &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> tx = x + nx[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> ty = y + nx[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (tx &gt;= <span class="number">0</span> &amp;&amp; tx &lt; <span class="number">4</span> &amp;&amp; ty &gt;= <span class="number">0</span> &amp;&amp; ty &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            swap(<span class="built_in">map</span>[x][y], <span class="built_in">map</span>[tx][ty]);</span><br><span class="line">            <span class="keyword">int</span> p = hv(<span class="built_in">map</span>);</span><br><span class="line">            <span class="keyword">if</span> (p + len &lt;= limit &amp;&amp; flag == <span class="number">0</span>) &#123;</span><br><span class="line">                dfs(tx, ty, len + <span class="number">1</span>, i);</span><br><span class="line">                <span class="keyword">if</span> (flag)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 递归回来后恢复现场 */</span></span><br><span class="line">            swap(<span class="built_in">map</span>[x][y], <span class="built_in">map</span>[tx][ty]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x1, y1;</span><br><span class="line">        <span class="comment">//map2一维 map二维</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;map2[i]);</span><br><span class="line">            <span class="keyword">if</span> (map2[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                x1 = i/<span class="number">4</span>; y1 = i%<span class="number">4</span>;</span><br><span class="line">                <span class="built_in">map</span>[x1][y1] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">map</span>[i/<span class="number">4</span>][i%<span class="number">4</span>] = map2[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 曼哈顿长度要递减的 */</span></span><br><span class="line">        limit = hv(<span class="built_in">map</span>);</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求120步之内到达,其实如果可以的话最多80多步就可以走完</span></span><br><span class="line">        <span class="keyword">while</span> (flag == <span class="number">0</span> &amp;&amp; length &lt;= <span class="number">90</span>)&#123;</span><br><span class="line">            <span class="comment">//得到的是最小步数</span></span><br><span class="line">            dfs(x1, y1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">/* 加大初始额曼哈顿距离的限制，让递归的行走能不曼哈顿距离递减得多试探几步 */</span></span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">0</span>) limit++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if (flag)</span></span><br><span class="line">        <span class="comment">//     printf("%d\n", length);</span></span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yse"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>不好意思，写完后才发现重复造轮子了，不过应该我写得应该算比较简单，可以立马用上吧</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>逆序数</tag>
      </tags>
  </entry>
  <entry>
    <title>priority_queue和multiset异同以及线段树空树插入维护初见</title>
    <url>/priority-queue%E5%92%8Cmultiset%E5%BC%82%E5%90%8C%E4%BB%A5%E5%8F%8A%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%A9%BA%E6%A0%91%E6%8F%92%E5%85%A5%E7%BB%B4%E6%8A%A4%E5%88%9D%E8%A7%81/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="priority-queue和multiset异同"><a href="#priority-queue和multiset异同" class="headerlink" title="priority_queue和multiset异同"></a>priority_queue和multiset异同</h1><p>优先级队列只能按照排序顺序访问一个元素 - 即，可以获得最高优先级的项目，想要访问其他的元素，就必须删除顶端元素。 优先级队列还允许重复元素，因此它很像是一个multiset。</p><p>但是multiset比priority_queue的好处就在于multiset不用删除掉优先级最高的元素就可以访问其他优先级的元素，就相当于一个动态的有序数组</p><p>同为log(n)插入，但是multiset却能访问更多，真香</p><p>虽然priority_queue可以通过删除再恢复的方式达到访问其他优先级的元素，但是实现很不优雅，而且让一个log(n)的操作蹩脚地魔改成了接近O(n^2)的操作，并且容易卡时间</p><h2 id="比如HDU-6609这一题"><a href="#比如HDU-6609这一题" class="headerlink" title="比如HDU-6609这一题"></a>比如<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6609" target="_blank" rel="noopener">HDU-6609</a>这一题</h2><h3 id="暴力priority-queue"><a href="#暴力priority-queue" class="headerlink" title="暴力priority_queue"></a>暴力priority_queue</h3><p><strong>虽然我很不愿意把我很喜欢的一种STL加上暴力的前缀，但是确实是很朴素自然，大道至简但是这里有点过分使用了…所以下面是TLE的代码</strong><br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e5</span> + <span class="number">7</span> ;</span><br><span class="line"><span class="keyword">int</span> Q, n, m, w[M];</span><br><span class="line">ll sum;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;&gt; pre;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;Q;</span><br><span class="line">    <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">        <span class="comment">/* init */</span></span><br><span class="line">        sum = <span class="number">0</span>;k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">        <span class="keyword">while</span>(!pre.empty()) pre.pop();</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;w[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="comment">/* 根据题意不能弹出本次加入的 */</span></span><br><span class="line">            <span class="comment">/* 根据题意应该不会在空的时候满足条件 */</span></span><br><span class="line">            <span class="comment">// int pre=inf;</span></span><br><span class="line">            <span class="comment">/*每弹出一个k++,所以每回收pre一个k--*/</span></span><br><span class="line">            <span class="comment">// while(!pre.empty()) pre.pop();</span></span><br><span class="line">            <span class="keyword">while</span>(!q.empty()&amp;&amp;sum+w[i]&gt;m)&#123;</span><br><span class="line">                k++;</span><br><span class="line">                pre.push(q.top());</span><br><span class="line">                sum-=q.top();</span><br><span class="line">                q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*输出*/</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="keyword">if</span>(i==n)&#123; <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">            <span class="comment">/*回溯*/</span></span><br><span class="line">            ll tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/* = 再想想*/</span></span><br><span class="line">            <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(!pre.empty()&amp;&amp;tmp+pre.top()&lt;=w[i])&#123;</span><br><span class="line">                f=<span class="number">1</span>;</span><br><span class="line">                tmp += pre.top();</span><br><span class="line">                q.push(pre.top());</span><br><span class="line">                k--;</span><br><span class="line">                pre.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*能加入一个就无需加本身了,要加回之前的sum值</span></span><br><span class="line"><span class="comment">            本身未加入的话就相当于弹出了一个k++*/</span></span><br><span class="line">            <span class="comment">/*不对,加回本身,让其在后面的循环中进入pre*/</span></span><br><span class="line">            <span class="comment">// if(f) sum += tmp,k++;</span></span><br><span class="line">            <span class="keyword">if</span>(f) sum += tmp;</span><br><span class="line">            q.push(w[i]);</span><br><span class="line">            sum += w[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; ss;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        ss.clear();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tem = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> suma = sum;</span><br><span class="line">            <span class="keyword">int</span> jishu = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (suma + a[i] &gt; m) &#123;</span><br><span class="line">                <span class="keyword">auto</span> j = ss.end();</span><br><span class="line">                <span class="comment">/* 这里用计数jishu记下软删除的数量，由于priority_queue</span></span><br><span class="line"><span class="comment">                只能访问第一个值，所以不支持软硬删除操作...所以会用真实删除再</span></span><br><span class="line"><span class="comment">                恢复的操作会TLE...因为这样会从O(nlog(n))魔化到O(n^2) */</span></span><br><span class="line">                <span class="comment">/* 由题意a[i]&lt;=m，满足下面条件时一定不会出现ss为空 */</span></span><br><span class="line">                <span class="keyword">while</span> (suma + a[i] &gt; m) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                    suma -= *j;</span><br><span class="line">                    jishu++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 第一个铁定是0的 */</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, jishu + tem);</span><br><span class="line">            ss.insert(a[i]);</span><br><span class="line">            <span class="keyword">auto</span> j = ss.end();</span><br><span class="line">            sum += a[i];</span><br><span class="line">            <span class="comment">/* 用tem记录下硬删除的数量 */</span></span><br><span class="line">            <span class="keyword">while</span> (sum &gt; m) &#123;</span><br><span class="line">                j--;</span><br><span class="line">                sum -= *j;</span><br><span class="line">                <span class="comment">/* 这里由于find返回的是指针，所以就会只删除一个值</span></span><br><span class="line"><span class="comment">                而不是删除数值那样把所有数值都删除掉 */</span></span><br><span class="line">                ss.erase(ss.find(*j));</span><br><span class="line">                tem++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线段树树空树插入维护初见"><a href="#线段树树空树插入维护初见" class="headerlink" title="线段树树空树插入维护初见"></a>线段树树空树插入维护初见</h1><p><strong>这个线段树标程真是魔鬼一般地折磨了我整整7个小时…菜鸡刚学线段树，还没有过插入空树的经历，然后这个std是插入空树…我好菜啊</strong></p><p><strong>所以放一发带思考注释的手抄代码</strong><br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line">ll <span class="keyword">int</span> a[M],number[M&lt;&lt;<span class="number">2</span>],bz[M&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> number2[M&lt;&lt;<span class="number">2</span>],bz2[M&lt;&lt;<span class="number">2</span>],to[M];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    ll b;</span><br><span class="line">&#125; no[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.b==b.b ? a.id&lt;b.id : a.b&lt;b.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自己重写std感觉上推数值好像还是不对，如果不理解的话，下次就算有板子也不能秒掉！</span></span><br><span class="line"><span class="comment">所以还是要先理解一下 ，多多重现算法*/</span></span><br><span class="line"><span class="comment">/* 先写着，等下写完全部看看有没有新的认识 */</span></span><br><span class="line"><span class="comment">/* 2019年7月30日16:59:35 还是不懂，维护区间之和难道不是要左右相加吗？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2019年7月30日20:34:57 突然灵光一闪！</span></span><br><span class="line"><span class="comment">因为你一开始是一棵空树，然后你一个个插入，如果使用的是max，就相当于(to[i],n+1)这个区间以及每个子区间</span></span><br><span class="line"><span class="comment">都是你的插入值的和.         因为都是直接到了叶子节点去加和</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果使用加法，那么就出错了，就有很多重复计算，所以说[1-&gt;n]区间就是最大的前缀和</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">所以询问的时候就可以直接加和*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    number[rt] = max(number[rt&lt;&lt;<span class="number">1</span>],number[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 其实这里是多组测试的初始化0值 */</span></span><br><span class="line"><span class="comment">/* 但是number2不PushUp清零吗？这里好像有问题，但为什么std能AC</span></span><br><span class="line"><span class="comment">惊呆的发现竟然放在了pushdown下推标记的时候清零了...感觉线段树的写法真多*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    bz[rt]=bz2[rt]=number[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;number2[rt]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bz[rt])&#123;</span><br><span class="line">        bz[rt&lt;&lt;<span class="number">1</span>] += bz[rt];</span><br><span class="line">        bz[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += bz[rt];</span><br><span class="line">        number[rt&lt;&lt;<span class="number">1</span>] += bz[rt];</span><br><span class="line">        number[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += bz[rt];</span><br><span class="line">        bz[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(bz2[rt])&#123;</span><br><span class="line">        bz2[rt&lt;&lt;<span class="number">1</span>] += bz2[rt];</span><br><span class="line">        bz2[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += bz2[rt];</span><br><span class="line">        number2[rt&lt;&lt;<span class="number">1</span>] += bz2[rt];</span><br><span class="line">        number2[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += bz2[rt];</span><br><span class="line">        bz2[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(ll o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&gt;R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        number[rt]+=o;</span><br><span class="line">        <span class="comment">/* 之前初始化成了0，所以这里可以这样...这个标程写得真随意... */</span></span><br><span class="line">        number2[rt]+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 此节点(区段l,r)全被包含在内 */</span></span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123;</span><br><span class="line">        <span class="comment">/* 先自己赋值，下推标记就直接给儿子赋值 */</span></span><br><span class="line">        number[rt]+=o;</span><br><span class="line">        bz[rt]+=o;</span><br><span class="line">        bz2[rt] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* pushdown和PushUp都只管修改相邻层 */</span></span><br><span class="line">    pushdown(l,r,rt);</span><br><span class="line">    <span class="comment">/* 区段l,r包含L,R,或者有交叠,则访问子节点(子区段) */</span></span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) change(o,L,R,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) change(o,L,R,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> number2[rt];</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    pushdown(l,r,rt);</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">if</span>(k &lt; number[rt&lt;&lt;<span class="number">1</span>]) ans = query(k,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> ans = query(k,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        build(<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">            no[i].b = a[i];</span><br><span class="line">            no[i].id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(no+<span class="number">1</span>,no+n+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="comment">/* 把与n+1有关的节点都打上number=1e9,number2=1的标记...</span></span><br><span class="line"><span class="comment">        只给n+1对应的叶子节点处打上了标记！其他地方没有进去过！</span></span><br><span class="line"><span class="comment">        就相当于在那里插入了一点*/</span></span><br><span class="line">        change(<span class="number">1e9</span>,n+<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) to[no[i].id] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="comment">/*一个个插入,第一个时还没插入，是空树，所以肯定返回0*/</span></span><br><span class="line">            ll k = query(m-a[i],<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld "</span>,i-k);</span><br><span class="line">            <span class="comment">/*按照队友的说法,那这里就是插入第一个*/</span></span><br><span class="line">            <span class="comment">/* 给排名在to[i]到n+1的地方都所有区段打上区间数值和number</span></span><br><span class="line"><span class="comment">            和此区间个数和number2 */</span></span><br><span class="line">            change(a[i],to[i],n+<span class="number">1</span>,<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>借鉴:</p><p><a href="https://www.icode9.com/content-1-370218.html" target="_blank" rel="noopener">C++&amp;STL&amp;multiset&amp;杭电多校第三场 1007 find the answer</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>线段树</tag>
        <tag>STL</tag>
        <tag>优先队列</tag>
        <tag>multiset</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing-245.你能回答这些问题吗</title>
    <url>/AcWing-245-%E4%BD%A0%E8%83%BD%E5%9B%9E%E7%AD%94%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E5%90%97/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>2019牛客杭电多校都把线段树当做最最最基础的知识点，杭电3甚至把线段树当做签到，所以线段树要多练啊</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.acwing.com/problem/content/description/246/" target="_blank" rel="noopener">你能回答这些问题吗</a></p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="线段树入门题-O-Mlog-N"><a href="#线段树入门题-O-Mlog-N" class="headerlink" title="线段树入门题 O(Mlog(N))"></a>线段树入门题 O(Mlog(N))</h2><h2 id="一步步思考线段树过程"><a href="#一步步思考线段树过程" class="headerlink" title="一步步思考线段树过程"></a>一步步思考线段树过程</h2><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><p>不能简单的对比对比左右子区间的dat和值(区间最大和值)来更新本节点的区间最大和值，还要对比右子树的rmax+左子树的lmax的和值</p><p><code>c.dat=max(max(a.dat,b.dat),a.rmax+b.lmax);</code></p><h3 id="附图可以参考，关键看代码注释"><a href="#附图可以参考，关键看代码注释" class="headerlink" title="附图可以参考，关键看代码注释"></a>附图可以参考，关键看代码注释</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A2%98/%E7%BA%BF%E6%AE%B5%E6%A0%91/Acwing245/%E6%89%8B%E5%86%99.png" alt></p><h2 id="手写AC代码"><a href="#手写AC代码" class="headerlink" title="手写AC代码"></a>手写AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> lmax,rmax,sum;</span><br><span class="line">    <span class="keyword">int</span> dat;</span><br><span class="line">&#125; t[SIZE&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[SIZE],N,M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    t[p].sum = t[p*<span class="number">2</span>].sum + t[p*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">    t[p].lmax = max(t[p*<span class="number">2</span>].lmax,t[p*<span class="number">2</span>].sum+t[p*<span class="number">2</span>+<span class="number">1</span>].lmax);</span><br><span class="line">    t[p].rmax = max(t[p*<span class="number">2</span>+<span class="number">1</span>].rmax,t[p*<span class="number">2</span>+<span class="number">1</span>].sum+t[p*<span class="number">2</span>].rmax);</span><br><span class="line">    t[p].dat = max(t[p*<span class="number">2</span>].dat,max(t[p*<span class="number">2</span>+<span class="number">1</span>].dat,t[p*<span class="number">2</span>].rmax+t[p*<span class="number">2</span>+<span class="number">1</span>].lmax));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[p].l=l,t[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123; t[p].sum=t[p].lmax=t[p].rmax=t[p].dat=a[l]; <span class="keyword">return</span> ; &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">    build(p*<span class="number">2</span>,l,mid);</span><br><span class="line">    build(p*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[p].l==t[p].r)&#123;t[p].dat=t[p].sum=t[p].lmax=t[p].rmax=v;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[p].l+t[p].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) change(p&lt;&lt;<span class="number">1</span>,x,v);</span><br><span class="line">    <span class="keyword">else</span> change(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,v);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int ask(int p,int l,int r)&#123;</span></span><br><span class="line"><span class="comment">//     if(l &lt;= t[p].l &amp;&amp; r &gt;= t[p].r) return t[p].dat;</span></span><br><span class="line"><span class="comment">//     int mid = (t[p].l + t[p].r)/2;</span></span><br><span class="line"><span class="comment">//     int val = -(1&lt;&lt;30);</span></span><br><span class="line"><span class="comment">//     if(l&lt;=mid) val = max(val,ask(p&lt;&lt;1,l,r));</span></span><br><span class="line"><span class="comment">//     if(r&gt;mid) val = max(val,ask(p&lt;&lt;1|1,l,r));</span></span><br><span class="line"><span class="comment">//     return val;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此处感谢队友帮忙debug */</span></span><br><span class="line"><span class="function">SegmentTree <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=t[p].l &amp;&amp; r&gt;=t[p].r) <span class="keyword">return</span> t[p];</span><br><span class="line">    <span class="keyword">int</span> mid=(t[p].l+t[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> val=-(<span class="number">1</span>&lt;&lt;<span class="number">30</span>);</span><br><span class="line">    SegmentTree a,b,c;</span><br><span class="line">    a.dat=a.sum=a.lmax=a.rmax=val;</span><br><span class="line">    b.dat=b.sum=b.lmax=b.rmax=val;</span><br><span class="line">    c.dat=c.lmax=c.rmax=val;</span><br><span class="line">    c.sum=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 要么都在最左边，要么都在最右边，要么跨越了左右，跨越了左右就要判断</span></span><br><span class="line"><span class="comment">    c.dat=max(max(a.dat,b.dat),a.rmax+b.lmax);</span></span><br><span class="line"><span class="comment">    这个点没想到会卡住 --&gt; 我就是从前面的注释的ask函数出错来的*/</span></span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid&amp;&amp;r&lt;=mid)&#123;</span><br><span class="line">        a=ask(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        c.sum+=a.sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 还要注意左区间r&lt;=mid,右区间l&gt;mid */</span></span><br><span class="line">    <span class="comment">// else if (l&gt;=mid&amp;&amp;r&gt;=mid)&#123;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l&gt;mid&amp;&amp;r&gt;mid)&#123;</span><br><span class="line">        b=ask(p*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">        c.sum+=b.sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        a=ask(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        b=ask(p*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">        c.sum+=a.sum+b.sum;</span><br><span class="line">    &#125;</span><br><span class="line">    c.dat=max(c.dat,max(max(a.dat,b.dat),a.rmax+b.lmax));</span><br><span class="line">    c.lmax=max(c.lmax,max(a.lmax,a.sum+b.lmax));</span><br><span class="line">    c.rmax=max(c.rmax,max(b.rmax,b.sum+a.rmax));</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">    <span class="keyword">int</span> i,x,y;</span><br><span class="line">    <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;i&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;y) swap(x,y);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ask(<span class="number">1</span>, x, y).dat &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> change(<span class="number">1</span>,x,y);</span><br><span class="line">        <span class="comment">// for(int i=1;i&lt;=9;i++)&#123;</span></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;"dat: "&lt;&lt;t[i].dat&lt;&lt;" sum: "&lt;&lt;t[i].sum&lt;&lt;" lmax: "&lt;&lt;t[i].lmax&lt;&lt;" rmax: "&lt;&lt;t[i].rmax&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>银联挑战赛初赛第二场B题</title>
    <url>/%E9%93%B6%E8%81%94%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9B%E7%AC%AC%E4%BA%8C%E5%9C%BAB%E9%A2%98/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://nanti.jisuanke.com/t/40207" target="_blank" rel="noopener">码队弟弟的求和问题</a></p><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/%E9%93%B6%E8%81%94%E5%88%9D%E8%B5%9B2/B.png" alt></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/%E9%93%B6%E8%81%94%E5%88%9D%E8%B5%9B2/Bans.png" alt></p><h2 id="数论分块知识点"><a href="#数论分块知识点" class="headerlink" title="数论分块知识点"></a>数论分块知识点</h2><p><a href="https://taodaling.github.io/blog/2019/03/27/%E6%95%B0%E8%AE%BA%E5%88%86%E5%9D%97/" target="_blank" rel="noopener">图片截取了大佬的blog</a></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/%E9%93%B6%E8%81%94%E5%88%9D%E8%B5%9B2/%E6%95%B0%E8%AE%BA%E5%88%86%E5%9D%97%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt></p><h2 id="手写AC代码"><a href="#手写AC代码" class="headerlink" title="手写AC代码"></a>手写AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll n,m;</span><br><span class="line">ll inv6;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res = res*a%mod;</span><br><span class="line">        a = (a*a)%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll n)</span></span>&#123; <span class="keyword">return</span> n*(n+<span class="number">1</span>)%mod*(<span class="number">2</span>*n+<span class="number">1</span>)%mod*inv6%mod;&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">    ll ans = (n*(n+<span class="number">1</span>)/<span class="number">2</span>%mod)*n;</span><br><span class="line">    <span class="comment">// ll ans = n*n%mod*(n+1)/2%mod;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">/*i=j+1,以及n/i要加括号*/</span></span><br><span class="line">        j = n/(n/i);</span><br><span class="line">        <span class="comment">/*其实j不会大于n*/</span></span><br><span class="line">        <span class="keyword">if</span>(j&gt;n) j=n;</span><br><span class="line">        ans = (ans - (f(j)-f(i<span class="number">-1</span>))*(n/i)%mod + mod)%mod;</span><br><span class="line">        <span class="comment">/*只要保证每次相减时两个都是正数</span></span><br><span class="line"><span class="comment">        然后结果再来一次保证正数操作就不会出错*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    inv6 = qpow(<span class="number">6</span>,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    ll ans = solve(n)*solve(m)%mod;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="菜鸡我踩坑"><a href="#菜鸡我踩坑" class="headerlink" title="菜鸡我踩坑"></a>菜鸡我踩坑</h2><p>坑我35mins<br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bug是因为除号必须在mod前！</span></span><br><span class="line">ll ans = (n*(n+<span class="number">1</span>)/<span class="number">2</span>%mod)*n;</span><br><span class="line"><span class="comment">// ll ans = n*n%mod*(n+1)/2%mod;</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第14周-14-521</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC14%E5%91%A8-14-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.7/2019.7.26" target="_blank" rel="noopener">gogogo</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://onezero.medium.com/do-you-really-need-another-computer-monitor-a0534d37ba4a" target="_blank" rel="noopener">Do You Really Need Another Computer Monitor?</a></p><p>是啊，对于单一的工作，没有很多要素的工作一个屏幕就够了</p><p>但是对于需要很多要素的工作，比如一边看编程视频教学，一边跟着写这种要素很多的工作，有两个屏幕真的能提高自己的效率</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/zearot/article/details/52280189" target="_blank" rel="noopener">线段树从零开始</a></p><p><a href="https://blog.csdn.net/zearot/article/details/48299459" target="_blank" rel="noopener">线段树详解</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A13-I/">2019牛客多校3 I</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客多校3 I</title>
    <url>/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A13-I/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://ac.nowcoder.com/acm/contest/883/I" target="_blank" rel="noopener">Median</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>3个数产生一个中位数，现在给你一串中位数，请还原出一个合理的原串</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>T组,每组给n表示原串的长度,然后是给你中位数串<code>b[1]-&gt;b[n-1]</code></p><p>范围: n的和不超过10^6,每个b不超过10^9</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>有合理的串则输出原串,否则输出-1</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><strong>若存在合理的解,那么解的每个位置的最终值一定是它能影响到的3个中位数之一</strong></p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%89%E5%9C%BA/N3I_1.png" alt></p><h2 id="Dp解法"><a href="#Dp解法" class="headerlink" title="Dp解法"></a>Dp解法</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%89%E5%9C%BA/N3I_2.png" alt></p><h2 id="自己动手写AC代码"><a href="#自己动手写AC代码" class="headerlink" title="自己动手写AC代码"></a>自己动手写AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> f[M][<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> pre[M][<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> v[M][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> b[M],a[M];</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mid</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> tmp[<span class="number">3</span>];</span><br><span class="line">    tmp[<span class="number">0</span>]=x,tmp[<span class="number">1</span>]=y,tmp[<span class="number">2</span>]=z;</span><br><span class="line">    sort(tmp,tmp+<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> tmp[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*回溯构造*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">back</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        a[i] = v[i][j];</span><br><span class="line">        <span class="keyword">int</span> pr = pre[i][j][k];</span><br><span class="line">        j = k;</span><br><span class="line">        k = pr;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n<span class="number">-1</span>;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">        <span class="comment">/*init*/</span></span><br><span class="line">        b[<span class="number">0</span>]=b[<span class="number">1</span>]=b[<span class="number">2</span>]; b[n+<span class="number">1</span>]=b[n]=b[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)</span><br><span class="line">                    f[i][j][k]=<span class="literal">false</span>;</span><br><span class="line">        <span class="comment">/*注意:我给的手写题解中a[3]对应b[1],b[2],b[3]</span></span><br><span class="line"><span class="comment">         我这里为了实现方便是用的对应b[2],b[3],b[4]*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                v[i][j]=b[i<span class="number">-1</span>+j];</span><br><span class="line">            &#125;</span><br><span class="line">            sort(v[i],v[i]+<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*边界条件: 前i-2个中位数(此时i=2为0个中位数)是满足条件的</span></span><br><span class="line"><span class="comment">          最终f[N][i][j]的时候的是N-2个中位数是否满足条件*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">                f[<span class="number">2</span>][i][j]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*solve*/</span></span><br><span class="line">        <span class="keyword">bool</span> findans = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;<span class="number">3</span>;l++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!f[i<span class="number">-1</span>][k][l]) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="comment">/*判断前面的位置和本位置使用与他们位置相关的</span></span><br><span class="line"><span class="comment">                        3个中位数的排列中哪些排列能够满足要求</span></span><br><span class="line"><span class="comment">                        v[i][j]对应的是b[i-1],b[i],b[i+1]中的一个*/</span></span><br><span class="line">                        <span class="keyword">if</span>(mid(v[i<span class="number">-2</span>][l],v[i<span class="number">-1</span>][k],v[i][j])!=b[i<span class="number">-1</span>])</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        f[i][j][k]=<span class="literal">true</span>;</span><br><span class="line">                        <span class="comment">/*记录下前面使用的是l大的*/</span></span><br><span class="line">                        pre[i][j][k]=l;</span><br><span class="line">                        <span class="comment">/*break写完再探索-std中用了break</span></span><br><span class="line"><span class="comment">                        我认为应该遍历全部情况,所以去掉了break</span></span><br><span class="line"><span class="comment">                        然后两份代码都AC了,所以可能解唯一或者是按照std</span></span><br><span class="line"><span class="comment">                        生成的数据吧*/</span></span><br><span class="line">                        <span class="comment">// break;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i==n &amp;&amp; f[i][j][k])&#123;</span><br><span class="line">                        findans = <span class="literal">true</span>;</span><br><span class="line">                        back(i,j,k);</span><br><span class="line">                        <span class="keyword">goto</span> END;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        END:</span><br><span class="line">        <span class="keyword">if</span>(!findans)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) &#123;</span><br><span class="line">                assert(mid(a[i<span class="number">-1</span>],a[i],a[i+<span class="number">1</span>]) == b[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,a[i],<span class="string">" \n"</span>[i==n]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法</category>
        <category>多校</category>
        <category>牛客</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>2019杭电多校1补题笔记</title>
    <url>/2019%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A11%E8%A1%A5%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="D-1004"><a href="#D-1004" class="headerlink" title="D-1004"></a>D-1004</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6581" target="_blank" rel="noopener">Vacation</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>N+1辆车,距离斑马线s,车长l,速度v,按距离斑马线的距离大到小排序，保证<code>s(i) &gt;= s(i+1) + l(i+1)</code>,求出s0车头过线的时间</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ol><li>把第 i 辆车追上第 i + 1 辆车当作一个事件，显然只有 n 个事件，且第 i 辆车追上第i + 1 辆车只可能会对第 i − 1 辆车追上第 i 辆车的时间产生影响，且时间一定是变小，因此可以维护车之间的距离和速度来计算事件发生时间，用堆来找出最早发生的事件，不停处理直到 0 车通过停车线。复杂度为 O(n log n)。</li><li>上述做法比较麻烦，可以直接二分最终时间，然后从第一辆车开始递推求出每辆车的最终位置。复杂度为 O(n log C)，也可以过。</li><li><strong>O(N)算法</strong>，就是最终通过停止线的时候，一定是一个车后面堵着剩余所有的车，那么影响时间的就只有最前面这辆车，所以对于每一辆车，假设是它是和 0 车堵在一起的最靠前的一辆车，那么可以计算出一个值，所有的车的计算值的最大值就是答案。</li></ol><h3 id="详解O-N"><a href="#详解O-N" class="headerlink" title="详解O(N)"></a>详解O(N)</h3><p>就是你想象比较后面的情况，是后面所有的车被前面某一辆车给堵住了，这辆最前面的车当然没有在过线前被其他的车堵住，不然那堵住它的车就成了真正的最前面的那辆车，所以最后的答案就是最前面的那辆车的(s+l+其后所有的除了0车以外车的长度和)/v . 因为0号车车头过线就是胜利了啊 <strong>注意是从后面的车向前面的车进行sum+=,经过了那辆最前面的车之后,其前面的车因为走的快或者离得远所以不会成为堵车队列一员，所以他们这样子叠加起来的时间值并不会超过答案的值</strong></p><h2 id="自己手写一遍AC码"><a href="#自己手写一遍AC码" class="headerlink" title="自己手写一遍AC码"></a>自己手写一遍AC码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">car</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,s,v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;car&gt; c(n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;c[i].l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;c[i].s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;c[i].v;</span><br><span class="line">        <span class="comment">/* 注意使用`1.0*` */</span></span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>; <span class="keyword">double</span> ans = <span class="number">1.0</span>*c[<span class="number">0</span>].s/c[<span class="number">0</span>].v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            ans = max(ans,(c[i].s+(sum+=c[i].l))/c[i].v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">10</span>)&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String-1009"><a href="#String-1009" class="headerlink" title="String-1009"></a>String-1009</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6586" target="_blank" rel="noopener">String</a></p><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给你一个串，求满足条件的字串，字串(subarray要连续，这里求subsequence时不用连续，但是要保持前后顺序)必须满足一些条件，这些条件是:第i个字母的<strong>数量</strong>必须在[Li,Ri]区间内</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>一位位地构造答案字符串，每次贪心地加能加入的最小的字符 (判断能否加入只要判断加入之后原字符串剩下的后缀中的每种字符的数目能否足够满足条件)</p><h2 id="自己手写一遍AC码-1"><a href="#自己手写一遍AC码-1" class="headerlink" title="自己手写一遍AC码"></a>自己手写一遍AC码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="built_in">string</span> s,ans;</span><br><span class="line"><span class="keyword">int</span> l[<span class="number">26</span>],r[<span class="number">26</span>],used[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="comment">/*字母后的各字母后缀和数组*/</span></span><br><span class="line"><span class="keyword">int</span> cnt[M][<span class="number">26</span>];</span><br><span class="line"><span class="comment">/*字母下标记录数组*/</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) <span class="built_in">cin</span>&gt;&gt;l[i]&gt;&gt;r[i];</span><br><span class="line">        <span class="comment">/*init*/</span></span><br><span class="line">        ans.clear();</span><br><span class="line">        <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line">        <span class="keyword">int</span> n = <span class="keyword">int</span>(s.length());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) cnt[n][i]=<span class="number">0</span>,g[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++) cnt[i][j]+=cnt[i+<span class="number">1</span>][j]+(s[i]==(<span class="string">'a'</span>+j));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) g[s[i]-<span class="string">'a'</span>].push_back(i);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator head[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) head[i]=g[i].begin();</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">/*solve*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(used[j] == r[j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">/*subsequence时不用连续，但是要保持前后顺序,所以可以共用同一个last*/</span></span><br><span class="line">                <span class="keyword">while</span>(head[j]!=g[j].end() &amp;&amp; (*head[j]) &lt;= last) head[j]++;</span><br><span class="line">                <span class="keyword">if</span>(head[j] == g[j].end()) <span class="keyword">continue</span>;</span><br><span class="line">                used[j]++;</span><br><span class="line">                <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> pos = *head[j],sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*注意这里是pos+1,因为现在讨论的是本位已经使用的情况下,对其他位置的影响*/</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;<span class="number">26</span>;p++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(cnt[pos+<span class="number">1</span>][p] + used[p] &lt; l[p]) flag = <span class="number">0</span>;</span><br><span class="line">                    sum += max(l[p] - used[p],<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*后面的位置的所有字母要达到的最小总和如果超过了能用的量,</span></span><br><span class="line"><span class="comment">                能使用的 位置 不够了</span></span><br><span class="line"><span class="comment">                就说明此位置不能放'a'+j字母*/</span></span><br><span class="line">                <span class="keyword">if</span>(sum &gt; k-(i+<span class="number">1</span>)) flag = <span class="number">0</span>;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;<span class="number">26</span>;p++) sum += min(cnt[pos+<span class="number">1</span>][p],r[p]-used[p]);</span><br><span class="line">                <span class="comment">/*后面的位置的所有字母最多放的位置个数和如果小于剩余的位置</span></span><br><span class="line"><span class="comment">                能使用的 位置 填不满了</span></span><br><span class="line"><span class="comment">                就说明此位置不能放'a'+j字母*/</span></span><br><span class="line">                <span class="keyword">if</span>(sum &lt; k-(i+<span class="number">1</span>)) flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(!flag) used[j]--;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    ans+=<span class="string">'a'</span>+j;</span><br><span class="line">                    f = <span class="number">1</span>;</span><br><span class="line">                    last = pos;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!f)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">goto</span> end;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        end:;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>ARST打卡第13周-13-521</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC13%E5%91%A8-13-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/2019.7/2019.7.21/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1H%E9%A2%98%E8%87%AA%E5%B7%B1%E5%86%99.cpp" target="_blank" rel="noopener">牛客多校中一题</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/better-humans/rule-of-three-bad-ideas-arguments-and-brainstorming-ac0d06fbd4ee" target="_blank" rel="noopener">Rule of Three: Bad Ideas, Arguments and Brainstorming</a></p><p>When you do a brainstorm to solve a problem or generate an idea, you’ll always experience two sides. First you flare to generate as many ideas as possible. Then you focus to decide on the one path that you’re actually going to execute on.</p><p>确实,做决定的时候要好好选择,别人批评,自己选择,选择好然后专注做下去,自己负责</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://gitpress.io/c/dir_zhai/2018-09-09#article-top" target="_blank" rel="noopener">我再也不装扮博客了</a></p><p><a href="https://www.wolfdan.cn/%E7%9C%9F%E7%9A%84%E6%9C%89%E5%BF%85%E8%A6%81%E6%8A%8A%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%88%B0%E5%A4%9A%E4%B8%AA%E5%B9%B3%E5%8F%B0%E5%90%97%EF%BC%9F/">那我也不装了</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%A1%A5%E9%A2%98%E7%AC%94%E8%AE%B0/">2019牛客多校第一场补题笔记</a></p><p><a href="https://www.wolfdan.cn/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA%E8%A1%A5%E9%A2%98%E7%AC%94%E8%AE%B0/">2019牛客多校第二场补题笔记</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客多校第二场补题笔记</title>
    <url>/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA%E8%A1%A5%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://ac.nowcoder.com/acm/contest/882#question" target="_blank" rel="noopener">2019牛客多校第二场</a></p><h1 id="background"><a href="#background" class="headerlink" title="background"></a>background</h1><h2 id="出题人-sd0061"><a href="#出题人-sd0061" class="headerlink" title="出题人:sd0061"></a>出题人:sd0061</h2><p>赵轩昂，北京航空航天大学，WorldFinal 2015/2016</p><h2 id="Eddy"><a href="#Eddy" class="headerlink" title="Eddy"></a>Eddy</h2><p>好像就是出题人的电脑用户名</p><h2 id="出题评价"><a href="#出题评价" class="headerlink" title="出题评价"></a>出题评价</h2><p>题目对我这个菜鸡来说较难，题意复杂</p><h2 id="讲题评价"><a href="#讲题评价" class="headerlink" title="讲题评价"></a>讲题评价</h2><p>逻辑清晰，对每一题的讲解由浅入深，对时间复杂度不断优化精细讲解，层层入深，获得大家的一致好评(只是目前我这个菜鸡对于很多<code>浅</code>的地方还没学好甚至还没学过，所以补补补o(╥﹏╥)o)</p><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><ul><li>Eddy大佬走路 <code>先让0-&gt;N-1都有标记</code> -&gt; 第i天走一圈需要Ni步(每天脚长不一样还行),可以前进和后退,然后收集完所有标记(每个地方都有标记,即0-&gt;N-1处都是标记)就立马感到无聊了就立马回去吃饭睡觉打豆豆(你的记录值中Eddy大佬走到Mi就算是收集完了所有的标记)</li><li>你每天观摩大佬走路(giao)</li><li>你复查数据的时候，你不确定到底数据是不是对的，然后你想知道这些天的数据正确的可能性(所以很自然的知道后面为什么要你输出前缀积,原来写笔记确实可以加深理解奥)</li></ul><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><ul><li>T组测试(T天的观测)</li><li>然后每组测试都是给你Ni和Mi(每天Eddy的走路信息)</li></ul><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><ul><li>输出前i天的数据都正确的可能性(也就是每天可能性之积)</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>Corner Case:<ul><li>当N=1的时候，也就是1步就可以走完一圈，无论Eddy大佬前进还是后退，肯定是1步走完(这样肯定收集完了所有的标记),所以可能性为1</li><li>当M=0的时候，你记录的是Eddy大佬在0处就收集完了所有的标记,这是不可能，因为Eddy大佬一开始从0出发，所以一开始就已经拥有0号标记了,<strong>而一旦Eddy收集完所有的标记之后必定会立马回家,所以离开的地方的那个标记一定是最后收集到的,而且是第一次收集到的那个标记</strong>，所以你记录值为0显然是错的,所以可能性是0</li></ul></li><li>一般情况(N非1,M非0)<ul><li>有了上面M=0的理解，这里就好理解了，因为Eddy大佬一开始从0出发,然后Eddy大佬可以前进也可以后退，所以Eddy大佬最后一个到达的点可以是非0的其他任意一个点，所以最后到达每个点的可能性都是等概的，也就是<code>1/(N-1)</code></li></ul></li><li>对了，输出的是前i的概率积</li></ul><h2 id="AC代码-自己再手写一遍收获更多"><a href="#AC代码-自己再手写一遍收获更多" class="headerlink" title="AC代码(自己再手写一遍收获更多)"></a>AC代码(自己再手写一遍收获更多)</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m;</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    a *= b;</span><br><span class="line">    <span class="keyword">return</span> a&gt;=mod?a%mod:a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ret = mul(a,ret);</span><br><span class="line">        <span class="comment">/* b&gt;&gt;1,那么a就要变成a*a */</span></span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a = mul(a,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a)</span></span>&#123; <span class="keyword">return</span> qpow(a,mod<span class="number">-2</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll n,ll m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> inv(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">/*init*/</span></span><br><span class="line">    ans = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="comment">/*solve*/</span></span><br><span class="line">        ans = mul(ans,solve(n,m));</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>emmmm,看懂了一点点题解,但是对于题解中的BM完全不熟悉,所以先留坑</p><h1 id="C-D自己太菜了-留坑"><a href="#C-D自己太菜了-留坑" class="headerlink" title="C,D自己太菜了,留坑"></a>C,D自己太菜了,留坑</h1><h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><p>emmmm,看懂了一点点题解,但是还是不太熟悉基础的算法,我先去补基础的算法,留坑</p><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给定2N个人,(N &lt;= 14),两两间有边权,把这2N个人分为2组,每组N个,求两组间的边权和最大</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>朴素法(也称暴力法),在新加入一个人的时候，比如说加入了A组，那么直接将它与B组间已经有的所有人的边权加一遍</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> d[M][M];</span><br><span class="line"><span class="keyword">int</span> a[M],b[M];</span><br><span class="line"><span class="keyword">int</span> cnt1,cnt2;</span><br><span class="line">ll ans;<span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur,ll val)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*当达到2*N+1的时候,正好已经插入了2*N个人了,所以开始比较*/</span></span><br><span class="line">    <span class="keyword">if</span>(cur&gt;<span class="number">2</span>*N)&#123; ans = max(ans,val);<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt1&lt;N)&#123;</span><br><span class="line">        a[cnt1++]=cur;</span><br><span class="line">        ll tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*每次加入了cnt1之后,就要把左边队伍新加人与对面队伍当下所有人产生的竞争值加入左边队伍*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt2;i++) tmp+=d[cur][b[i]];</span><br><span class="line">        dfs(cur+<span class="number">1</span>,val+tmp);</span><br><span class="line">        <span class="comment">/*上面的遍历return之后要恢复现场,即之前产生的影响要消除掉,避免对后面的操作有影响*/</span></span><br><span class="line">        cnt1--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt2&lt;N)&#123;</span><br><span class="line">        b[cnt2++]=cur;</span><br><span class="line">        ll tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*每次加入了cnt2之后,就要把右边队伍新加人与对面队伍当下所有人产生的竞争值加入右边队伍*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt1;i++) tmp+=d[a[i]][cur];</span><br><span class="line">        dfs(cur+<span class="number">1</span>,val+tmp);</span><br><span class="line">        cnt2--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*N;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*N;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;d[i][j];</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*像一颗树一样遍历下去,然后到达叶子的时候进行比较出最大值再返回*/</span></span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G计算几何-留坑"><a href="#G计算几何-留坑" class="headerlink" title="G计算几何,留坑"></a>G计算几何,留坑</h1><h1 id="H"><a href="#H" class="headerlink" title="H"></a>H</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>给定一个N*M的01矩阵(1&lt;=N,M&lt;=1000),求第二大全是1的矩阵面积</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><ul><li>枚举每一行，以当前行为底，记录每一列往上不间断最多延长多远，那么这样之后就变成了一维的柱状图求最大/次大/k大矩形面积，可用单调栈求解</li><li>由于要记录第二大,之前求最大的做法(<a href="https://vjudge.net/problem/POJ-2559" target="_blank" rel="noopener">poj2559</a>)是直接用max维护ans,<strong>width合并</strong>的做法在这里就要改成把所有解先丢进一个vector(之后排序复杂度 <code>ans个数 * log(ans个数)</code>)(或者维护一个k大的小值优先的priority_queue,复杂度算上维护也是<code>ans个数 * log(ans个数)</code>)</li><li>但是这里必须把<code>(width-1)*ddz[top]</code>也放入状态级,因为求第二大,所以只要把次大状态加入(详细原因看下面说的坑点)</li><li>所以推荐使用把全状态扔进vector，这样还可以求第k大，虽然慢点</li></ul><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p><strong>图中最后一行样例的dp的单调栈</strong><br>这里是小于也没有用，因为1会占据掉3的宽度，而且仍为高度1，之后就在0到来的时候累加宽度 <strong>(宽度直接从4加到了6，跳过了5,因为1之前会占据掉3的宽度)</strong>，然后就会无视掉<br>矩阵面积是5的情况！！！</p><p>所以用width会导致状态数减少，这里求第二大可以把width-1的状态也加入，从而达到正确答案并减少了一定状态数</p><p>不过还是推荐使用全状态，就是用cnt++，把所有状态放入vector，这样就可以求出第k大<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%BA%8C%E5%9C%BA/H.png" alt></p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 10</span></span><br><span class="line"><span class="comment">0100101100</span></span><br><span class="line"><span class="comment">0010110110</span></span><br><span class="line"><span class="comment">1000011110</span></span><br><span class="line"><span class="comment">1000110010</span></span><br><span class="line"><span class="comment">1111110010</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dp[M][M];</span><br><span class="line"><span class="keyword">int</span> ddz[M],w[M];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> *f)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    ddz[top] = <span class="number">-1</span>;</span><br><span class="line">    f[m+<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="comment">/*等于时是否弹出这需要自己注意一下,就是严不严格单调的选择*/</span></span><br><span class="line">        <span class="keyword">if</span>(ddz[top]&lt;f[i]) ddz[++top]=f[i],w[top]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/*此处注意要先加宽度*/</span></span><br><span class="line">            <span class="keyword">while</span>(top&amp;&amp;f[i]&lt;ddz[top])&#123; width+=w[top],ans.push_back(ddz[top]*width),ans.push_back(ddz[top]*(width<span class="number">-1</span>));top--;&#125;</span><br><span class="line">            <span class="comment">/*我的做法是 : 等于是加入,不严格单调*/</span></span><br><span class="line">            ddz[++top]=f[i],w[top]=width+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*推荐下面的方法*/</span></span><br><span class="line">        <span class="comment">// if(ddz[top] &lt;= f[i]) ddz[++top] = f[i];</span></span><br><span class="line">        <span class="comment">// else &#123;</span></span><br><span class="line">        <span class="comment">//     int cnt = 0;</span></span><br><span class="line">        <span class="comment">//     /*然后这里可以写宽度进行优化*/</span></span><br><span class="line">        <span class="comment">//     while(top &amp;&amp; ddz[top] &gt; f[i]) &#123;</span></span><br><span class="line">        <span class="comment">//         cnt++;</span></span><br><span class="line">        <span class="comment">//         ans.push_back(ddz[top] * cnt);</span></span><br><span class="line">        <span class="comment">//         top--;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     while(cnt--) ddz[++top] = f[i];</span></span><br><span class="line">        <span class="comment">//     ddz[++top] = f[i];</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[M];</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)) &#123;</span><br><span class="line">        <span class="comment">/*init*/</span></span><br><span class="line">        ans.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">/*对于每一列的每一行进行连续高度扫描*/</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,c);</span><br><span class="line">            <span class="comment">/*此行非0,则可以接上上面连续来的高度(可能为0)*/</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) dp[i][j] = c[j<span class="number">-1</span>] == <span class="string">'0'</span>? <span class="number">0</span> : dp[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int i = 1;i&lt;=n;i++) &#123;for(int j=1;j&lt;=m;j++) cout&lt;&lt;dp[i][j]; cout&lt;&lt;endl;&#125; cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">/*solve*/</span></span><br><span class="line">        <span class="comment">/*对每一行进行直方图扫描求解*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) solve(dp[i]);</span><br><span class="line">        sort(ans.begin(),ans.end());</span><br><span class="line">        <span class="comment">/*考虑特例*/</span></span><br><span class="line">        <span class="keyword">int</span> sz = ans.size();</span><br><span class="line">        <span class="keyword">if</span>(sz&lt;=<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[sz<span class="number">-2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I听Eddy大佬说有7种dp-太难留坑"><a href="#I听Eddy大佬说有7种dp-太难留坑" class="headerlink" title="I听Eddy大佬说有7种dp,太难留坑"></a>I听Eddy大佬说有7种dp,太难留坑</h1><h1 id="J也太难留坑"><a href="#J也太难留坑" class="headerlink" title="J也太难留坑"></a>J也太难留坑</h1><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法</category>
        <category>多校</category>
        <category>牛客</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客多校第一场补题笔记</title>
    <url>/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%A1%A5%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://ac.nowcoder.com/acm/contest/881#question" target="_blank" rel="noopener">2019牛客多校第一场</a></p><h1 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h1><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>知道了单调栈，那么第一题就很好解决了，就是两个串到每个位置都比较一下前面的最小值的下标是否相等(用单调栈来实现—后面讲)，如果相等则继续，如果都没有找到就是都是自己最小，也用单调栈处理成为相等，如果遇到不相等，那么i-1就是题目所要求出来的k的值</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%80%E5%9C%BA/A%2B.png" alt="A+"></p><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>单调栈的一大优势就是<strong>线性的时间复杂度</strong>，所有的元素只会进栈一次，而且一旦出栈后就不会再进来了。</p><p><strong>单调递增栈可以找到左起第一个比当前数字小的元素</strong>。比如数组 [2 1 4 6 5]，刚开始2入栈，数字1入栈的时候，发现栈顶元素2比较大，将2移出栈，此时1入栈。那么2和1都没左起比自身小的数字。然后数字4入栈的时候，栈顶元素1小于4，于是1就是4左起第一个小的数字。此时栈里有1和4，然后数字6入栈的时候，栈顶元素4小于6，于是4就是6左起第一个小的数字。此时栈里有1，4，6，然后数字5入栈的时候，栈顶元素6大于5，将6移除，此时新的栈顶元素4小于5，那么4就是5左起的第一个小的数字，最终栈内数字为 1，4，5。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* L是输出端，然后s是辅助数组,c是源数组 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>* c, <span class="keyword">int</span>* L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    s[<span class="number">0</span>] = node&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">/*找到向左走第一个比它小的数 */</span></span><br><span class="line">        <span class="keyword">while</span>(top &amp;&amp; s[top].val &gt;= c[i]) top--;</span><br><span class="line">        L[i] = s[top].id;</span><br><span class="line">        s[++top] = node&#123;i, c[i]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接:<br><a href="https://www.cnblogs.com/grandyang/p/8887985.html" target="_blank" rel="noopener">https://www.cnblogs.com/grandyang/p/8887985.html</a></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>代码是队友写的,orz<br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> id; <span class="keyword">int</span> val; &#125;;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> l1[maxn], l2[maxn];</span><br><span class="line">node s[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* L是输出端，然后s是辅助数组,c是源数组 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>* c, <span class="keyword">int</span>* L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    s[<span class="number">0</span>] = node&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">/*找到向左走第一个比它小的数 */</span></span><br><span class="line">        <span class="keyword">while</span>(top &amp;&amp; s[top].val &gt;= c[i]) top--;</span><br><span class="line">        L[i] = s[top].id;</span><br><span class="line">        s[++top] = node&#123;i, c[i]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">        solve(a, l1); solve(b, l2);</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l1[i] != l2[i]) &#123;</span><br><span class="line">                ans = i<span class="number">-1</span>;</span><br><span class="line">                <span class="comment">// ans = n-1;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h1><p><a href="https://www.cnblogs.com/Dillonh/p/11209476.html?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">看到大佬的分析</a></p><h1 id="C题，D题"><a href="#C题，D题" class="headerlink" title="C题，D题"></a>C题，D题</h1><p>能力有限，战略计划原因没有补这两题</p><h2 id="C题解推荐"><a href="#C题解推荐" class="headerlink" title="C题解推荐"></a>C题解推荐</h2><p><a href="https://blog.nowcoder.net/n/1539da6d6d6e47a6998b5c6f5bba2167" target="_blank" rel="noopener">C题可以看大佬的题解</a></p><h1 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN+<span class="number">5</span>][MAXN+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n+m;j++)</span><br><span class="line">                dp[i][j]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n+m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span>&lt;=j+n&amp;&amp;j&lt;=i+m)</span><br><span class="line">                    dp[i+<span class="number">1</span>][j]=(dp[i+<span class="number">1</span>][j]+dp[i][j])%MOD;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;=j+n&amp;&amp;j+<span class="number">1</span>&lt;=i+m)</span><br><span class="line">                    dp[i][j+<span class="number">1</span>]=(dp[i][j+<span class="number">1</span>]+dp[i][j])%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n+m][n+m]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><h2 id="图片以及思路转载-少量整理-感谢"><a href="#图片以及思路转载-少量整理-感谢" class="headerlink" title="图片以及思路转载+少量整理+感谢"></a>图片以及思路转载+少量整理+感谢</h2><p>借鉴两位大佬的思路和博文进行整理的，感谢<br><a href="https://blog.csdn.net/Izayoi_w/article/details/96475077" target="_blank" rel="noopener">Izayoi_w</a><br><a href="https://www.cnblogs.com/WAautomaton/p/11211864.html" target="_blank" rel="noopener">WAautomaton</a></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%80%E5%9C%BA/F1.png" alt="F1"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%80%E5%9C%BA/F2.png" alt="F2"></p><p>题目要求36<em>E，而E = (22/36) </em>S，所以ans = 22 * S</p><p>关于三角形的面积，已知三个顶点坐标，我们可以用叉积来求，如ΔABC，S = (1/2) * ( 向量(AB) ✖ 向量(AC) )。</p><p>这里要注意，叉积有正有负，最终的答案为11倍叉积的绝对值。</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%80%E5%9C%BA/F3.png" alt="F3"></p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll x1, y1, x2, y2, x3, y3;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; x3 &gt;&gt; y3) &#123;</span><br><span class="line">        ll res = <span class="number">11</span>*((x1-x2)*(y3-y2)-(y1-y2)*(x3-x2));</span><br><span class="line">        <span class="keyword">if</span>(res &lt; <span class="number">0</span>) res = -res;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G-H-I因己太菜先留坑"><a href="#G-H-I因己太菜先留坑" class="headerlink" title="G,H,I因己太菜先留坑"></a>G,H,I因己太菜先留坑</h1><h1 id="J"><a href="#J" class="headerlink" title="J"></a>J</h1><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>解法一: 直接交叉相乘</p><p>解法二: 直接看出题人叉姐的解法<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%B6%A3%E8%B0%88linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/%E7%94%A8%E6%88%B7%E6%80%81/%E5%8F%89%E5%A7%90%E5%87%BA%E9%A2%98%E7%9A%84%E5%AE%98%E6%96%B9%E8%A7%A3%E6%B3%95.png" alt></p><h2 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> __int128 ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x, a, y, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld %lld"</span>, &amp;x, &amp;a, &amp;y, &amp;b) != EOF) &#123;</span><br><span class="line">        ll p = x; p *= b;</span><br><span class="line">        ll q = y; q *= a;</span><br><span class="line">        <span class="keyword">if</span> (p &gt; q) <span class="built_in">printf</span>(<span class="string">"&gt;\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == q) <span class="built_in">printf</span>(<span class="string">"=\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"&lt;\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法</category>
        <category>多校</category>
        <category>牛客</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>真的有必要把文章发布到多个平台吗？</title>
    <url>/%E7%9C%9F%E7%9A%84%E6%9C%89%E5%BF%85%E8%A6%81%E6%8A%8A%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%88%B0%E5%A4%9A%E4%B8%AA%E5%B9%B3%E5%8F%B0%E5%90%97%EF%BC%9F/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="如题"><a href="#如题" class="headerlink" title="如题"></a>如题</h1><p>真的需要把自己的文章发布到多个网站平台吗？比如WordPress，Hexo，CSDN，知乎，简书，博客园，sf，开源中国等等…</p><p>说实话，我也不知道具体答案，因为答案总是和个人情况有关的</p><h1 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h1><p>我之前看<code>李自然说</code>的视频，他说<strong>自媒体的运营应该全平台覆盖,把公域流量变成自己的私域流量</strong>，然后我也就开始了每次写一篇文章就风风火火地把自己的文章发布到自己wordpress，自己的hexo，自己的简书，自己的CSDN，自己的知乎，而且还在自己的关于界面写上了欢迎加我微信，然后一起拉群讨论…</p><h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h1><p>今天，是放暑假的第5天，大家都回家了，当然还有很多巨佬在疯狂地自学，我昨天连续学了3个小时技术，然后做了8个小时的算法，感觉很开心，但是今天上午睡过头，今天下午和晚上因为增强看板娘的事情，以及处理gitee大于上传100M出现了问题导致自己今天到9点都没有刷算法题，然后此时写完一篇博文，准备写算法，然后一想到自己还有4个平台没有上传自己的博文……开始思考自己是不是要把其他的平台停止更新了</p><h1 id="取舍"><a href="#取舍" class="headerlink" title="取舍"></a>取舍</h1><ol><li>感觉自己并不想通过写个人博客来转化变现，只想自己整理一些东西，然后分享给大家，所以也就不那么想去花太多时间运维什么的了</li><li>搞这么多东西其实和我真正要做的人生五件事是完全无关的！所以以后不仅不能花太多时间在这个无关的事情上面，而且还要想见了鬼一样地避开这些事情…</li><li>所以以后就用Hexo做笔记的整理与环境搭建的记录，然后值得分享的技术文档就发布到CSDN上面去，因为CSDN越做越好了，而且它的SEO做得最好(怪不得广告多…槽点…不过这也是生命线,无可厚非)，符合我分享给大家的意愿，然后用coding的私人仓库和wordpress小站来做备份…</li></ol><h1 id="询问"><a href="#询问" class="headerlink" title="询问"></a>询问</h1><p>你们怎么取舍的呢？</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>思索</category>
      </categories>
      <tags>
        <tag>思索</tag>
      </tags>
  </entry>
  <entry>
    <title>git reset 和 git reset --hard区别</title>
    <url>/git-reset-%E5%92%8C-git-reset-hard-%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="git-reset-和-git-reset-hard区别"><a href="#git-reset-和-git-reset-hard区别" class="headerlink" title="git reset 和 git reset --hard区别"></a><code>git reset</code> 和 <code>git reset --hard</code>区别</h1><h2 id="先说知识点"><a href="#先说知识点" class="headerlink" title="先说知识点"></a>先说知识点</h2><blockquote><p>有时候，进行了错误的提交，但是还没有push到远程分支，想要撤销本次提交，可以使用git reset –-soft/hard命令</p></blockquote><h3 id="缺省情况"><a href="#缺省情况" class="headerlink" title="缺省情况"></a>缺省情况</h3><p><code>git reset</code>缺省为<code>git reset --soft</code></p><h3 id="二者区别："><a href="#二者区别：" class="headerlink" title="二者区别："></a>二者区别：</h3><ul><li><code>git reset –-soft</code>：回退到某个版本，<strong>只回退了commit的信息，不会恢复到index file一级</strong>。如果还要提交，直接commit即可</li><li><code>git reset -–hard</code>：<strong>彻底回退到某个版本</strong>，本地的源码也会变为上一个版本的内容，撤销的commit中所包含的更改被冲掉</li></ul><h2 id="我忘了知识点踩坑"><a href="#我忘了知识点踩坑" class="headerlink" title="我忘了知识点踩坑"></a>我忘了知识点踩坑</h2><h3 id="沙雕认为"><a href="#沙雕认为" class="headerlink" title="沙雕认为"></a>沙雕认为</h3><ol><li><p>当下情况:最新版本的100M压缩包已经在本地删除，但是本地版本库中之前有个版本中还有，所以git push到gitee会被拒收..但是git一定要先传输完前面的版本之后再传后面的修改(所以我要帮git本地仓库手动执行git rm前面版本的文件，或者忘了文件名，通过下面3的复杂的操作，来完成此项操作)</p></li><li><p>真的不知道怎么去掉本地仓库的4commit，因为去不掉的话就会先向远程库提交超100M文件然后被拒接，所以原地重复…</p></li><li><p>然后如果git rm 忘了那个压缩包的名字了，所以直接回退版本到昨天的样子，然后再git reflog回来并展示今天的所有修改，git checkout归还所有修改，然后把今天的修改备份，之后再回到昨天的版本库，然后重新提交今天的内容，除了你个超过100M的压缩包</p></li></ol><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/git/git%20reset/%E6%80%BB%E7%BB%93.png" alt></p><h3 id="慢慢懂了"><a href="#慢慢懂了" class="headerlink" title="慢慢懂了"></a>慢慢懂了</h3><p>奇怪，最后一次版本回退又没有删除本地文件，可能是因为恢复过？</p><p>原来是git reset —hard 和 git reset —soft的区别</p><p>所以我幸幸苦苦寻找了好久的取消commit而不影响工作区就是git reset —soft</p><p>真是汗啊，因为用得少，所以学了又忘了，所以现在踩一遍坑，使得自己更深刻了，也提醒了自己 对于基础知识 还是要多重复，学习多次，不断加深记忆，或者很可能还是会踩坑</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/linux/git/git%20reset/git%20reset%E8%BD%AF%E7%A1%AC%E5%B7%AE%E5%88%AB.png" alt></p><p>参考：<a href="https://blog.csdn.net/yangfengjueqi/article/details/61668381" target="_blank" rel="noopener">https://blog.csdn.net/yangfengjueqi/article/details/61668381</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown写作超方便的图片使用方式</title>
    <url>/markdown%E5%86%99%E4%BD%9C%E8%B6%85%E6%96%B9%E4%BE%BF%E7%9A%84%E5%9B%BE%E7%89%87%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>写makedown用图片的时候总是在上传图床的时候，以及使用图片链接的时候会感觉有一些麻烦</p></blockquote><p>我以前使用的是，github图床通过手动git上传,然后自己再一个个去打开github的图片的download的页面去获取图片的分享链接—-自己也觉得很麻烦，但是我的小站目标是人在站在，人不在，站希望也还在的战略目标，所以追求的极致的稳定，而不是一时的快速，所以没有使用那些可以直接粘贴上传到免费图床的操作，因为我怕指不定哪一天这种图床没有消息地就倒闭了，那我的数据就这样没了，小站将遭到巨大的打击，所以我还是慢慢使用这种方式用了3个月，知道我听学长说用七牛云太方便了，还能加速网站加载速度，所以我今天也花了许多时间了解七牛云，发现七牛云确实有免费的10G图床和每月10G的加速流量，但是我觉得这样的加速在前期是很好的，不过有个小问题就是你不自定义域名的话到时候可能失效(自定义域名要备案，腾讯云的域名备案又要买腾讯云的服务器…),而且10G对于我的小站战略来说有点不合适，所以就抛弃了，然后无意看到了<strong>PicGo+github图床</strong>，于是了解了一下，操作了一下，发现是我要找的靓仔啊！</p><h1 id="使用PicGo上传图库"><a href="#使用PicGo上传图库" class="headerlink" title="使用PicGo上传图库"></a>使用PicGo上传图库</h1><h2 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a>下载PicGo</h2><p><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">在GitHub的最新发布页面下载</a></p><p>博主本人是windows，所以下载的.exe文件直接安装就可以了</p><h2 id="配置起来"><a href="#配置起来" class="headerlink" title="配置起来"></a>配置起来</h2><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A" target="_blank" rel="noopener">使用官方文档找到GitHub图床配置进行必要的配置</a></p><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><ul><li>仓库名是<code>用户名/仓库名</code></li><li>指定存储路径是以仓库为根目录的远程仓库存储路径(可以先在本地仓库先创建一个文件夹，然后再文件夹下创建一个readme.md(为什么？看下面的小发现)，然后git push,这样就是设置这个文件夹了)</li><li>github图床好像是不支持直接自定义域名的,我试过了,如果有朋友知道的希望能告知，谢谢</li></ul><h2 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h2><p><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E6%88%91%E7%9A%84%E9%85%8D%E7%BD%AE.png" data-fancybox="images" target="_blank" rel="noopener"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E6%88%91%E7%9A%84%E9%85%8D%E7%BD%AE.png" width="50%" height="50%"></a></p><h3 id="小发现"><a href="#小发现" class="headerlink" title="小发现"></a>小发现</h3><p>本地文件夹如果没有文件的话，远程仓库对应的这个文件夹是不会生成的，所以以后最好新建文件夹都写一个<code>readme.md</code></p><p><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E7%A1%AE%E5%AE%9E%E6%B2%A1%E6%9C%89%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%9D%EF%BC%8C%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6%E5%A4%B9%E6%98%AF%E4%B8%8D%E4%BC%9A%E7%94%9F%E6%88%90%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E4%BB%A5%E5%90%8E%E6%9C%80%E5%A5%BD%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E9%83%BD%E5%86%99%E4%B8%80%E4%B8%AAreadme.png" data-fancybox="images" target="_blank" rel="noopener"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E7%A1%AE%E5%AE%9E%E6%B2%A1%E6%9C%89%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%9D%EF%BC%8C%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6%E5%A4%B9%E6%98%AF%E4%B8%8D%E4%BC%9A%E7%94%9F%E6%88%90%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E4%BB%A5%E5%90%8E%E6%9C%80%E5%A5%BD%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E9%83%BD%E5%86%99%E4%B8%80%E4%B8%AAreadme.png" width="50%" height="50%"></a></p><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p>这个应该大家配置不出问题，这里都会用的</p><h2 id="复制链接使用"><a href="#复制链接使用" class="headerlink" title="复制链接使用"></a>复制链接使用</h2><p><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E5%A4%8D%E5%88%B6%E6%88%90%E5%8A%9F.png" data-fancybox="images" target="_blank" rel="noopener"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E5%A4%8D%E5%88%B6%E6%88%90%E5%8A%9F.png" width="50%" height="50%"></a></p><h1 id="VScode写makedown使用snippets"><a href="#VScode写makedown使用snippets" class="headerlink" title="VScode写makedown使用snippets"></a>VScode写makedown使用snippets</h1><p>我发现我的使用了hexo的fancybox3之后，有一个图集的功能，很是炫酷，但是每次图片粘贴要很复杂的输入<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&quot; data-fancybox=&quot;images&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p></p><p>于是我就想到了snippets</p><h2 id="预警"><a href="#预警" class="headerlink" title="预警"></a>预警</h2><p>如果用了除hexo以外的其他平台，请谨慎使用我的snippets代码！因为<code>data-fancybox=&quot;images&quot;</code>这个图集功能只能用在hexo, 但是可以用于其他的snippets啊</p><h2 id="配置snippets"><a href="#配置snippets" class="headerlink" title="配置snippets"></a>配置snippets</h2><p><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">去官网看配置</a></p><h2 id="贴一下我的配置"><a href="#贴一下我的配置" class="headerlink" title="贴一下我的配置"></a>贴一下我的配置</h2><p><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/makedownSnippetConfig.png" data-fancybox="images" target="_blank" rel="noopener"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/makedownSnippetConfig.png" width="50%" height="50%"></a></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"Mypic":&#123;</span><br><span class="line">	"prefix":[</span><br><span class="line">		"pic",</span><br><span class="line">		<span class="string">"pic-snippets"</span></span><br><span class="line">	],</span><br><span class="line">	"body": [</span><br><span class="line">		"&lt;a href=\"$&#123;1&#125;\" data-fancybox=\"images\"&gt;",</span><br><span class="line">			"\t&lt;img src=\"$&#123;1&#125;\" width=\"50%\" height=\"50%\" /&gt;",</span><br><span class="line">		"&lt;/a&gt;",</span><br><span class="line">		<span class="string">"$0"</span></span><br><span class="line">	],</span><br><span class="line">	"description": "Use my images fancybox3"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="开启makedown的snippets使能！"><a href="#开启makedown的snippets使能！" class="headerlink" title="开启makedown的snippets使能！"></a>开启makedown的snippets使能！</h2><p>其实VScode是默认关掉了makedown的snippets的使能的！但是你却找不到配置，我在网上找了好久，发现一个大神写了出来，可能是他去提交过issue吧,下面开始解决(昨天被这个问题坑了好久)</p><ol><li>进入<code>文件-&gt;首选项-&gt;设置-&gt;打开代码配置</code></li></ol><p><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E6%89%93%E5%BC%80%E4%BB%A3%E7%A0%81%E9%85%8D%E7%BD%AE.png" data-fancybox="images" target="_blank" rel="noopener"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E6%89%93%E5%BC%80%E4%BB%A3%E7%A0%81%E9%85%8D%E7%BD%AE.png" width="50%" height="50%"></a></p><ol><li>进入setting，输入makedown</li></ol><p><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/snippets/%E8%BF%9B%E5%85%A5setting%EF%BC%8C%E8%BE%93%E5%85%A5makedown.png" data-fancybox="images" target="_blank" rel="noopener"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/snippets/%E8%BF%9B%E5%85%A5setting%EF%BC%8C%E8%BE%93%E5%85%A5makedown.png" width="50%" height="50%"></a></p><ol><li>配置成true，have fun</li></ol><p><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/snippets/%E6%9C%80%E5%90%8E%E7%9A%84%E6%A0%B7%E5%AD%90.png" data-fancybox="images" target="_blank" rel="noopener"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/snippets/%E6%9C%80%E5%90%8E%E7%9A%84%E6%A0%B7%E5%AD%90.png" width="50%" height="50%"></a></p><h1 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h1><h2 id="电脑重启？"><a href="#电脑重启？" class="headerlink" title="电脑重启？"></a>电脑重启？</h2><p>2019年7月14日16:41:04 写了50mins后，电脑自动关机，重启电脑，看着文档白茫茫的一片，内心一万只草泥马在奔腾…去你大爷的本地写作，就连最基本的hexo新建文章后的信息也不给我留，是个狠人！不想写VScode的snippets的写作方式了——&gt; 跑到coding的备份库一看，还有20mins的工作量被保存，还好一点点吧</p><ol><li>努力学习，努力赚钱，换一个不会莫名其妙重启的电脑</li><li>写作一定要多多保存备份</li><li>可以在网站上写makedown，然后把snippets复制粘贴到网上的makedown上面，这样就重分利用了网站的自动及时保存的功能</li></ol><h2 id="发现snippets的图集功能不是所有平台的makedown通用的"><a href="#发现snippets的图集功能不是所有平台的makedown通用的" class="headerlink" title="发现snippets的图集功能不是所有平台的makedown通用的"></a>发现snippets的图集功能不是所有平台的makedown通用的</h2><p><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/wordpress%E4%B8%8D%E8%83%BD%E7%94%A8%E5%9B%BE%E9%9B%86%E5%8A%9F%E8%83%BD.png" data-fancybox="images" target="_blank" rel="noopener"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/wordpress%E4%B8%8D%E8%83%BD%E7%94%A8%E5%9B%BE%E9%9B%86%E5%8A%9F%E8%83%BD.png" width="50%" height="50%"></a></p><p>所以非特殊情况应该以后不会怎么用这个操作</p><h1 id="使用PicGo和以前使用git上传的区别"><a href="#使用PicGo和以前使用git上传的区别" class="headerlink" title="使用PicGo和以前使用git上传的区别"></a>使用PicGo和以前使用git上传的区别</h1><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><ul><li>picgo<ul><li>可以直接截图上传，支持重命名</li><li>也可以拖动上传</li></ul></li><li>git<ul><li>只能在全部搞好之后使用命令行一次上传</li></ul></li></ul><h2 id="下载没区别"><a href="#下载没区别" class="headerlink" title="下载没区别"></a>下载没区别</h2><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li>picgo<ul><li>可以直接复制相册里面的，不用去网页一个个点开</li><li>还支持各种格式切换，并且支持自定义</li></ul></li><li>git<ul><li>只能手动点开网页一个个去找</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>PicGo确实对自己有帮助，就是链接不用一个个点开网页了</li><li>而且上传了的图片也可以按照每次重新设置不同的路径让文件放入不同的路径</li><li>git也可以通过先pull的方式继续让本地和远程仓库保持同步</li></ol><p><strong>总而言之还是挺好用的</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>write</category>
      </categories>
      <tags>
        <tag>write</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第12周-12-521</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC12%E5%91%A8-12-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST12/%E6%88%AA%E5%9B%BE%E5%87%8F%E5%B0%8F%E8%B4%A8%E9%87%8F%E6%B3%95.png" alt="题图"></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://www.wolfdan.cn/priority-queue%E4%BD%BF%E7%94%A8%E5%9D%91%E7%82%B9%E5%92%8C%E9%A2%98%E9%9B%86/">虽然刷了一些题，写了篇priority_queue入门，但还是太少了呀，下周得好好加油</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">How to define you snippets in VScode?</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/" target="_blank" rel="noopener">PicGo官方文档</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/makedown%E5%86%99%E4%BD%9C%E8%B6%85%E6%96%B9%E4%BE%BF%E7%9A%84%E5%9B%BE%E7%89%87%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/">makedown写作超方便的图片使用方式</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>下雪啦(#^.^#)</title>
    <url>/test/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="下雪啦-The-winter-is-here-让我们一起超越小姐姐吧"><a href="#下雪啦-The-winter-is-here-让我们一起超越小姐姐吧" class="headerlink" title="下雪啦(#^.^#) The winter is here ,让我们一起超越小姐姐吧"></a>下雪啦(#^.^#) The winter is here ,让我们一起超越小姐姐吧</h1><p><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/fancyboy/%E8%B6%85%E8%B6%8A%E5%B0%8F%E5%A7%90%E5%A7%90.jpg" data-fancybox="images" target="_blank" rel="noopener"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/fancyboy/%E8%B6%85%E8%B6%8A%E5%B0%8F%E5%A7%90%E5%A7%90.jpg" width="50%" height="50%"></a></p><p><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/fancyboy/%E8%B6%85%E8%B6%8A%E5%B0%8F%E5%A7%90%E5%A7%9013.jpg" data-fancybox="images" target="_blank" rel="noopener"><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/fancyboy/%E8%B6%85%E8%B6%8A%E5%B0%8F%E5%A7%90%E5%A7%9013.jpg" width="50%" height="50%"></a></p><h2 id="留个纪念"><a href="#留个纪念" class="headerlink" title="留个纪念"></a>留个纪念</h2><blockquote><p>因为比较烧显卡，而且对访问速度影响比较大，所以就关掉了<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/hexo%E4%BC%98%E5%8C%96/%E4%B8%8B%E9%9B%AA%E4%BA%86/%E9%9B%AA%E8%8A%B1%E7%89%B9%E6%95%88%E7%BA%AA%E5%BF%B5.png" alt></p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>priority_queue使用坑点和题集</title>
    <url>/priority-queue%E4%BD%BF%E7%94%A8%E5%9D%91%E7%82%B9%E5%92%8C%E9%A2%98%E9%9B%86/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="priority使用pair比较的坑点"><a href="#priority使用pair比较的坑点" class="headerlink" title="priority使用pair比较的坑点"></a>priority使用pair比较的坑点</h1><p>所以用pair的priority_queue只能使用struct的重载比较，why?!</p><p>重载运算符的操作不能用于pair类型数据的排序，只能作用于结构体或类对象。—-&gt; 所以不能使用node型的priority_queue的函数重载操作符的方法</p><p>node可以函数操作符重载</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/node%E5%8F%AF%E4%BB%A5%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD.png" alt="node可以函数操作符重载"></p><p>pair不支持重载运算符</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/pair%E4%B8%8D%E6%94%AF%E6%8C%81%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="pair不支持重载运算符"></p><p>priority_queue定义不支持”嵌入式”函数重载的方法，即 <code>priority_queue&lt;P, vector&lt;P&gt;, cop &gt;</code>这样会报错 <code>sort(a,a+n,cop)</code>可以</p><p>比较区只有strut定义</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/struct%E6%AF%94%E8%BE%83.png" alt="比较区只有strut定义"></p><p>嵌入式函数重载报错</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E6%8A%A5%E9%94%99.png" alt="嵌入式函数重载报错"></p><h2 id="综上：不能函数重载了，那么就只能struct的自定义重载了咯"><a href="#综上：不能函数重载了，那么就只能struct的自定义重载了咯" class="headerlink" title="综上：不能函数重载了，那么就只能struct的自定义重载了咯"></a>综上：不能函数重载了，那么就只能struct的自定义重载了咯</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/strut%E8%87%AA%E5%AE%9A%E4%B9%89%E6%AF%94%E8%BE%83%E5%87%BD%E6%95%B0.png" alt="strut自定义比较函数"></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; // cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt; // priority_queue</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node&amp; a, <span class="keyword">const</span> node&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &gt; b.y; <span class="comment">//less默认大顶堆，改为小顶堆</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cop</span><span class="params">(<span class="keyword">const</span> P&amp; a, <span class="keyword">const</span> P&amp; b)</span> </span>&#123; <span class="keyword">return</span> a.second &gt; b.second; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp1</span> &#123;</span></span><br><span class="line">    <span class="comment">// 就是说在cmp里面，当两个P使用  ()的时候，他们使用的下面的函数，也就是创建了一个自定义的函数</span></span><br><span class="line">    <span class="comment">/* 使用时 大概是这样的 cmp1 A, A(a,b) 就类似  非strut的自定义函数了</span></span><br><span class="line"><span class="comment">        bool cmp(P a,P b)&#123; return a.second&lt;b.second;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(P a, P b)</span></span>&#123; <span class="comment">// 重载() 的函数 叫 仿函数--&gt;紫书找到的</span></span><br><span class="line">        <span class="keyword">return</span> a.second &gt; b.second; <span class="comment">//小顶堆</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Popping out elements..."</span>;</span><br><span class="line">    <span class="comment">// priority_queue&lt;node, vector&lt;node&gt;, less&lt;node&gt;&gt; test;</span></span><br><span class="line">    priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;,cmp1&gt; test;</span><br><span class="line">    test.push(&#123; <span class="number">3</span>, <span class="number">2</span> &#125;);</span><br><span class="line">    test.push(&#123; <span class="number">1</span>, <span class="number">6</span> &#125;);</span><br><span class="line">    test.push(&#123; <span class="number">2</span>, <span class="number">8</span> &#125;);</span><br><span class="line">    test.push(&#123; <span class="number">5</span>, <span class="number">10</span> &#125;);</span><br><span class="line">    <span class="keyword">while</span> (!test.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; test.top().second;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; ' ' &lt;&lt; test.top().y;</span></span><br><span class="line">        test.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2019年7月9日23:27:19 更第一波</p><h1 id="题集"><a href="#题集" class="headerlink" title="题集"></a>题集</h1><p>注: 为了统一性，所以一般链接地址都是用的Virtual Judge的链接地址，只有VJ上没有的才用其他链接</p><h2 id="2019年7月13日第一更"><a href="#2019年7月13日第一更" class="headerlink" title="2019年7月13日第一更"></a>2019年7月13日第一更</h2><p><a href="https://vjudge.net/problem/POJ-3190" target="_blank" rel="noopener">poj3190</a></p><p><a href="https://ac.nowcoder.com/acm/contest/948/G" target="_blank" rel="noopener">牛客重现2019矿大省赛G题</a></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="priority-queue各种实现方式的时间复杂度对比"><a href="#priority-queue各种实现方式的时间复杂度对比" class="headerlink" title="priority_queue各种实现方式的时间复杂度对比"></a>priority_queue各种实现方式的时间复杂度对比</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E7%AE%97%E6%B3%95/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/%E5%90%84%E7%A7%8D%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.png" alt="priority_queue各种实现方式的时间复杂度对比"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第11周-11-521</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC11%E5%91%A8-11-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST11/%E7%BB%A7%E7%BB%AD%E5%81%9A%E9%87%8D%E8%A6%81%E7%9A%84%E4%BA%8B%EF%BC%8C%E4%B8%80%E5%AE%9A%E4%BC%9A%E6%8D%A1%E5%88%B0%E9%9D%A2%E5%8C%85%E7%9A%84.jpg" alt="继续做重要的事，一定会捡到面包的"></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.7/2019.7.6" target="_blank" rel="noopener">最近难的考试都考完了，整理了一段时间，接下来开始算法刷题冲刺</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://code.visualstudio.com/docs/remote/ssh#_getting-started" target="_blank" rel="noopener">VScode remote/ssh#_getting-started</a></p><p>最近下载了VScode Insiders 折腾了一手Remote SSH发现还是有很多坑的</p><ol><li>ssh只能密钥连接</li><li>ssh只能连接22端口</li><li>许多文件都无法打开</li><li>许多工作区间都无法建立文件文件夹<br><strong>当然上面3，4也可能是我技术太菜了，对linux的shell管理不太懂，导致自己没有像有些大佬一样建立了命令行的连接,所以最近一直在学linux，等我学完，可能可以捞自己一手</strong></li></ol><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/ouyang_peng/article/details/77334215" target="_blank" rel="noopener">Git学习—&gt;如何通过Shell脚本自动定时将Gitlab备份文件复制到远程服务器?</a><br><a href="https://xianjian10.com/archives/973" target="_blank" rel="noopener">扩展efi分区</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><h2 id="技术分享"><a href="#技术分享" class="headerlink" title="技术分享"></a>技术分享</h2><p><a href="https://www.wolfdan.cn/git%E5%A4%87%E4%BB%BDwordpress/">git备份wordpress</a></p><h2 id="读书分享"><a href="#读书分享" class="headerlink" title="读书分享"></a>读书分享</h2><p><a href="https://www.wolfdan.cn/%E6%80%8E%E6%A0%B7%E6%88%90%E4%B8%BA%E7%B2%BE%E5%8A%9B%E7%AE%A1%E7%90%86%E7%9A%84%E9%AB%98%E6%89%8B-%E5%90%AC%E4%B9%A6%E6%9C%89%E6%84%9F/">怎样成为精力管理的高手-听书有感</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>怎样成为精力管理的高手-听书有感</title>
    <url>/%E6%80%8E%E6%A0%B7%E6%88%90%E4%B8%BA%E7%B2%BE%E5%8A%9B%E7%AE%A1%E7%90%86%E7%9A%84%E9%AB%98%E6%89%8B-%E5%90%AC%E4%B9%A6%E6%9C%89%E6%84%9F/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><hr><p>2019年7月2日22:08:39</p><h1 id="00-你为什么需要管理精力"><a href="#00-你为什么需要管理精力" class="headerlink" title="00 你为什么需要管理精力"></a>00 你为什么需要管理精力</h1><hr><p>各种时间管理 工作法，有一定的改善，但是还是没有根本性的解决问题</p><p>时间总是不能扩张的，而时间质量可以扩张，这种就需要精力管理！</p><p><strong>作者发现一个很牛逼的人，就是全职工作者，然后还是学生，还是3个孩子的爸爸！！！然后他就和那个黄同学学习了精力管理！然后就各种人生开挂！！！</strong></p><h3 id="所以学完了前几天的时间管理后，现在开始学习精力管理！那么我也可以成为大佬，成为一个真正的大佬"><a href="#所以学完了前几天的时间管理后，现在开始学习精力管理！那么我也可以成为大佬，成为一个真正的大佬" class="headerlink" title="所以学完了前几天的时间管理后，现在开始学习精力管理！那么我也可以成为大佬，成为一个真正的大佬"></a>所以学完了前几天的时间管理后，现在开始学习精力管理！那么我也可以成为大佬，成为一个真正的大佬</h3><h1 id="01-精力管理的金字塔模型"><a href="#01-精力管理的金字塔模型" class="headerlink" title="01 精力管理的金字塔模型"></a>01 精力管理的金字塔模型</h1><ul><li>精力好不是天分</li><li>你只要掌握了方法，你就能锻炼你的精力</li></ul><p>金字塔如下</p><ul><li>意义感 —&gt; 目标,使命(人为什么活着!)—&gt;&gt;创造美好的生活</li><li>注意力 —&gt; 专注,聚焦(很重要,人可控)</li><li>情绪 —&gt; 感恩,乐观,兴奋</li><li>体能—&gt; 饮食,运动,睡眠,健康</li></ul><h1 id="02-怎样设计最佳运动方案"><a href="#02-怎样设计最佳运动方案" class="headerlink" title="02 怎样设计最佳运动方案"></a>02 怎样设计最佳运动方案</h1><ul><li>运动是改善体能的最佳方式 —-&gt; 疾病则反之</li><li>人有氧运动得越多，这样人的大脑就可以获得更多氧气，这样大脑就反应很快</li><li>长期静坐，可能导致死亡</li></ul><p>进化论: 好吃懒做的祖先更容易活下来—保留精力</p><ul><li>找到喜欢和享受的运动，一周5天，每天30mins-1小时 —- &gt; 脚伤了，可以游泳！ —-&gt; 多多冥想运动的好处</li><li>中等强度220-年龄=200*(60-70%)=130 心率达30mins</li><li>设定明确的目标，设定具体的时间，运动量的目标</li><li>每天走到8000步</li><li>反馈！游戏之所以上瘾，是因为反馈快，所以运动一定要反馈</li><li>没时间的话，高轻度间歇训练(每天一分钟都可以!)</li><li>刷牙可以单腿站立，下蹲</li><li>站立的工作</li><li>跑步可以了解一个新的城市</li></ul><p>放大回来记一下运动量的要求</p><p>得到的 高效学习，时间管理，现在又学精力管理，加油，一定可以竞赛，项目，成绩，健康都做好的，加油</p><hr><p>2019年7月3日22:45:55<br>03 吃对了，就不会累</p><hr><p>睡眠:</p><ol><li>昼夜节律</li><li>内生平衡节律(睡得久想醒,醒得久想睡)<ol><li>下午2-3会报警，所以就困</li></ol></li><li>白天多嗮太阳和晚上多睡会,多喝水</li></ol><h2 id="想要获得好的精力"><a href="#想要获得好的精力" class="headerlink" title="想要获得好的精力"></a>想要获得好的精力</h2><h3 id="少吃多餐"><a href="#少吃多餐" class="headerlink" title="少吃多餐"></a>少吃多餐</h3><p>高碳水化合物，会发饭晕(<strong>所以主要控制血糖水平的波动</strong>)</p><ol><li>少吃多餐 3顿-&gt; 5顿<ol><li>(早中午少吃主食，多吃蔬菜，间隙可以加水果)</li><li>上午补充坚果水果</li></ol></li><li>一天大致安排<ol><li>早上高蛋白高纤维</li><li>上午补充坚果水果 10点-11点</li><li>中午6-7分饱,大量蔬菜，或者鸡肉鱼肉高质量蛋白质</li><li>下午3-4点 水果坚果，蓝莓草莓等</li><li>晚上可以相对多一点碳水化合物，谷物或者杂粮</li></ol></li><li>总结: 少吃多餐，让血糖尽可能保持平衡</li></ol><h3 id="吃低糖-营养质量高的食物"><a href="#吃低糖-营养质量高的食物" class="headerlink" title="吃低糖,营养质量高的食物"></a>吃低糖,营养质量高的食物</h3><p>NQI(食堂营养占比/热量占比)&gt;=1 才好</p><p>作者建议 &gt;=2</p><p>水果蔬菜 —- 特别是深绿色的蔬菜</p><p>加工的 薯片等 + 白米白面都是 NQI&lt;1 的</p><p>蛋白质per/碳水化合物percent 约= NQI</p><h3 id="多喝水-让身体充分水化"><a href="#多喝水-让身体充分水化" class="headerlink" title="多喝水,让身体充分水化"></a>多喝水,让身体充分水化</h3><p>缺水带给你疲劳的感觉 —- &gt; 夏困</p><p>判断喝水够不够</p><ol><li>体重/32 == 55/32 = 1.7 L = 3瓶水</li><li>排尿判断—-两小时左右一次,而且尿颜色很浅</li></ol><p>咖啡每天4杯内不会死…茶也行<br>但是不要加糖！</p><hr><p>2019年7月4日23:12:13<br>04 睡得好，能提升你的决策水平</p><hr><ul><li>1w个小时刻意练习</li><li>天才的平均睡眠时间，8小时16mins 和正常人差不多</li><li>睡多久合适，成年人7-9小时</li></ul><h2 id="如何提高睡眠质量"><a href="#如何提高睡眠质量" class="headerlink" title="如何提高睡眠质量"></a>如何提高睡眠质量</h2><ul><li>没事别上床—&gt;建立上床是睡觉的条件反射，醒着躺床上20mins不能入睡就要起床看书，按时起床！每天必须要同一时刻起床，不能赖床</li><li>重视白天的活动.日光下的活动更好—可以合成褪黑素(焦虑也会睡不好，就想我那天石膏21天去复查前夜3,4,5,6点都醒过)</li><li>睡前做准备:创造入睡的环境和心情(屋子黑暗+睡前别看显示屏),降低身体体温(体温下降过程),加入白噪音(风雨,动物音),让大脑进入睡眠状态(看难的书)</li><li>酒精和打鼾,酒精会绕乱深睡眠,呼吸睡眠暂停综合症,打鼾超5s,要去看医生,大脑会缺氧,损伤大脑,高血压等等</li></ul><hr><p>2019年7月6日00:41:28</p><p>05 击退消磨意志的疾病</p><hr><ol><li><p>坐姿要好<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BE%97%E5%88%B0/%E7%B2%BE%E5%93%81%E8%AF%BE/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E7%B2%BE%E5%8A%9B%E7%AE%A1%E7%90%86%E7%9A%84%E9%AB%98%E6%89%8B/%E9%A2%84%E9%98%B2%E5%92%8C%E5%AF%B9%E6%8A%97%E8%81%8C%E4%B8%9A%E7%96%BE%E7%97%85/1.png" alt="坐姿要好"></p></li><li><p>节律饮食<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BE%97%E5%88%B0/%E7%B2%BE%E5%93%81%E8%AF%BE/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E7%B2%BE%E5%8A%9B%E7%AE%A1%E7%90%86%E7%9A%84%E9%AB%98%E6%89%8B/%E9%A2%84%E9%98%B2%E5%92%8C%E5%AF%B9%E6%8A%97%E8%81%8C%E4%B8%9A%E7%96%BE%E7%97%85/2.png" alt="节律饮食"></p></li></ol><hr><p>2019年7月7日16:14:03<br>把所有的都学完了，现在直接做总结吧</p><hr><h1 id="重温并记住精力管理的金子塔"><a href="#重温并记住精力管理的金子塔" class="headerlink" title="重温并记住精力管理的金子塔"></a>重温并记住精力管理的金子塔</h1><ul><li>意义感 —&gt; 目标,使命(人为什么活着!)—&gt;&gt;创造美好的生活</li><li>注意力 —&gt; 专注,聚焦(很重要,人可控)</li><li>情绪 —&gt; 感恩,乐观,兴奋</li><li>体能—&gt; 饮食,运动,睡眠,健康</li></ul><h1 id="找到自己的人生意义"><a href="#找到自己的人生意义" class="headerlink" title="找到自己的人生意义"></a>找到自己的人生意义</h1><p>这要自己不断去尝试，去寻找</p><h1 id="注意力和情绪"><a href="#注意力和情绪" class="headerlink" title="注意力和情绪"></a>注意力和情绪</h1><p>通过呼吸练习和冥想练习来做到<strong>[讲真的，我第一练习的时候，我哭了]</strong><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BE%97%E5%88%B0/%E7%B2%BE%E5%93%81%E8%AF%BE/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E7%B2%BE%E5%8A%9B%E7%AE%A1%E7%90%86%E7%9A%84%E9%AB%98%E6%89%8B/%E7%83%AD%E5%90%AF%E5%8A%A8%E5%91%BC%E5%90%B8%E7%BB%83%E4%B9%A0.jpg" alt="在呼吸练习中  看图吧"></p><p>==分享给你==</p><p>链接：<a href="https://pan.baidu.com/s/1wsDsFvFbJNrqIoIYVo-I9Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1wsDsFvFbJNrqIoIYVo-I9Q</a></p><p>提取码：undp</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>git备份wordpress</title>
    <url>/git%E5%A4%87%E4%BB%BDwordpress/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="git备份wordpress"><a href="#git备份wordpress" class="headerlink" title="git备份wordpress"></a>git备份wordpress</h1><h2 id="登陆网站目录初始化git仓库-并且-与远程仓库对接上传"><a href="#登陆网站目录初始化git仓库-并且-与远程仓库对接上传" class="headerlink" title="登陆网站目录初始化git仓库 并且 与远程仓库对接上传"></a>登陆网站目录初始化git仓库 并且 与远程仓库对接上传</h2><h3 id="首先使用ssh工具-Xshell或者putty等-登入之后进入到自己wordpress网站的根目录"><a href="#首先使用ssh工具-Xshell或者putty等-登入之后进入到自己wordpress网站的根目录" class="headerlink" title="首先使用ssh工具(Xshell或者putty等)登入之后进入到自己wordpress网站的根目录"></a>首先使用ssh工具(Xshell或者putty等)登入之后进入到自己wordpress网站的根目录</h3><h3 id="然后初始化仓库"><a href="#然后初始化仓库" class="headerlink" title="然后初始化仓库"></a>然后初始化仓库</h3><p><code>git init</code></p><h3 id="在远程coding或gitee上面新建私有仓库上面，土豪可以在在GitHub上面建私有仓库"><a href="#在远程coding或gitee上面新建私有仓库上面，土豪可以在在GitHub上面建私有仓库" class="headerlink" title="在远程coding或gitee上面新建私有仓库上面，土豪可以在在GitHub上面建私有仓库"></a>在远程coding或gitee上面新建<strong>私有仓库</strong>上面，土豪可以在在GitHub上面建私有仓库</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E5%A4%87%E4%BB%BD%E6%8A%80%E5%B7%A7/git%E5%A4%87%E4%BB%BDwordpress/1.png" alt="登陆网站目录初始化git仓库 并且 与远程仓库对接"></p><h3 id="把自己网站所在的vps的公钥放到coding或gitee的ssh密钥管理里面"><a href="#把自己网站所在的vps的公钥放到coding或gitee的ssh密钥管理里面" class="headerlink" title="把自己网站所在的vps的公钥放到coding或gitee的ssh密钥管理里面"></a>把自己网站所在的vps的公钥放到coding或gitee的ssh密钥管理里面</h3><h4 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h4><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E5%A4%87%E4%BB%BD%E6%8A%80%E5%B7%A7/git%E5%A4%87%E4%BB%BDwordpress/%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5.png" alt="添加公钥"></p><h4 id="把本地仓库文件传到远程仓库"><a href="#把本地仓库文件传到远程仓库" class="headerlink" title="把本地仓库文件传到远程仓库"></a>把本地仓库文件传到远程仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一定要把下面的ssh路径改成你的ssh路径啊，然后origin也可以改成其他名字(对应本地对远程的一种称呼)</span></span><br><span class="line">git remote add origin git@git.dev.tencent.com:username/wordpreessbackup.git</span><br><span class="line"><span class="comment"># git 本地远程推送三连击</span></span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">"你的注释"</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E5%A4%87%E4%BB%BD%E6%8A%80%E5%B7%A7/git%E5%A4%87%E4%BB%BDwordpress/4.png" alt="三连击"></p><h4 id="我们想把数据库也备份怎么办？"><a href="#我们想把数据库也备份怎么办？" class="headerlink" title="我们想把数据库也备份怎么办？"></a>我们想把数据库也备份怎么办？</h4><h5 id="那就干啊，直接在网站根目录下面执行数据库备份，先来看看数据库备份通用的语句"><a href="#那就干啊，直接在网站根目录下面执行数据库备份，先来看看数据库备份通用的语句" class="headerlink" title="那就干啊，直接在网站根目录下面执行数据库备份，先来看看数据库备份通用的语句"></a>那就干啊，直接在网站根目录下面执行数据库备份，先来看看数据库备份通用的语句</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hostname直接是本机，所以我们不用写</span></span><br><span class="line"><span class="comment"># username是我们的数据库的用户名</span></span><br><span class="line"><span class="comment"># mypwd是我们的数据库密码</span></span><br><span class="line"><span class="comment"># databasename就是要备份的数据名字</span></span><br><span class="line">mysqldump -hhostname -uusername -pmypwd databasename &gt; /path to backup/bakname.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所以我的语句应该是如下，你们也可以看着改动，这些数据的信息可以登陆宝塔面板看，或者找到你以前建网站的时候保存的一些重要信息</span></span><br><span class="line">mysqldump -uwolfdanDB -ppassword wolfdanDB &gt; wolfdanDB2019_7_6.sql</span><br></pre></td></tr></table></figure><h5 id="然后就成功了，再次推送到远程即可"><a href="#然后就成功了，再次推送到远程即可" class="headerlink" title="然后就成功了，再次推送到远程即可"></a>然后就成功了，再次推送到远程即可</h5><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E5%A4%87%E4%BB%BD%E6%8A%80%E5%B7%A7/git%E5%A4%87%E4%BB%BDwordpress/5.png" alt="数据库备份"></p><h3 id="如果你出了一些问题可以看这里，否则可以直接看下一步："><a href="#如果你出了一些问题可以看这里，否则可以直接看下一步：" class="headerlink" title="如果你出了一些问题可以看这里，否则可以直接看下一步："></a>如果你出了一些问题可以看这里，否则可以直接看下一步：</h3><p><strong>注: 其实wolfdan我是先犯了下面的错误然后才有上面一条龙正确的，所以下面的这些错误修正意见基本上是说把上面步骤完善好，233</strong></p><ul><li>没有生成密钥且不会生成密钥的朋友可以看我<a href="https://www.jianshu.com/p/8e20bb3bc315" target="_blank" rel="noopener">以前发的文章</a>，虽然当时写得比较水，但还是能看图解决问题的</li><li>更新仓库发现没有访问权限则检查自己有没有做上面 <strong>生成密钥</strong> 和 <strong>添加公钥</strong><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E5%A4%87%E4%BB%BD%E6%8A%80%E5%B7%A7/git%E5%A4%87%E4%BB%BDwordpress/2.png" alt="更新仓库发现没有访问权限"></li><li>上传文件被告知<code>src refspec master does not match any</code>，我们使用<code>git status</code>检查发现是没有<code>git add --all</code> — &gt; 也就是说我们要先本地commit<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E5%A4%87%E4%BB%BD%E6%8A%80%E5%B7%A7/git%E5%A4%87%E4%BB%BDwordpress/3.png" alt="没有本地commit"></li></ul><h2 id="写bash代码，并且使用crontab定时执行备份-并定时-清理一个月前备份的sql文件-节省内存呀"><a href="#写bash代码，并且使用crontab定时执行备份-并定时-清理一个月前备份的sql文件-节省内存呀" class="headerlink" title="写bash代码，并且使用crontab定时执行备份 并定时 清理一个月前备份的sql文件(节省内存呀)"></a>写bash代码，并且使用crontab定时执行备份 并定时 清理一个月前备份的sql文件(节省内存呀)</h2><blockquote><p>如果每次都手动执行，难免会有忘记的时候，而且就算你博闻强识，你不嫌花时间吗？我们的追求当然是全<strong>自动化</strong>！<strong>当然现在不想折腾了可以保存页面下次来继续折腾</strong></p><h3 id="写出backup-sh文件—-gt-当然要把一些变量改成你的-变量值"><a href="#写出backup-sh文件—-gt-当然要把一些变量改成你的-变量值" class="headerlink" title="写出backup.sh文件—&gt; 当然要把一些变量改成你的 变量值"></a>写出backup.sh文件—&gt;<strong> 当然要把一些变量改成你的 变量值</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#this is where</span></span><br><span class="line">path=/home/www/wolfdan.cn</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库名称</span></span><br><span class="line">sqlName=wolfdanDB</span><br><span class="line"></span><br><span class="line"><span class="comment">#用户名称</span></span><br><span class="line">userName=wolfdanDB</span><br><span class="line"></span><br><span class="line"><span class="comment">#用户密码</span></span><br><span class="line">userPasswd=root</span><br><span class="line"></span><br><span class="line"><span class="comment">#当前时间</span></span><br><span class="line">DATE=`date +<span class="string">"%Y-%m-%d"</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#Log存放路径</span></span><br><span class="line">LogFile=<span class="variable">$path</span>/backupLog/<span class="variable">$DATE</span>.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新建日志文件</span></span><br><span class="line">touch <span class="variable">$LogFile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#追加日志到日志文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"wolfdan.cn git auto backup to coding server, start at  <span class="variable">$(date +"%Y-%m-%d %H:%M:%S")</span>"</span> &gt;&gt;  <span class="variable">$LogFile</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------"</span> &gt;&gt; <span class="variable">$LogFile</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原本我以为执行bash会自动把目录切换，直到crond自动检测bash的log文件，并在log文件中告知我没有 .git文件，我才知道要自己手动cd</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$path</span></span><br><span class="line"></span><br><span class="line">mysqldump -u<span class="variable">$userName</span> -p<span class="variable">$userPasswd</span> <span class="variable">$sqlName</span> &gt; wolfdanDB<span class="variable">$DATE</span>.sql</span><br><span class="line"></span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">"`date '+%Y-%m-%d %H:%M:%S'`"</span></span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e  <span class="string">"---Have a nice day in www.wolfdan.cn----welcome to contact me by VX:wolf_dan2--------\n"</span>&gt;&gt; <span class="variable">$LogFile</span></span><br></pre></td></tr></table></figure></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E5%A4%87%E4%BB%BD%E6%8A%80%E5%B7%A7/git%E5%A4%87%E4%BB%BDwordpress/bash%E5%8D%87%E7%BA%A7.png" alt="backup的bash文件编写"></p><h3 id="赋予backup-sh执行权限并且测试一下"><a href="#赋予backup-sh执行权限并且测试一下" class="headerlink" title="赋予backup.sh执行权限并且测试一下"></a>赋予backup.sh执行权限并且测试一下</h3><p><code>chmod 777 backup.sh</code></p><p><code>sh backup.sh</code></p><h3 id="我自己之前bash没写好出现的一些问题"><a href="#我自己之前bash没写好出现的一些问题" class="headerlink" title="我自己之前bash没写好出现的一些问题"></a>我自己之前bash没写好出现的一些问题</h3><h4 id="bash变量赋值不能为空"><a href="#bash变量赋值不能为空" class="headerlink" title="bash变量赋值不能为空"></a>bash变量赋值不能为空</h4><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E5%A4%87%E4%BB%BD%E6%8A%80%E5%B7%A7/git%E5%A4%87%E4%BB%BDwordpress/bash%E7%9A%84%E8%B5%8B%E5%80%BC%E6%98%AF%E4%B8%8D%E8%83%BD%E7%A9%BA%E6%A0%BC%E7%9A%84%EF%BC%81.png" alt="bash变量赋值不能为空"></p><h4 id="数据库名称和密码什么的不能出错"><a href="#数据库名称和密码什么的不能出错" class="headerlink" title="数据库名称和密码什么的不能出错"></a>数据库名称和密码什么的不能出错</h4><h3 id="使用crontab定时"><a href="#使用crontab定时" class="headerlink" title="使用crontab定时"></a><strong>使用crontab定时</strong></h3><h4 id="vim-etc-crontab-没有vim可以sudo-apt-get-install-vim-Debian-Ubuntu用户-sudo-yum-install-vim-CentOS用户-下载或者暂时用-vi-代替"><a href="#vim-etc-crontab-没有vim可以sudo-apt-get-install-vim-Debian-Ubuntu用户-sudo-yum-install-vim-CentOS用户-下载或者暂时用-vi-代替" class="headerlink" title="vim /etc/crontab 没有vim可以sudo apt-get install vim(Debian/Ubuntu用户)-sudo yum install vim(CentOS用户)下载或者暂时用 vi 代替"></a><code>vim /etc/crontab</code> 没有vim可以<code>sudo apt-get install vim</code>(Debian/Ubuntu用户)-<code>sudo yum install vim</code>(CentOS用户)下载或者暂时用 <code>vi</code> 代替</h4><h4 id="在注释下面添加你要的任务就行"><a href="#在注释下面添加你要的任务就行" class="headerlink" title="在注释下面添加你要的任务就行"></a>在注释下面添加你要的任务就行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的wolfdan.cn 每周备份</span></span><br><span class="line">0 3 * * 0 root /home/www/wolfdan.cn/backup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动删除一个月前的sql，下周git的时候会同步到云端删除</span></span><br><span class="line">0 4 * * 0 root /home/www/wolfdan.cn/auto_rm.sh</span><br></pre></td></tr></table></figure><h3 id="重载配置并启让配置生效"><a href="#重载配置并启让配置生效" class="headerlink" title="重载配置并启让配置生效"></a>重载配置并启让配置生效</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#重新加载cron配置文件</span></span><br><span class="line">sudo /usr/sbin/service cron reload</span><br><span class="line"><span class="comment">#重启cron服务</span></span><br><span class="line">sudo /usr/sbin/service cron restart</span><br></pre></td></tr></table></figure><h3 id="crontab测试和auto-rm-sh放一起了，所以不妨继续往下看"><a href="#crontab测试和auto-rm-sh放一起了，所以不妨继续往下看" class="headerlink" title="crontab测试和auto_rm.sh放一起了，所以不妨继续往下看"></a>crontab测试和auto_rm.sh放一起了，所以不妨继续往下看</h3><h3 id="写auto-rm-sh文件"><a href="#写auto-rm-sh文件" class="headerlink" title="写auto_rm.sh文件"></a>写auto_rm.sh文件</h3><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p><strong>bash文件一定要小心写cpp时的习惯性变量赋值的空格！</strong><br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路径</span></span><br><span class="line">Dir=/home/www/wolfdan.cn</span><br><span class="line"></span><br><span class="line"><span class="comment">#当前时间</span></span><br><span class="line">DATE=`date +<span class="string">"%Y-%m-%d"</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#Log存放位置</span></span><br><span class="line">LogFile=<span class="variable">$Dir</span>/backupLog/<span class="variable">$DATE</span>.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新建日志文件(其实backup的脚本已经建立了，不过建立同名的会直接输出到那里，所以没有关系)</span></span><br><span class="line">touch <span class="variable">$LogFile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#追加日志信息</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"wolfdan,cn auto_rm .sql file a monoth ago. Start at <span class="variable">$(date +"%Y-%m-%d %H:%M:%S")</span>"</span> &gt;&gt; <span class="variable">$LogFile</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"------------------------------------------------------------------------------"</span> &gt;&gt; <span class="variable">$LogFile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找备份路径下，超过30天 且文件后缀为.sql 的 sql备份文件 然后删除</span></span><br><span class="line">find <span class="variable">$Dir</span> -<span class="built_in">type</span> f -mtime +30 -name <span class="string">'*.sql*'</span> -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"----Done!Welcome to www.wolfdan.cn and add my VX:wolf_dan2---have a nice day!-------\n"</span> &gt;&gt; <span class="variable">$LogFile</span></span><br></pre></td></tr></table></figure><p></p><h4 id="赋予权限并且测试执行"><a href="#赋予权限并且测试执行" class="headerlink" title="赋予权限并且测试执行"></a>赋予权限并且测试执行</h4><p><code>chmod 777 auto_rm.sh</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里我们先创建1些一个月前的文件</span></span><br><span class="line">touch -t 201905011230 test1.sql</span><br><span class="line">touch -t 201906011230 test2.sql</span><br><span class="line">touch -t 201907011230 test3.sql</span><br><span class="line"><span class="comment"># 查看目录下文件  当然也可以用   ll 详细查看带时间的文件信息</span></span><br><span class="line">ls</span><br><span class="line"><span class="comment">#  然后 测试</span></span><br><span class="line">sh auto_rm.sh</span><br><span class="line"><span class="comment"># 再次查看  当然也可以用   ll 详细查看带时间的文件信息</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E5%A4%87%E4%BB%BD%E6%8A%80%E5%B7%A7/git%E5%A4%87%E4%BB%BDwordpress/%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%E6%95%88%E6%9E%9C.png" alt="删除的测试"></p><h3 id="crontab定时测试"><a href="#crontab定时测试" class="headerlink" title="crontab定时测试"></a>crontab定时测试</h3><p><strong>细心用户可能看到我定时文件里面以及写上了auto_rm.sh任务了，没有写上的朋友快去写上吧</strong></p><h4 id="先修改crontabe配置vim-etc-contab"><a href="#先修改crontabe配置vim-etc-contab" class="headerlink" title="先修改crontabe配置vim /etc/contab"></a>先修改crontabe配置<code>vim /etc/contab</code></h4><p><strong>假设我们现在是11:15,那么我们把日，月，周全打成*号，然后min设置成17，hour设置成11，这样就定时在2mins后了，然后auto_rm设置比backup多1mins</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的wolfdan.cn 每周备份</span></span><br><span class="line">17 11 * * * root /home/www/wolfdan.cn/backup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动删除一个月前的sql，下周git的时候会同步到云端删除</span></span><br><span class="line">18  11 * * root /home/www/wolfdan.cn/auto_rm.sh</span><br></pre></td></tr></table></figure><h4 id="当然要重载并重启服务啦啦啦"><a href="#当然要重载并重启服务啦啦啦" class="headerlink" title="当然要重载并重启服务啦啦啦"></a>当然要重载并重启服务啦啦啦</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#重新加载cron配置文件</span></span><br><span class="line">sudo /usr/sbin/service cron reload</span><br><span class="line"><span class="comment">#重启cron服务</span></span><br><span class="line">sudo /usr/sbin/service cron restart</span><br></pre></td></tr></table></figure><p><strong>当然我们又要创建一个月前的测试文件</strong><br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里我们先创建1些一个月前的文件</span></span><br><span class="line">touch -t 201905011230 test1.sql</span><br><span class="line">touch -t 201906011230 test2.sql</span><br><span class="line">touch -t 201907011230 test3.sql</span><br></pre></td></tr></table></figure><p></p><h4 id="然后在11-18的时候去ls查看是否还有test1-sql-和-test2-sql"><a href="#然后在11-18的时候去ls查看是否还有test1-sql-和-test2-sql" class="headerlink" title="然后在11:18的时候去ls查看是否还有test1.sql 和 test2.sql"></a>然后在11:18的时候去ls查看是否还有test1.sql 和 test2.sql</h4><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E5%A4%87%E4%BB%BD%E6%8A%80%E5%B7%A7/git%E5%A4%87%E4%BB%BDwordpress/%E5%AE%8C%E7%BE%8E%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC.png" alt="完美执行脚本啦"></p><h4 id="以及输出日志"><a href="#以及输出日志" class="headerlink" title="以及输出日志"></a>以及输出日志</h4><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E5%A4%87%E4%BB%BD%E6%8A%80%E5%B7%A7/git%E5%A4%87%E4%BB%BDwordpress/777.png" alt="输出日志是以前的，ball ball 你们动手试试给个反馈吧"></p><h3 id="输出日志是以前的，ball-ball-你们动手试试给个反馈吧…不妨把你们的结果发到评论区，谢谢你们"><a href="#输出日志是以前的，ball-ball-你们动手试试给个反馈吧…不妨把你们的结果发到评论区，谢谢你们" class="headerlink" title="输出日志是以前的，ball ball 你们动手试试给个反馈吧…不妨把你们的结果发到评论区，谢谢你们"></a><strong>输出日志是以前的，ball ball 你们动手试试给个反馈吧…不妨把你们的结果发到评论区，谢谢你们</strong></h3><h3 id="也可以加微信拉群讨论，我会经常发一些朋友圈-wolf-dan2"><a href="#也可以加微信拉群讨论，我会经常发一些朋友圈-wolf-dan2" class="headerlink" title="也可以加微信拉群讨论，我会经常发一些朋友圈 wolf_dan2"></a>也可以加微信拉群讨论，我会经常发一些朋友圈 wolf_dan2</h3><p>参考的大佬文章:</p><p><a href="https://blog.csdn.net/ouyang_peng/article/details/77334215" target="_blank" rel="noopener">https://blog.csdn.net/ouyang_peng/article/details/77334215</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>脚踝韧带拉伤经历分享</title>
    <url>/%E8%84%9A%E8%B8%9D%E9%9F%A7%E5%B8%A6%E6%8B%89%E4%BC%A4%E7%BB%8F%E5%8E%86%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E4%BC%A4%E8%85%BF%E7%9F%B3%E8%86%8F%E8%AE%B0/%E9%80%9D%E8%80%85%E4%B8%8D%E6%AD%BB.jpeg" alt="逝者不死"></p><h2 id="想看经验的同学直接拉到最下面"><a href="#想看经验的同学直接拉到最下面" class="headerlink" title="想看经验的同学直接拉到最下面"></a>想看经验的同学直接拉到最下面</h2><h1 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h1><ul><li><p>上午足球踢远考试前训练摔得，我对面那兄弟踢得老远，我去捡球，一时间兴奋，<strong>跳起来踩住球,自己却没稳住脚踩在球上面落地摔，脚内侧接近80度内弯，外侧剧痛，手肘擦地出血，屁股处的骨头感觉要断了</strong>，(看着我摔的同学没一个人过来？？？良久，还是没有一个人过来？？？excuse me?)然后感觉自己还能动的时候走到了厕所 <strong>(感觉良好)，在厕所洗手..然后动一下腿都两眼全黑，差点晕倒在厕所!赶紧老实了不动了，让自己紧紧扶住墙靠着洗漱台，</strong>然后用小爱同学打电话给了室友zy，结果zy的手机在寝室</p></li><li><p>然后等了好久眼睛能模糊看点字的时候打电话给了yzh，结果yzh手机在别人包里面—- &gt; <strong>人间悲剧</strong></p></li><li><p>好不容易扶着墙跌跌撞撞走到了操作入口处，向一个同学qhz挥手，没有理我…向来上WC的电三同学求助，让他帮我叫一下yzh，他说先上厕所，让一个高高瘦瘦的人叫老师，他说老师在测成绩应该不会过来—-&gt; <strong>what’s your problem?你看不到我快要死掉的样子吗？</strong></p></li></ul><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p><strong>以上都是我没有体现出自己的受伤情况的严重性,所以他们都视若无睹</strong> —- &gt; <strong>以后我一定要多多关注别人的表情细节,因为很可能别人急需帮助</strong></p><ul><li><p>然后就是叫来了yzh，然后yzh把我背到了校医院，帮我挂号(<strong>校医院收款处竟然因为最近大四学长学姐毕业退款导致自己垫了钱啥的然后不能用支付宝了，只能现金</strong>)<br>然后也不先急救… mdzz(原来是不会死的情况下就不会先救你，而是按照交钱和挂号排队慢慢来，当然急诊的照片什么的都会提前，然后也会无需挂号)—-&gt;不过我去校医院等待治病，他还在和别人(一个以前的病人)互喷一些钱的东西—-&gt;让我对校医院产生了比较不好的印象…</p></li><li><p>后面yzh又帮我去买冰棍让我冷敷，然后买了牛奶和面包</p></li><li><p>然后又体育测试完又背我从校医院到了901，太感谢了，明显感觉他背我很累</p></li><li><p>中午资询了以前有脚踝扭伤经验的同学xjy，ta详细地和我说各种就诊操作-&gt;<strong>现在想想，必须感谢ta</strong></p></li><li><p>下午zy不上课陪我去看医生，然后还好他带了身份证，全程用他的身份来就医的<br>(<strong>在医院遇到的很多人的情况都比我严重,心疼他们</strong>)<br>然后zy陪着我打石膏，细心地带我去厕所帮我询问什么的</p></li><li><p>回来后感谢xjy和bh的看望，我叫xj帮忙带饭，xj的叫bb帮带饭，bb和kcn的慰问，然后中途碰到 zy学长 的细心慰问，感觉世上还是很多爱的</p></li><li><p><strong>自己装B不用轮椅回寝室，结果累死，然后叫zy来帮我，zy叫孙崇山来帮忙，然后孙把我背了上楼，感谢</strong></p></li><li><p>晚上大家教我如何单腿上床，如何单腿下床</p></li></ul><h2 id="尴尬"><a href="#尴尬" class="headerlink" title="尴尬:"></a>尴尬:</h2><ul><li>被yzh背着自己不好意思看前面，感觉自己好没尊严</li><li>下午坐着轮椅很尴尬</li><li>下午因为不好意思出去上厕所，憋了好久的尿的尴尬</li><li>晚上发现想上大厕，发现要单脚蹲大然后憋着的尴尬</li><li>晚上想洗澡却只能擦一擦的尴尬</li><li>晚上回去因为到时候没人给我抬轮椅而直接用拐杖回去的尴尬</li><li>晚上要没有贴止血贴，手肘满是血，然后脚上是石膏睡觉的尴尬</li><li><p><strong>明天要考电磁场电磁波了，自己6章只复习了前3章的部分的的尴尬,但是晚上复习的时候又老想着这几天怎么过的尴尬</strong></p><blockquote><p>认为没有什么比活着更重要，然后又想要记下此篇生活，所以就干脆不复习了</p></blockquote></li><li><p>2019年6月13日23:24:49 回去吧，大家都在准备明天的考试，所以不能最后一个走，不然可能又要麻烦别人了，所以自己回去吧</p></li><li>不想告诉家里人我腿受伤了的强忍，以及自己感到孤独和无助的尴尬(<strong>其实自己是很想很想要一个人来帮助我的,但是又不想打扰身边同学的生活,也不好意思让他们帮我但又想他们帮我的尴尬</strong>)(<strong>更不想让家里人知道了担心，虽然我觉得可以轻易接收家里人的爱，但我也爱他们，我不想让他们为我太担心，所以我还时是不能告诉他们</strong>)</li></ul><h2 id="感想-1"><a href="#感想-1" class="headerlink" title="感想:"></a>感想:</h2><h3 id="以后一定多多帮助身边的人"><a href="#以后一定多多帮助身边的人" class="headerlink" title="以后一定多多帮助身边的人"></a>以后一定多多帮助身边的人</h3><h3 id="以后一定多多观察身边的人是否需要真的帮助"><a href="#以后一定多多观察身边的人是否需要真的帮助" class="headerlink" title="以后一定多多观察身边的人是否需要真的帮助"></a>以后一定多多观察身边的人是否需要真的帮助</h3><h3 id="以后一定多多观察身边的人是否需要帮助但又不好意思，学会假装碰巧去帮助别人"><a href="#以后一定多多观察身边的人是否需要帮助但又不好意思，学会假装碰巧去帮助别人" class="headerlink" title="以后一定多多观察身边的人是否需要帮助但又不好意思，学会假装碰巧去帮助别人"></a>以后一定多多观察身边的人是否需要帮助但又不好意思，学会假装碰巧去帮助别人</h3><h1 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h1><ul><li>感谢zy早起去帮我去901门口拿轮椅回到寝室楼下接我</li><li>感谢zy把我推到考场</li><li>感谢xj给我带午饭(<strong>以后对任何身边的人都当亲人一样地给予帮助，因为不这样做的话，说不定你那天就腿瘸了，然后大家都不帮你是最恐怖的，而且你平常不对别人好的话，在你为难的时候你也不好意思向别人寻求帮助，比如你想要xj给你带饭，但你又想到前段时间你拒绝了帮xj装内存条！所以你会无比愧疚，所以将心比心原来不是这么容易学会的，而是要经历生活的磨炼才能学会的，感谢生活</strong>)</li><li>以后一定要多多关注别人的难处，帮助别人</li><li>今天第一次成功单脚蹲厕(右腿小麻)</li><li>然后zy晚上带我会寝室</li><li>今天擦澡，洗身体，洗头发，换衣服，结果一屁股坐下去，直接右膝盖关节直接抽筋，现在每次膝盖收缩性略弯都会痛，一个人在厕所里面坐立不安地换衣服，真的好难，没想到残障人士生活这么难，这么苦，我才发现四肢健全的生活是多么难能可贵</li><li>妈妈突然打电话过来了，吓死我了，我还以为导员告诉我妈我咋了呢，还好没告诉，当妈妈问我最近怎么样，让我注意个人卫生，等等的时候，我差点没忍住，差点哭出来…因为我没办法洗澡，只能搽澡😭，然后有那么一瞬间好想告诉妈妈我受伤了，我好想妈妈给我安慰，但是我不能，不能让妈妈担心，对不起，妈妈，我不能让你知道，之后也不能让你知道，否则你以后一定会总觉得我有事没有告诉你，对不起，妈妈，我爱你(<strong>忍住泪水</strong>)</li></ul><h1 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h1><ul><li><p>感谢zy推我去实验室</p></li><li><p>2019年6月15日08:15:01<br>发现自己过来实验没有带电脑，然后发现自己上次CV好久的数字钟的代码在电脑里面，算了，腿伤了不方便，所以直接再搞一次吧<br>(xj本来说要回寝室所以不帮我带饭，结果还是来了901，可能东西在这边吧，不怪她)</p></li><li><p><strong>感谢gpc主动帮我带饭</strong></p></li></ul><ul><li><p>2019年6月15日15:56:42 下午拉肚子了<br>然后回来时拐杖蹦蹦蹦声音太响，门口那几个都看着我，尤其是jmq学长(那个有188的博士生学长)<br>然后我和他对视了一会，轻声念叨:绝了<br><strong>下次记得微笑回视！</strong></p></li><li><p>不要总想着尝试走，一周后再尝试走，遵从医嘱！</p></li><li><p>因为我差劲的社交，导致我现在要别人带个饭都这么困难(<strong>因为大家今天考完英语6级了，都直接出去浪了，所以也不好要别人给带饭…</strong>)，有些时候，真的很无奈，很伤心，很无助…只能少吃几顿……….但其实病了不能少吃…哎，算了，忍受3周吧 [ <strong>现在才过了22 天,都有点感受不太到当时的感觉，不行，保持原汁原味的记录</strong> ]</p></li><li><p><strong>不要这么没有出息，谁都会有无助的时候，在自己被自己之前的愚蠢导致一手烂牌的时候只能努力恢复，然后吸取教训，以后避免风险</strong> —&gt; <strong>不准哭,杀不死只会让你更加坚强</strong></p></li><li><p><strong>受伤之后还敢爱</strong>————&gt;做自己的真正的英雄<br>(不要把精力浪费在这里了!花了30mins发呆了,这样毫无意义)</p></li><li><p>(<strong>如果你不保持经历苦难,新的苦难出现的可能性就越来越大</strong>)<br>所以等痊愈之后坚持健身锻炼，坚持看书，坚持写项目，坚持社交和口才锻炼</p></li><li><p><strong>2019年6月15日18:25:33庆幸自己没有死掉，我一定要好好活着，等到痊愈之后更加要好好活着，上帝一定会让勤奋的人站在他面前！</strong></p></li><li><p><strong>what is dead may never die,but rises again harder and stronger.</strong><br><strong>逝者不死，必将再起，其势更烈</strong></p></li></ul><h1 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h1><p>一天呆在寝室，中午晚上wdc都给我送饭，然后就是晚上wdc还帮我锁大锁，真好，这是我腿受伤以来最开心的一天</p><h1 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h1><ul><li><p>今天又是待在寝室的一天，然后10点吃了zy给我带的早餐…为啥他不带中餐呢<br>他也很尴尬</p></li><li><p>下午饿了吃了多包辣条</p></li><li><p>然后晚上让zy给我带了一个酸菜肉堡</p></li></ul><ul><li><p>想到明天周二<br>突然陷入了极度痛苦不愿 面对 “明天下雨，中午饭不怎么好让别人带，上三楼上课的尴尬境地之中”—-&gt; 算了，办法一定比苦难多，只有不可预测的一些因素才让生命更加丰富多彩</p></li><li><p>下午吃的辣条在空调的袭击下导致肚子很痛了，然后就等晚点人少再去拉屎，先洗头吧</p></li><li><p>然后又折腾了许久，不过比上次好多了，加油，别人四肢全断都在认真生活</p></li></ul><h1 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h1><ul><li><p>由于室友大家没有早起，导致没有吃早餐，2019年6月18日10:44:45 饿了，难受</p></li><li><p>2019年6月18日12:42:41 今天中午xj帮我带饭，然后自己也直接带饭到了9楼，她出去吃的，很抱歉…… 所以以后除了周二和周四,都直接待在寝室…<strong>因为跑腿腿可以直接送到寝室门口</strong> [<strong>之后因为羞愧再也没有要xj带过饭了…</strong>—-&gt; <strong>以后如果真心帮助别人也要尽量不动声色得帮助，别让别人难堪，导致别人下次再也不敢找你帮助了</strong> ]</p></li></ul><h3 id="多了一种视角，你是否会麻烦别人却没有给与相应的价值-比如让xj带饭，麻烦了别人-，所以还是尽量使用服务业提供的服务"><a href="#多了一种视角，你是否会麻烦别人却没有给与相应的价值-比如让xj带饭，麻烦了别人-，所以还是尽量使用服务业提供的服务" class="headerlink" title="多了一种视角，你是否会麻烦别人却没有给与相应的价值(比如让xj带饭，麻烦了别人)，所以还是尽量使用服务业提供的服务"></a>多了一种视角，你是否会麻烦别人却没有给与相应的价值(比如让xj带饭，麻烦了别人)，所以还是尽量使用服务业提供的服务</h3><ul><li>我的包—&gt;5本大书-&gt;knotex电脑</li><li><p>感谢下午lky给我带饭，帮我带包上3楼</p></li><li><p>感谢超哥吃完饭理完发推我从C座到寝室并且帮我带包上6楼<br>感谢啊感谢</p></li></ul><h1 id="第七天"><a href="#第七天" class="headerlink" title="第七天"></a>第七天</h1><ul><li>睡了10小时，emmmm<br>第一次把腿垫高睡，有点不适应，然后梦到自己腿好了，石膏都被自己撑坏了，梦醒之后，石膏依旧</li><li>就不该看《胡广生》的MV，导致自己哭的稀里糊涂，不成样子</li><li>刚刚想在寝室上个厕所，结果蹦蹦蹦，右脚踩入茅坑，不过还好只是轻微砸了一下关节骨，没有其他伤害，左脚还好有石膏，所以只是震了一下，还好</li><li>试了一下，左脚能够比较好的动了，只是不能承重，所以还得一段时间静养—-&gt;结果今天折腾过了头，反而造成了一定损伤。mdzz</li><li>又看了40mins脚踝如何恢复，佛了，然后认真做实验(EDA实验)</li><li><p>真是疯狂折腾受伤的韧带！小心后遗症！所以每次去厕所都小心点!好吧 —-&gt; 1、 伤情被自己整到恶化 2. 然后大家这段时间都很忙很累，心情很烦，所以还是最好自力更生吧，天将降大任于斯人也！</p></li><li><p>晚上我没有问清楚就让zy和wdc带饭，结果可能他们因为忙都来不及去吃饭，所以还锁他妈的大锁，所以他们就没有回来，没有给我带饭，理解别人的难处，别人都已经仁至义尽了，谢谢，真的谢谢</p></li><li><p>2019年6月19日20:27:25 留寝被查，真好，生活再难，也能活过去，脚伤期间，各种事情的重要性会变的，让我变成最差的学生吧，I don’t care！</p></li></ul><h2 id="太浪了，花了太多精力去抱怨生活不公！"><a href="#太浪了，花了太多精力去抱怨生活不公！" class="headerlink" title="太浪了，花了太多精力去抱怨生活不公！"></a>太浪了，花了太多精力去抱怨生活不公！</h2><h1 id="第八天"><a href="#第八天" class="headerlink" title="第八天"></a>第八天</h1><ul><li>昨天瞎折腾，导致伤愈情况表得糟糕了，艹，犯错难免，以后警惕</li><li>习主席说的对，只有经历了大风大浪还不倒的才是大海，才能看淡其他风雨，才不会想一个小池塘，遇到大风浪是会倒下，所以接受脚伤现状，努力改善，积极变得更好，我治愈之后会更加强大(就像高考前的一段慢性肠炎，然后运动了好长一段时间，这次，我将运动到我不在的那一天，文明精神，野蛮体魄)</li><li>放下手机，认真生活</li><li>暴雨，然后VHDL课后孙先没走，先问我要不要帮忙，我说等雨小，你们先去吃饭，别管我</li><li>然后下雨被困11教，发现11教很多教室不开，沃日，于是先在一个人少的楼梯那里等雨停，看书，之后小雨再回去 后面楼道开始有蚊子…日</li><li>感谢一个阿姨提建议让我 和学校反应让我去申请住一楼 [ 当然我没有去申请 ]</li></ul><h2 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h2><ul><li>今天成长还是很大的，首先是在zy帮忙打伞的作用下，在中雨中从寝室走到英语课教室</li><li>然后晚上在11教等雨停了，自己又拄着拐杖慢吞吞地走回了寝室，其实自己还是很叼的哦</li></ul><h1 id="第九天"><a href="#第九天" class="headerlink" title="第九天"></a>第九天</h1><ul><li>拄拐去打水泡咖啡，自己爱护自己的身体，然后才能为全人类贡献80年！(100岁退休，工作过程也可以享受生活) —-&gt; change the world , make some difference!</li><li>2019年6月21日12:50:59，我问zy还回来吗，然后zy说他在星达，以后自己不要把鸡蛋放在同一个篮子，风险太大，早上他答应我给我带饭，于是就一直等他，结果我笑了，算了吧，<strong>别人帮你，你得感谢，别人不帮你，那是理所应当…</strong></li></ul><h3 id="从来不想给别人造成麻烦，可是现在自己腿伤了只能给别人造成麻烦，难受"><a href="#从来不想给别人造成麻烦，可是现在自己腿伤了只能给别人造成麻烦，难受" class="headerlink" title="从来不想给别人造成麻烦，可是现在自己腿伤了只能给别人造成麻烦，难受"></a>从来不想给别人造成麻烦，可是现在自己腿伤了只能给别人造成麻烦，难受</h3><ul><li>喝完那碗胡辣汤[<strong>是跑腿腿送餐到寝买的,我的整个思想是 朋友不会永远帮你，但是有钱可以一直买到服务 , 当时的思想也很有趣</strong>]，我整个的思维全被 跨越阶层 所占据，我一定要成为一个高阶层人士，实现财务自动增长，看遍世界各地的各种世间百态，成为一个独立，自律，无往不利的我(不要幼稚，活成一个普通人在很多方面都会受到巨大的限制，你永远无法获取更多更好的资源，你永远要忍受别人的压迫，每一天接受残忍社会的教育，在你现在还有机会的时候，努力跨越出你的阶层，成为自己的英雄，然后再去改变你想要改变的世界)</li><li>发现自己前天的折腾导致脚踝肿起来了，今天才发现，我服了，下次再也不折腾了！慢慢养吧，一个暑假，不急，到时候人就少了，而且没有关系，慢慢养</li><li>然后查资料发现是脚下垂太久，血液不流通导致的，而且绑带有点紧，所以晚上抬高会勒住，所以也会有影响，把腿架起来就好多了</li><li>15点开始又认真学习如何治疗韧带拉伤</li><li>学了1小时如何恢复，zy回来了，让他教我AD，然后zy20mins解决了我可能几天都解决不了的问题，真好</li><li>发现抬腿坐着屁股剧痛，然后不抬腿脚又浮肿，自闭了，所以今天先早点躺着吧</li></ul><h1 id="第十天"><a href="#第十天" class="headerlink" title="第十天"></a>第十天</h1><ul><li>感谢炒饭阿姨把饭端到桌子上去给我吃[当时10点我去错峰吃饭]</li><li>感谢一个微胖小姐姐看到我出一食堂马上快步过来给我拉帘子</li><li>WC是我避开密集人流的避难所，所以感谢学校的厕所多[终于理解为什么厕所是社会的包容发泄所避免所了]</li><li>回9楼的时候遇到了hsj老师，他好像才知道我伤了</li><li>想着不要去看复查干什么，但是身体却很诚实地去干了…看了一个小时，基本上都是看过的，算了，不看了，认真学习，晚上吃鸡后睡觉，明天养足精神去复查</li><li>今天拄拐正常生后一整天，然后上帝都奖励我的乐观和勤劳，让我到楼下想掏出手机时正好快递电话来了，这快递比预计时间早20mins，真好，大吉大利，今晚吃鸡，庆祝脚伤但坚挺到了第10天</li><li>吃了一个小时的晚饭，然后直接上床休息，看视频，看书，争取明天复查有个好状态</li><li>晚上偷偷拆开一点点脚内测石膏，发现一片紫色，绝了，才发现，再撑拐杖10天吧，然后发现屁股那块骨头也没太好，还是痛—不过那应该只是轻微摔伤骨头，应该没有大碍，主要是脚</li></ul><h3 id="讲真的-自己当时每次复查前都极度渴望复查时能卸掉石膏-是石膏生活的不便以及麻烦别人的尴尬让我有了这种超强的欲望"><a href="#讲真的-自己当时每次复查前都极度渴望复查时能卸掉石膏-是石膏生活的不便以及麻烦别人的尴尬让我有了这种超强的欲望" class="headerlink" title="讲真的,自己当时每次复查前都极度渴望复查时能卸掉石膏,是石膏生活的不便以及麻烦别人的尴尬让我有了这种超强的欲望"></a>讲真的,自己当时每次复查前都极度渴望复查时能卸掉石膏,是石膏生活的不便以及麻烦别人的尴尬让我有了这种超强的欲望</h3><h1 id="第十一天"><a href="#第十一天" class="headerlink" title="第十一天"></a>第十一天</h1><ul><li>凌晨涂了本草精华液，结果没想到药效如此猛烈，直接吸血一般，导致我左边大腿的血管都有明显地感觉到左脚关节处在抢血！！！左脚关节更是风起云涌！</li><li>5点50梦醒，6点50起床</li><li>感谢司机看我不方便开到校门接我后倒车，7点35在车上</li><li>第一个就诊，结果去打石膏搞了好久好久，真TM慢</li><li>脚部抬高好像真有用，因为脚有时候好烦一阵一阵的翻涌</li><li>那个医生说让我加固石膏，下周继续复查。然后那个帮我拆石膏的人说让我走一下，我愣了半天，他说，你怕啥，我才走，发现竟然可以走，就是有点小痛，我惊了，然后那打石膏的医生让我多躺着</li><li>先学习吧，晚上再想吃饭的事[<strong>基本上每到饭点必定发愁</strong>]</li><li>发现脚抬高过久也不行，因为脚后跟会有痛感</li><li>感谢zy带的酸辣粉，不过一吃肚子就有反应了，我去WC</li></ul><h1 id="第十二天-含巨量的腿伤的日志及感想"><a href="#第十二天-含巨量的腿伤的日志及感想" class="headerlink" title="第十二天(含巨量的腿伤的日志及感想)"></a>第十二天(含巨量的腿伤的日志及感想)</h1><h2 id="摔伤日志"><a href="#摔伤日志" class="headerlink" title="摔伤日志"></a>摔伤日志</h2><p><strong>我会告诉你我跑到双子楼11去请假再去综合楼盖章，再去食堂买饭，再爬6楼回寝室吗？我会告诉你途中我去二食堂上个电梯摔了一下伤腿吗？我买14块的饭菜不好在那吃而错过好喝的酸梅汤吗？ 不，我不会！<br>我只会在人多的时候走快点，在没人的时候先停下来休息一会继续上路，我只会在没站稳后立马调整，只会在摔倒后立马起来，之后在悲伤的时候劝说自己积极乐观，勤奋坚强，只会每天偷偷扯开一点点绷带偷偷看自己的恢复情况，只会每天梦到自己腿好了，又变回了那个走路像一阵风的骚年，只会……</strong></p><ul><li>虽然有时候也会在心里诉苦，</li><li>啊，我的酸梅汤没喝，亏了！</li><li>啊，为啥用剪刀剪掉绷带的所谓石膏拆除费要27块？下次我带把剪刀过去自己拆好不好啊？</li><li>啊，别人不帮你是理所应当，别人帮你你得感激涕零，是啊，世态炎凉啊，还好还有那么几个好朋友愿意在他们方便的情况下帮帮我，感谢了…</li></ul><h2 id="懂得"><a href="#懂得" class="headerlink" title="懂得:"></a>懂得:</h2><ol><li>别人不帮你是理所应当，别人帮你你得感激涕零</li><li>努力赚钱，因为别人不能帮你的，你可以通过用钱去买到送饭到寝的服务</li><li>那些不愿在你痛苦时给你施以援手的朋友都是所谓的朋友而已，不要太较真</li><li>以前发现妈妈只会通过分数对你严管或者松管，总结出的”价值决定一切”其实用在这个现实的社会更加合适不过，所以，我要努力创造价值，make a difference，让绝大多数人都希望我健康地活着，不管是真诚的还是价值捆绑的</li><li>珍惜那些真正的朋友，努力报答他们，耐心帮助那些真正需要帮助的人</li><li>不要把太多时间浪费在抱怨上面，真的没用</li><li>表现得越强大，获取的帮助就越少，但之后你会成为真的强大！</li></ol><h2 id="？？？"><a href="#？？？" class="headerlink" title="？？？"></a>？？？</h2><ol><li>说来有点奇怪，第一次叠完衣服，不放柜子，放床上，竟然是为了:垫高脚 :-)</li></ol><h1 id="第十三天"><a href="#第十三天" class="headerlink" title="第十三天"></a>第十三天</h1><ul><li>感谢中午余镇榜给我带饭到实验室 [当时在做模电课设]</li></ul><h1 id="第十四天"><a href="#第十四天" class="headerlink" title="第十四天"></a>第十四天</h1><ul><li>下午吃饭到1点半，然后看别人伤病恢复记录，发现别人恢复了好久好久，莫名害怕，还说软骨损伤不可再生，哭了，还好及时制动，2点33开始认真写完硬件作业，然后上床复习模电吧</li></ul><h1 id="第十五天"><a href="#第十五天" class="headerlink" title="第十五天"></a>第十五天</h1><p>[2019.6.27]</p><ol><li>伤腿告诉我，我没必要花时间做不必要的社交，比如寝室去K歌，很蠢，因为大家都很个人化，所以你也无需牺牲自己去迎合大家，你就是你</li><li>老师让我过来，结果大家踢比赛，老师做裁判，我在这看着，老师还没理我，emmmm，算了，先坐着看书吧 [ 后面老师看在我平时成绩还不错的份上，但是又不能让我分数高过其他人，所以折中给我了80，感谢 ]</li><li>背电脑回寝室…</li></ol><h1 id="第十八天"><a href="#第十八天" class="headerlink" title="第十八天"></a>第十八天</h1><ul><li>7点21拼命走快点，4号楼6楼到3教302拼死用了21mins，你真棒！ [去考大物实验笔试]</li><li>再撑3天3夜就可以洗澡了，身上好多地方可以戳出生推瞪眼丸 [尽管有搽澡]</li><li>在厕所躲避人流20mins回寝室，不想去食堂了，很累，回去吃面吧</li><li>然后花了1小时回寝室(走得路长了，右脚关节痛…)休息，浪，吃面(大脑都缺氧了，才吃早午餐，下不为例)</li><li>感谢晚上zxb帮我带板子送归实验楼，并且帮我带饭 [后面才知道他先去吃饭，然后带饭回6楼给我，然后再去实验楼]</li></ul><h1 id="第二十天"><a href="#第二十天" class="headerlink" title="第二十天"></a>第二十天</h1><ul><li>考完模电提前40mins交卷，实在写不出了，和翟老师说明情况，她让我再看会，我说有点地方没复习，实在写不出了，就走了 [ 其实当时还有一个很重要的原因是自己需要去错峰吃饭…]</li></ul><h1 id="第二十一天-第二次复查之日-也是医生说的3周之日"><a href="#第二十一天-第二次复查之日-也是医生说的3周之日" class="headerlink" title="第二十一天(第二次复查之日,也是医生说的3周之日)"></a>第二十一天(第二次复查之日,也是医生说的3周之日)</h1><ol><li>凌晨3点，3:00噩梦醒，噩梦是医生说不做拆线检查，应该是多余的担心，继续睡 [ 没想到当天真的没让我做核磁共振检查 ]</li><li>艹，4点28又以为7点了</li><li>5点14天亮了，6点，6点半 都醒了 日 还没7点</li><li>绝了，看来积攒了21天的期望值，情绪有点激动啊</li><li><p>5:59逼我设置6点半闹钟</p></li><li><p>7点25在校门口遇到vhdl老师，叫他没听见，就一直看着他没叫第二次，他戴着墨镜..</p></li><li><p>等了接近20mins，然后自闭了，然后一个识货的知道学生腿伤都是踢球导致的私家车司机过来说10元，比出租车多2元，等到自闭的我管不了这么多了就做了，和他交流，他说这个点大家都上班，本来就很难打车</p></li></ol><ul><li><p>唯一不爽是他抽烟了…</p></li><li><p>然后这人看我好像不识货8元给他10元(要不是打不到车，我会多给你2元？)..想让我在对面下，我拒绝了，还好我没有继续傻</p></li></ul><ol><li><p>8点16苟到了等候就诊区</p></li><li><p>那老医生一脸不屑，让他的小助理给我开单……就问我骨折没，多少天，然后肿不肿，片也只看了一小会，我说我左边也痛，要不要核磁共振，他看着我不说话，我去，20块，就这样没了… 然后我回家自己拆掉，牛逼！<br>温水泡脚，再拄拐两三个星期</p></li><li>完成了小时候长期不洗澡的梦想，也完成了这21天的梦想，我要洗澡，回来的路上，每走一步就在心里默念一下我要洗澡我要洗澡(受够了搽澡)</li></ol><h2 id="今天洗了可能有生之年最快乐，最充满期待的一次澡"><a href="#今天洗了可能有生之年最快乐，最充满期待的一次澡" class="headerlink" title="今天洗了可能有生之年最快乐，最充满期待的一次澡"></a>今天洗了可能有生之年最快乐，最充满期待的一次澡</h2><h2 id="今天解锁-先左脚下一节台阶楼-伤腿-，后右脚跟上"><a href="#今天解锁-先左脚下一节台阶楼-伤腿-，后右脚跟上" class="headerlink" title="今天解锁:先左脚下一节台阶楼(伤腿)，后右脚跟上"></a>今天解锁:先左脚下一节台阶楼(伤腿)，后右脚跟上</h2><p>[上楼其实比下楼简单，因为不要比较大的关节弯曲，终于理解为什么这么都伤腿分享的小伙伴都说下楼痛了]</p><h1 id="第二十二天-拆石膏第二天"><a href="#第二十二天-拆石膏第二天" class="headerlink" title="第二十二天(拆石膏第二天)"></a>第二十二天(拆石膏第二天)</h1><h2 id="解锁踱步下楼-左下一，右不用跟左脚，可以下下一节台阶，但是有点痛"><a href="#解锁踱步下楼-左下一，右不用跟左脚，可以下下一节台阶，但是有点痛" class="headerlink" title="解锁踱步下楼(左下一，右不用跟左脚，可以下下一节台阶，但是有点痛)"></a>解锁踱步下楼(左下一，右不用跟左脚，可以下下一节台阶，但是有点痛)</h2><h1 id="之后"><a href="#之后" class="headerlink" title="之后"></a>之后</h1><p>2019年7月6日11:10:34今天是拆石膏第4天，也就是第24天</p><ul><li><strong>就是每天做康复训练，网上找的</strong></li><li>热水泡脚</li><li>搽活血的药物</li></ul><h1 id="总结以及学到的"><a href="#总结以及学到的" class="headerlink" title="总结以及学到的"></a>总结以及学到的</h1><ul><li>伤腿的日子里面自己也看各大平台的经验贴，基本上每天都看，有些贴子都看了好多遍了，分享一个写得比较搞笑的贴子截图—-以及对单腿蹲厕的网友体验<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E4%BC%A4%E8%85%BF%E7%9F%B3%E8%86%8F%E8%AE%B0/%E8%BF%99%E4%BA%BA%E8%AE%B2%E8%AF%9D%E5%A5%BD%E9%80%97%EF%BC%8C%E6%88%91%E9%83%BD%E7%AC%91%E4%BA%86.png" alt="这个好逗"></li></ul><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E4%BC%A4%E8%85%BF%E7%9F%B3%E8%86%8F%E8%AE%B0/%E5%8D%95%E8%85%BF%E8%B9%B2%E5%8E%95.png" alt="单腿蹲厕"></p><ul><li>以后设计产品一定要尽可能多的考虑一下是否有少量人士使用我的产品会产生不便</li><li>学会了换位思考</li><li>更珍惜健康和时间(生命)</li><li>更加珍惜那些在困难中帮助我的朋友们(yzh,zy,wdc,yzb,zxb等)</li></ul><h1 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h1><ul><li>尽量多休息，把脚抬高</li><li>不要轻易尝试走动</li><li>过程大概是:红肿-&gt; 消肿(打着石膏容易产生已经好了的心理,此时千万别做出过激的尝试) -&gt; 微肿,脚面发紫(就是很多毛细血管损伤的那种) -&gt; 肿越来越少，然后发紫也变少 -&gt; 小腿肌肉恢复 -&gt; 能够单腿平衡很久</li><li>康复训练多锻炼小腿，这样才能早日走路</li></ul><h1 id="祝愿"><a href="#祝愿" class="headerlink" title="祝愿"></a>祝愿</h1><p>伤病的时间确实有点难熬，不妨利用此段时间多多看书，提升自己，加油，祝愿你们能够早日恢复到日常走路带风的样子!</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第十周(10-521)</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC%E5%8D%81%E5%91%A8-10-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST10/1.jpg" alt="最近一直模电课设，所以想放一张这个含面包板的图"></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/2019.6/2019.6.30/Leetcode14_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%97%E4%B8%B2.cpp" target="_blank" rel="noopener">最近考试加腿伤,刷题太少,惭愧</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/@trexhotdog/decrypting-blockchain-aa9572d70542" target="_blank" rel="noopener">Decrypting Blockchain</a><br>最近facebook发行了Libra币的白皮书，这是一件世界级的大事，因为它可能影响全世界的货币格局，也可能是美国想用新的技术手段来巩固他们的美元地位，而且可能造成货币垄断，所以这周给大家分享区块链的科普，更深入的可以自行搜索Libra然后多多关注</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.theverge.com/2019/6/26/18716326/facebook-libra-cryptocurrency-blockchain-irs-starbucks" target="_blank" rel="noopener">LIBRA, EXPLAINED</a></p><p>最近一直在极客时间学linux，所以Tips本应该是极客时间的文章，但是想到你们看不了，所以放了对Libra币的讨论文章</p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>最近一直在极客时间和得到学习，而且也在忙考试，和腿伤休息，所以这周的分享比IT技术分享高一个维度，是人生管理分享<br><a href="https://www.wolfdan.cn/%E6%80%8E%E4%B9%88%E6%88%90%E4%B8%BA%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E7%9A%84%E9%AB%98%E6%89%8B-%E5%90%AC%E4%B9%A6%E6%9C%89%E6%84%9F/">如何快乐生活,忙而不碌</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么成为时间管理的高手-听书有感</title>
    <url>/%E6%80%8E%E4%B9%88%E6%88%90%E4%B8%BA%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E7%9A%84%E9%AB%98%E6%89%8B-%E5%90%AC%E4%B9%A6%E6%9C%89%E6%84%9F/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="第一讲-规划与备忘"><a href="#第一讲-规划与备忘" class="headerlink" title="第一讲 规划与备忘"></a>第一讲 规划与备忘</h1><h2 id="1-项目管理表"><a href="#1-项目管理表" class="headerlink" title="1. 项目管理表"></a>1. 项目管理表</h2><blockquote><p>做计划，细分计划，不重不漏，然后头脑中要有想象，设置截止日期！(不要不设置截止日期)</p><p>deadline可以用来反馈，若此次没做完，下次做相同任务量任务可以更好设置截止日期————<strong>主要目的是让自己对时间有个概念</strong></p><p>设置进度提示:<br>进展不顺的子项目要标红 ， 正常进行的标绿</p></blockquote><h2 id="2-所以要有日历表-日程表"><a href="#2-所以要有日历表-日程表" class="headerlink" title="2. 所以要有日历表,日程表"></a>2. 所以要有日历表,日程表</h2><h3 id="日历表"><a href="#日历表" class="headerlink" title="日历表"></a>日历表</h3><ul><li>先做重要的事情，先放石头，再放沙子—-&gt;长期投资的事情，巨大红利(技术长期积淀)</li><li>好的日历计划不是填满每个小时，而是留有20%缓冲，截止日期也是20%缓冲</li></ul><h3 id="日程表"><a href="#日程表" class="headerlink" title="日程表"></a>日程表</h3><ul><li>每天事项划掉是感觉很爽的</li></ul><h1 id="第二讲-行动-把时间变成产出"><a href="#第二讲-行动-把时间变成产出" class="headerlink" title="第二讲 行动:把时间变成产出"></a>第二讲 行动:把时间变成产出</h1><h2 id="1-把事项改成动作"><a href="#1-把事项改成动作" class="headerlink" title="1. 把事项改成动作"></a>1. 把事项改成动作</h2><p><strong>把事项改成动作,而非一个大任务,若是大任务,就分解成小动作,让每个当下只有一个动作</strong></p><h2 id="2-干扰多，事情杂怎么办"><a href="#2-干扰多，事情杂怎么办" class="headerlink" title="2. 干扰多，事情杂怎么办?"></a>2. 干扰多，事情杂怎么办?</h2><blockquote><p>悬而未决会让你受羁绊—-<strong>所以4板斧解决</strong></p></blockquote><h3 id="1-转"><a href="#1-转" class="headerlink" title="1.转"></a>1.转</h3><p>让别人帮忙做，若这件事情有人比你做的更好，而且不是必须需要你在场，那么就可以让别人帮忙做，让这个任务更好地被完成</p><h3 id="2-做"><a href="#2-做" class="headerlink" title="2.做"></a>2.做</h3><ul><li>虽然说要事优先，但如果一个动作只要2-3mins，那就马上做掉，防止占据大脑内存</li></ul><p>比如: 一个实验之后，马上和别人探讨写完报告总结。因为这时候印象最深，效率最高，就算当时很累，也很值得</p><h3 id="3-存"><a href="#3-存" class="headerlink" title="3.存"></a>3.存</h3><p>存起来(马上放日程表)，以后做—<strong>注意不要放在大脑里面,否则会影响自己全情投入</strong></p><h3 id="4-扔"><a href="#4-扔" class="headerlink" title="4.扔"></a>4.扔</h3><p>不重要的，可以直接扔掉</p><h3 id="总结：-不要让自己的大脑被占据"><a href="#总结：-不要让自己的大脑被占据" class="headerlink" title="总结： 不要让自己的大脑被占据"></a><strong>总结： 不要让自己的大脑被占据</strong></h3><h2 id="担心自己做不好而拖延怎么办"><a href="#担心自己做不好而拖延怎么办" class="headerlink" title="担心自己做不好而拖延怎么办?"></a>担心自己做不好而拖延怎么办?</h2><ol><li>面对大人物做报告，也把对方当做自己的学生，因为你是专家</li><li>反正要做，不如找个积极的心理暗示</li><li>和别人交流，听取别人的建议</li></ol><hr><p>2019年6月29日 学完上面并做笔记</p><p>2019年6月30日15:38:22 开始下面的学习</p><hr><h1 id="第三讲-敏捷工作法-让计划赶上变化"><a href="#第三讲-敏捷工作法-让计划赶上变化" class="headerlink" title="第三讲 敏捷工作法:让计划赶上变化"></a>第三讲 敏捷工作法:让计划赶上变化</h1><h2 id="不要把时间浪费在努力工作中"><a href="#不要把时间浪费在努力工作中" class="headerlink" title="不要把时间浪费在努力工作中"></a>不要把时间浪费在努力工作中</h2><h3 id="完美主义的时间浪费"><a href="#完美主义的时间浪费" class="headerlink" title="完美主义的时间浪费"></a>完美主义的时间浪费</h3><p>完美有代价，把一件80分的事做到了100分，导致其他很多应该做到60分的事情没有做</p><h3 id="范围蔓延"><a href="#范围蔓延" class="headerlink" title="范围蔓延"></a>范围蔓延</h3><p>别人要求帮不是你要做的事情的时候,不断让步,结果自己帮别人做了好多事情</p><h3 id="返工"><a href="#返工" class="headerlink" title="返工"></a>返工</h3><p>没有沟通好，需求没有谈好</p><h2 id="敏捷工作法"><a href="#敏捷工作法" class="headerlink" title="敏捷工作法"></a>敏捷工作法</h2><h3 id="最小可交付-持续迭代"><a href="#最小可交付-持续迭代" class="headerlink" title="最小可交付,持续迭代"></a>最小可交付,持续迭代</h3><p>把自己的每个输入，处理，要想做自己的输出，自己要干什么</p><p>最小可交付，就是做一个小demo，然后大家提出反馈，让你可以调整，这样就不用大的返工</p><p>别人给你任务，你给别人的deadline为第一次交付的时间</p><p>交互一个小交付后，你就可以做下一个任务了</p><h4 id="如果多个项目"><a href="#如果多个项目" class="headerlink" title="如果多个项目"></a>如果多个项目</h4><p>重要的事情多迭代，紧急的事情先迭代</p><p>敏捷工作法， 不要进行多个任务，让手里只有一个项目</p><h1 id="第四讲-管理合作者的时间"><a href="#第四讲-管理合作者的时间" class="headerlink" title="第四讲 管理合作者的时间"></a>第四讲 管理合作者的时间</h1><h2 id="透明的沟通习惯"><a href="#透明的沟通习惯" class="headerlink" title="透明的沟通习惯"></a>透明的沟通习惯</h2><ul><li>做决策的时候就拉大家过来一起决策</li><li>同步站会，让大家站着开会同步进度</li><li>让自己的任务进度能被看见</li><li>尽量当面沟通！能见面就别打电话…能打电话就别发邮件…</li></ul><h2 id="敢于和上级沟通时间"><a href="#敢于和上级沟通时间" class="headerlink" title="敢于和上级沟通时间"></a>敢于和上级沟通时间</h2><ul><li>管理者只会记得上面的任务,不记得给下属的任务</li><li>主动给上级反馈你的进度，让其对你的任务进行重要度排序，这个也很受上级欢迎</li></ul><h2 id="团队领导如何管理上级"><a href="#团队领导如何管理上级" class="headerlink" title="团队领导如何管理上级"></a>团队领导如何管理上级</h2><ul><li>不要把下属的事情自己做,不要所有事都亲力亲为</li><li>下属不是因为成长而能做事情，而是因为做事情而能力成长</li><li>下属让你帮忙做，你要思考最终责任人是你还是他</li><li>担心下属能力，就从小的任务开始训练他，比如给讲PPT，一次给他3mins等等，然后慢慢渐渐增加</li></ul><h1 id="第五讲-如何与忙碌相处"><a href="#第五讲-如何与忙碌相处" class="headerlink" title="第五讲 如何与忙碌相处"></a>第五讲 如何与忙碌相处</h1><ul><li>忙碌的人完成事情更快，而且不容易错过deadline，闲的人反之</li></ul><h2 id="我们要避免内卷化忙碌"><a href="#我们要避免内卷化忙碌" class="headerlink" title="我们要避免内卷化忙碌"></a>我们要避免内卷化忙碌</h2><p>就是被自己忙死，但是恶性循环，没有时间提升自己</p><h2 id="改善-要做到自驱模式的忙碌"><a href="#改善-要做到自驱模式的忙碌" class="headerlink" title="改善:要做到自驱模式的忙碌"></a>改善:要做到自驱模式的忙碌</h2><h3 id="确定计划"><a href="#确定计划" class="headerlink" title="确定计划"></a>确定计划</h3><p><strong>确定自己的人生计划</strong></p><p>这种计划一般是除了本来要做的事情外</p><ol><li>开创新领域</li><li>自己想做的</li></ol><p>这种事情会让自己很快乐的，会产生积极的情绪，然后良性循环<br>也会让自己做本职工作的时候效率更高<br><strong>想象自己定的目标是给未来的简历</strong></p><h3 id="给学习留出足够的投入"><a href="#给学习留出足够的投入" class="headerlink" title="给学习留出足够的投入"></a>给学习留出足够的投入</h3><p>在学习上，投入自己心痛的钱(可以自我提升的比肩自己每天工作赚取的钱)<br>这样自己就会非常地重视，并且努力学习，并且会积极主动地学以致用</p><p><strong>最后发现人生最大的成本其实是时间</strong></p><h3 id="跑出自己的良性循环"><a href="#跑出自己的良性循环" class="headerlink" title="跑出自己的良性循环"></a>跑出自己的良性循环</h3><p>让自己的技能提升，然后马上使用自己提升的技能</p><h1 id="对于制定人生计划"><a href="#对于制定人生计划" class="headerlink" title="对于制定人生计划:"></a>对于制定人生计划:</h1><p><strong>自己10年想要什么是想不明白的或者说很难想明白，要做的是不断迭代自己，在自己本职工作上面，尝试自己的兴趣点的一个小任务的迭代，每次如果都有好的结果，那么就多迭代一次，多多探索，直到自己发现自己学习到了有能力胜任新的职位的时候就可以对自己的人生进行一次大的迭代，就是找到本职工作和新技能工作的能力交叉的工作，然后就这样持续地迭代自己的人生</strong></p><p>注: 当然如果你一开始就有一个人生目标，然后你的每一次小的迭代都是往这方面进行的小迭代，小进步，这样就更好了，有目标地探索，能让你走得更有方向感，离成功更加容易到达，因为一直在向着目标走啊！</p><h1 id="总结-管理时间就是管理人生"><a href="#总结-管理时间就是管理人生" class="headerlink" title="总结 管理时间就是管理人生"></a>总结 管理时间就是管理人生</h1><p><strong>时间就是生命，管理好时间就是管理好人生</strong><br>让时间服务于你，而不是你服务于时间，这样你就能过上自驱的快乐忙而不碌的生活，然后就能有充沛的精力去陪伴家人，去享受生活</p><center>最后祝愿大家能幸福健康，职场节节高升!过出自己想要的人生!</center><p align="right">单林敏(wolfdan)</p><p align="right">2019年6月 于合肥</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第九周(9-521)</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC%E4%B9%9D%E5%91%A8-9-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST9/github_boy.jpg" alt="创造美好世界"></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.6/2019.6.22" target="_blank" rel="noopener">最近踢球脚扭了，不能走路，要休息，所以刷题较少</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/technofile/the-internet-is-changing-your-brain-78312fadf05b" target="_blank" rel="noopener">The Internet is changing your brain</a><br>We can remember the things that we need to remember but, forget the things that we rarely use. That is not a problem, it is entirely sensible and should be expected.<br>我们要在变化快速适应，要积极求变，不断进步，终身学习</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ol><li>当然要推荐且必须要放耗子叔最近新发的文章啦</li></ol><p><a href="https://coolshell.cn/articles/19464.html" target="_blank" rel="noopener">如何超过大多数人</a></p><ol><li>就是不管干啥都要多多访问官网，比如配置next，官网才是最新的资讯<br>因为自己对busuanzi统计的折腾，发现还是官网好啊</li></ol><p><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT 使用文档</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/%E5%9C%A8could-studio%E5%90%8C%E6%AD%A5%E5%86%99Hexo/">在另一个终端上同步写HEXO</a></p><p><a href="https://www.wolfdan.cn/AD14-2%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E5%90%84%E7%A7%8D%E5%BA%93/">AD14.2如何安装各种库</a></p><p><a href="https://www.wolfdan.cn/%E5%AE%89%E8%A3%85%E7%A0%B4%E8%A7%A3Altium-Designer14-2/">安装破解Altium Designer14.2</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>AD14.2如何安装各种库</title>
    <url>/AD14-2%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E5%90%84%E7%A7%8D%E5%BA%93/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="AD14-2如何安装各种库"><a href="#AD14-2如何安装各种库" class="headerlink" title="AD14.2如何安装各种库"></a>AD14.2如何安装各种库</h1><h2 id="我们先以安装NSC-Amplifier-IntLib为例子"><a href="#我们先以安装NSC-Amplifier-IntLib为例子" class="headerlink" title="我们先以安装NSC Amplifier.IntLib为例子"></a>我们先以安装NSC Amplifier.IntLib为例子</h2><h3 id="安装文件"><a href="#安装文件" class="headerlink" title="安装文件"></a>安装文件</h3><p>由于我不知道NSC Amplifier.IntLib在哪,所以我直接搜索找到了这个官方网站的一直文档分支链接<br><a href="https://techdocs.altium.com/cn/display/AMSE/Defining+&amp;+Running+Circuit+Simulation+Analyses" target="_blank" rel="noopener">进入之后看图操作下载吧</a><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST9/how_to_install_library_in_AD14.2/1.png" alt="下载"><br><strong>下载</strong></p><h3 id="使AD软件链接路径"><a href="#使AD软件链接路径" class="headerlink" title="使AD软件链接路径"></a>使AD软件链接路径</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST9/how_to_install_library_in_AD14.2/2.png" alt="使AD软件链接路径"></p><h3 id="开心食用"><a href="#开心食用" class="headerlink" title="开心食用"></a>开心食用</h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST9/how_to_install_library_in_AD14.2/3.png" alt="开心食用"></p><h2 id="下载各种库？"><a href="#下载各种库？" class="headerlink" title="下载各种库？"></a>下载各种库？</h2><h3 id="当然是找官网啦啦啦"><a href="#当然是找官网啦啦啦" class="headerlink" title="当然是找官网啦啦啦"></a>当然是找官网啦啦啦</h3><p><a href="https://techdocs.altium.com/display/ADOH/Download+Libraries" target="_blank" rel="noopener">官网老库</a></p><p><strong>注意:你清楚你要的库是哪个大文件包—&gt;否则1.谷歌搞清楚2.自己下载整个库解压后搜索</strong></p><h1 id="最后注"><a href="#最后注" class="headerlink" title="最后注"></a>最后注</h1><p><strong>好像又是重复造轮子，搬运工，所以大家多多了解这种解决方案的思路啦，以后多多触类旁通啦</strong></p><blockquote><p>谢谢大家的浏览啦</p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>hardware</category>
      </categories>
      <tags>
        <tag>总有一些事情值得</tag>
        <tag>hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>在另一个终端上同步写Hexo</title>
    <url>/%E5%9C%A8could-studio%E5%90%8C%E6%AD%A5%E5%86%99Hexo/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="在另一个终端上同步写Hexo"><a href="#在另一个终端上同步写Hexo" class="headerlink" title="在另一个终端上同步写Hexo"></a>在另一个终端上同步写Hexo</h1><p><strong>用Cloud Studio做示范,其他非linux可以适当借鉴</strong></p><h3 id="2019年6月17日20-49-03发现Cloud-Studio发布的环境也没有保存npm！所以只能每次都重新安装，所以小编将会加急写个脚本出来—-gt-结果发现在cloudstudio运行脚本各种奇葩bug，所以大家要用cloudstudio写hexo的话可以每次粘贴一下下面的程序段，当然建议直接在本地装吧，这种免费但不怎么稳定的东西用着心累"><a href="#2019年6月17日20-49-03发现Cloud-Studio发布的环境也没有保存npm！所以只能每次都重新安装，所以小编将会加急写个脚本出来—-gt-结果发现在cloudstudio运行脚本各种奇葩bug，所以大家要用cloudstudio写hexo的话可以每次粘贴一下下面的程序段，当然建议直接在本地装吧，这种免费但不怎么稳定的东西用着心累" class="headerlink" title="2019年6月17日20:49:03发现Cloud Studio发布的环境也没有保存npm！所以只能每次都重新安装，所以小编将会加急写个脚本出来—&gt;结果发现在cloudstudio运行脚本各种奇葩bug，所以大家要用cloudstudio写hexo的话可以每次粘贴一下下面的程序段，当然建议直接在本地装吧，这种免费但不怎么稳定的东西用着心累"></a>2019年6月17日20:49:03发现Cloud Studio发布的环境也没有保存npm！所以只能每次都重新安装，所以小编将会加急写个脚本出来—&gt;结果发现在cloudstudio运行脚本各种奇葩bug，所以大家要用cloudstudio写hexo的话可以每次粘贴一下下面的程序段，当然建议直接在本地装吧，这种免费但不怎么稳定的东西用着心累</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"-------CloudStudioWriteHexoOnce-------"</span></span><br><span class="line">curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br><span class="line">wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span> &amp;&amp; [ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> <span class="comment"># This loads nvm</span></span><br><span class="line">nvm install stable</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="2019年12月14日16-20-36更新"><a href="#2019年12月14日16-20-36更新" class="headerlink" title="2019年12月14日16:20:36更新"></a>2019年12月14日16:20:36更新</h3><p>自己今天尝试了一下sftp传送文件到远程服务器写hexo，然后发现传送过去要花费过多的时间，因为我发现由于npm包产生了过多的文件，所以sftp传送了接近一个小时还是没有传完6万多个文件，这不是我想要的最酷的方式，所以我就抛弃了这种想法</p><h4 id="重新思考了一下VScode的SFTP和Remote"><a href="#重新思考了一下VScode的SFTP和Remote" class="headerlink" title="重新思考了一下VScode的SFTP和Remote"></a>重新思考了一下VScode的SFTP和Remote</h4><p>发现SFTP和Remote最大的区别在于是否需要完全同步，sftp需要，Remote就像一个带编辑器的ssh工具，所以不用同步，所以看起来Remote还是更友好一点！所以还是决定小场景和本地虚拟机的时候才用sftp，其他用Remote</p><p><strong>发现sftp传到vps几个小时的操作,使用git让vps直接下载可以只花30s</strong></p><h4 id="所以下面尝试Remote写并发布Hexo"><a href="#所以下面尝试Remote写并发布Hexo" class="headerlink" title="所以下面尝试Remote写并发布Hexo"></a>所以下面尝试Remote写并发布Hexo</h4><h2 id="1-添加密钥并且Git-pull你自己的仓库"><a href="#1-添加密钥并且Git-pull你自己的仓库" class="headerlink" title="1. 添加密钥并且Git pull你自己的仓库"></a>1. 添加密钥并且Git pull你自己的仓库</h2><p>由于本着不重复造轮子的心态,所以<a href="https://cloud.tencent.com/developer/article/1365689" target="_blank" rel="noopener">不会云备份Hexo的朋友们可以看某大佬写的文章</a><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST9/CloudStudio%E4%BA%91%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%86%99Hexo/1.png" alt="1.添加密钥"></p><h2 id="2-安装node-js"><a href="#2-安装node-js" class="headerlink" title="2. 安装node.js"></a>2. 安装node.js</h2><h3 id="安装-Node-js-的最佳方式是使用-nvm-如果不行看下面"><a href="#安装-Node-js-的最佳方式是使用-nvm-如果不行看下面" class="headerlink" title="安装 Node.js 的最佳方式是使用 nvm(如果不行看下面)"></a>安装 Node.js 的最佳方式是使用 nvm(如果不行看下面)</h3><p>cURL:</p><blockquote><p>$ <code>curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</code></p></blockquote><p>Wget:</p><blockquote><p>$ <code>wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</code></p></blockquote><p>配置nvm环境<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span> &amp;&amp; [ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure><p></p><p>安装完成后，重启终端并执行下列命令即可安装 Node.js</p><blockquote><p>$ <code>nvm install stable</code></p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST9/CloudStudio%E4%BA%91%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%86%99Hexo/2.png" alt="2.安装nodejs"></p><h3 id="直接安装nodejs-2019年10月23日16-29-21更新"><a href="#直接安装nodejs-2019年10月23日16-29-21更新" class="headerlink" title="直接安装nodejs(2019年10月23日16:29:21更新)"></a>直接安装nodejs(2019年10月23日16:29:21更新)</h3><p>debian/ubuntu/deepin安装nodejs,node,npm<br>安装nodejs<br><code>sudo apt-get install -y nodejs</code><br>然后安装npm<br><code>sudo apt-get install -y npm</code><br>报错如下<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正在读取软件包列表... 完成</span><br><span class="line">正在分析软件包的依赖关系树</span><br><span class="line">正在读取状态信息... 完成</span><br><span class="line">没有可用的软件包 npm，但是它被其它的软件包引用了。</span><br><span class="line">这可能意味着这个缺失的软件包可能已被废弃，</span><br><span class="line">或者只能在其他发布源中找到</span><br><span class="line">然而下列软件包会取代它：</span><br><span class="line">  node nodejs-bin</span><br><span class="line"></span><br><span class="line">E: 软件包 npm 没有可安装候选</span><br></pre></td></tr></table></figure><p></p><p>也就是说可以直接安装node就行<br>所以我们安装node<br><code>sudo apt-get install -y node</code><br>测试<br><code>node -v</code><br><code>npm -v</code></p><h2 id="3-在blog的根目录安装依赖"><a href="#3-在blog的根目录安装依赖" class="headerlink" title="3. 在blog的根目录安装依赖"></a>3. 在blog的根目录安装依赖</h2><p>(2019年10月23日16:38:55更)记得先<strong>sudo npm install -g hexo-cli</strong></p><blockquote><p>注意:blog的根目录就是你之前<code>hexo init &lt;folder&gt;</code>的这个folder<br><code>npm i</code></p></blockquote><p>然后测试<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy</code></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST9/CloudStudio%E4%BA%91%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%86%99Hexo/3.png" alt="3.在blog的根目录安装依赖"></p><h2 id="4-写新文章测试"><a href="#4-写新文章测试" class="headerlink" title="4. 写新文章测试"></a>4. 写新文章测试</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST9/CloudStudio%E4%BA%91%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%86%99Hexo/4.png" alt="4.写新文章测试"></p><h2 id="5-发布自己的环境"><a href="#5-发布自己的环境" class="headerlink" title="5. 发布自己的环境"></a>5. 发布自己的环境</h2><ul><li>这一步十分重要！！！</li><li>博主就是由于之前这一步没做，导致了环境重置</li><li><strong>因为cloud studio的工作目录和环境是分离的！</strong></li></ul><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST9/CloudStudio%E4%BA%91%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%86%99Hexo/5.png" alt="5.丢失环境只能重建"><br><strong>丢失环境只能重建</strong></p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST9/CloudStudio%E4%BA%91%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%86%99Hexo/6.png" alt="6.发布自己的环境"><br><strong>发布自己的环境</strong></p><blockquote><p>谢谢大家的浏览啦</p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>安装破解Altium Designer14.2</title>
    <url>/%E5%AE%89%E8%A3%85%E7%A0%B4%E8%A7%A3Altium-Designer14-2/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h3 id="安装破解Altium-Designer-14-2-3"><a href="#安装破解Altium-Designer-14-2-3" class="headerlink" title="安装破解Altium Designer 14.2.3"></a>安装破解Altium Designer 14.2.3</h3><ol><li><p><a href="http://pandownload.com/" target="_blank" rel="noopener">http://pandownload.com/</a> 百度云盘第三方不限速版软件(小单推荐) 欢迎访问wolfdan.cn</p></li><li><p>AD软件链接：<a href="https://pan.baidu.com/s/1m6mNk_uqHGb3q6Moc1zqQA" target="_blank" rel="noopener">https://pan.baidu.com/s/1m6mNk_uqHGb3q6Moc1zqQA</a> 提取码：eqyo<br>2.1用1打开这个链接，然后下载，只下载两个压缩包就行了，<br>2.2然后一起解压到当前目录<br>2.3看视频安装</p></li></ol><p>个人分享链接:<a href="https://pan.baidu.com/s/1EHtVTZWtefQwVn6GVleE6g" target="_blank" rel="noopener">https://pan.baidu.com/s/1EHtVTZWtefQwVn6GVleE6g</a> 提取码：zhf1<br>(防止上面失效用的)</p><h2 id="注"><a href="#注" class="headerlink" title="注:"></a>注:</h2><p><strong>不好意思，好像重复造轮子了,dbq,但希望能帮到你…用完即走就好(毕竟是工具性质,分享性质的网站)</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>hardware</category>
      </categories>
      <tags>
        <tag>总有一些事情值得</tag>
        <tag>hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第八周(8-521)</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC%E5%85%AB%E5%91%A8-8-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="ARST打卡第八周-8-521"><a href="#ARST打卡第八周-8-521" class="headerlink" title="ARST打卡第八周(8/521)"></a>ARST打卡第八周(8/521)</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST8/%E6%8E%A2%E9%99%A9%E5%B0%B1%E8%A6%81%E5%81%9A%E5%A5%BD%E9%9D%A2%E5%AF%B9%E4%B9%8C%E4%BA%91%E5%AF%86%E5%B8%83%E7%9A%84%E5%87%86%E5%A4%87.jpg" alt="探险就要做好面对乌云密布的准备"><br>探险就要做好面对乌云密布的准备<br>注·最近因为踢球脚韧带拉伤了,所以最近喜欢看比较悲壮的图片,希望大家多多注意身体健康</p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.6/2019.6.14" target="_blank" rel="noopener">ARST第八周的刷题</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://dzone.com/articles/devops-tools-vs-mindset-culture" target="_blank" rel="noopener">DevOps: Tools vs. Mindset</a><br>And it is so true: without developing a collaborative environment within the teams, and a culture to adapt to continuous change, no organization can claim to have achieved DevOps implementation success, no matter what tools or technologies you use.<br>对的，通力合作才是最棒的DevOps</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://juejin.im/post/5d0232b0f265da1b6836b7fd" target="_blank" rel="noopener">一个大佬的求职逆袭</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC%E5%85%AB%E5%91%A8-8-521/">如何使用一个域名同时构建Hexo和WordPress</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用一个域名同时构建Hexo和WordPress</title>
    <url>/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D%E5%90%8C%E6%97%B6%E6%9E%84%E5%BB%BAHexo%E5%92%8CWordPress/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST8/%E6%B5%B7%E5%9B%BE.png" width="50%" height="50%"></p><p><strong>两把椅子，看见同一片美景</strong></p><h2 id="wolfdan-blog主本人的配置"><a href="#wolfdan-blog主本人的配置" class="headerlink" title="wolfdan blog主本人的配置:"></a>wolfdan blog主本人的配置:</h2><p><strong>其他配置可以灵活参考</strong></p><ul><li>BT面板管理的WordPress</li><li>腾讯云管理域名</li><li>Hexo分布在github page和coding.me pages上面</li><li><strong>使用的<code>wolfdan.cn</code>做WordPress的域名，<code>www.wolfdan.cn</code>做Hexo的域名</strong>（主要是因为之前我的WordPress就是用的<code>wolfdan.cn</code>的域名,所以如果我想要反过来操作的话—&gt;那么1. 数据库里面不太好改的，2. 容易出一些文章链接不正常，3. 网站SEO会很奇怪—&gt;好奇的朋友可以自己尝试一下）</li></ul><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="一-给coding重新绑定域名"><a href="#一-给coding重新绑定域名" class="headerlink" title="一.给coding重新绑定域名"></a>一.给coding重新绑定域名</h2><p>我的是绑定<code>www.wolfdan.cn</code>，你们参考一下</p><ol><li>去腾讯云解析,把github的pages解析关闭掉，然后<code>www.wolfdan.cn</code>只留下<code>pages.coding.me</code>的<code>CNAME</code>的解析(详细操作请看图)<br><strong>这样做是为了顺利申请<code>www.wolfdan.cn</code>的域名的SSL，因为如果还开着github的那个解析会申请失败(可以解决问题:coding申请SSL失败)</strong></li></ol><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST8/pages%E8%A7%A3%E6%9E%90.png" width="50%" height="50%"></p><p><strong>pages解析</strong></p><h2 id="二-绑定好其他域名"><a href="#二-绑定好其他域名" class="headerlink" title="二.绑定好其他域名"></a>二.绑定好其他域名</h2><ol><li>去github.io仓库的setting设置custom domain的域名绑定<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST8/githubCustomDomain.png" alt="githubCustomDomain"></li><li>Hexo的你的博客根目录下的source根目录下新建一个CNAME文件，里面写上你刚刚绑定的域名，<strong>这样是为了防止每次发布后重新绑定github的域名</strong><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST8/CNAMEset.png" alt="CNAMEset"></li><li>用<code>@记录</code>绑定自己vps的地址<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST8/%E6%9C%80%E5%90%8E%E7%9A%84%E8%A7%A3%E6%9E%90%E7%94%BB%E9%9D%A2.png" width="50%" height="50%"><br><strong>最后解析的画面</strong></li><li>在bt面板添加网站并申请ssl<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST8/BTaddWeb.png" alt="BTaddWeb"><br><strong>添加网站</strong><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST8/BTaddSSL.png" alt="BTaddSSL"><br><strong>申请ssl</strong></li><li>修改wp-config（看情况是否需要操作）<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST8/%E4%BF%AE%E6%94%B9wp-config.png" alt="修改wp-config"></li></ol><h2 id="开始测试玩耍收工咯"><a href="#开始测试玩耍收工咯" class="headerlink" title="开始测试玩耍收工咯"></a>开始测试玩耍收工咯</h2><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><ul><li>测试效果的时候，谷歌浏览器要输入网址的话，<strong>域名最后一定要加<code>/</code></strong>,比如blog主的<code>https://www.wolfdan.cn/</code>，否则很可能出现谷歌智能跳转到以前访问过的<code>https://wolfdan.cn</code>上面去(我就在上面花了好久时间…)</li><li>提前谷歌了一下，发现自己应该没有重复造轮子，才写下此篇，2019年6月15日19:03:53应该没有重复造轮子，感谢大家浏览</li><li><strong>由于自己是5天后才写的，所以难免会有很多纰漏，如果大家有哪里看不懂的可以给我评论留言，谢谢大家的浏览和支持</strong></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>域名</category>
      </categories>
      <tags>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>许岑老师的《如何成为有效学习的高手》读书有感</title>
    <url>/%E8%AE%B8%E5%B2%91%E8%80%81%E5%B8%88%E7%9A%84%E3%80%8A%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E6%9C%89%E6%95%88%E5%AD%A6%E4%B9%A0%E7%9A%84%E9%AB%98%E6%89%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%9C%89%E6%84%9F/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="高效学习关关键词"><a href="#高效学习关关键词" class="headerlink" title="高效学习关关键词"></a>高效学习关关键词</h1><p>适合自己、学习方法、短时间、注意力、解决难题、设定目标，以及名师</p><h1 id="找到适合你的学习方法"><a href="#找到适合你的学习方法" class="headerlink" title="找到适合你的学习方法"></a>找到适合你的学习方法</h1><blockquote><p><strong>自然主义核心在于模仿，结构主义为的是创造</strong></p><ul><li>模仿类的学习—比如语言等,就是不断地模仿,不要花过多的时间去死扣结构</li><li>而学习创造性的学科时，比如艺术类，设计类，那么就要学好基础结构，这样才能有效创造</li><li><strong>练习不必顾全大局</strong>，练习的时候就可以把练习的东西先拆解反复练习，之后在组合练习的时候再顾全大局</li><li>不要收藏，而是多碎片化学习(没有整块学习时间的情况下)，当然碎片化学习的前提是你要有一定的知识体系(比如你要会1+1=2吧)</li></ul></blockquote><h1 id="不谈兴趣-用任务驱动学习"><a href="#不谈兴趣-用任务驱动学习" class="headerlink" title="不谈兴趣,用任务驱动学习"></a>不谈兴趣,用任务驱动学习</h1><blockquote><p><strong>生活驱动,工作驱动,以教为学</strong></p><ul><li>生活工作中的一些事情推动你学习,那种就是很强的驱动</li><li><strong>每次学习都要有教别人的任务心态去学习,比如写分享文章等</strong>,这样就能使得自己的学习变成一个强的任务驱动的学习过程，进而让自己成为一个高效的学习者</li></ul></blockquote><h1 id="你99-999999999-没有拖延症"><a href="#你99-999999999-没有拖延症" class="headerlink" title="你99.999999999%没有拖延症"></a>你99.999999999%没有拖延症</h1><ul><li><strong>事情的重要程度决定了你的行动力,所以给自己要学习的任务的重要性加码</strong></li></ul><h1 id="精致地对待自己的生活"><a href="#精致地对待自己的生活" class="headerlink" title="精致地对待自己的生活"></a>精致地对待自己的生活</h1><ul><li><strong>买贵的学习工具(贵到让你心痛)</strong>,那么你就会刻意学习了,因为这么贵,怎么舍得不好好利用,不每天都用几下,感觉少用一下都是亵渎钱财</li><li><strong>平时生活中要有仪式感</strong>,比如好好吃饭</li><li><strong>使用射灯,让自己有一种在舞台表演的感觉</strong></li><li><strong>进入高质量的睡眠</strong>,白天累到自己,比如超认真工作一天,睡前几小时锻炼身体,或者超级专注地玩游戏</li></ul><h1 id="设定有效的目标"><a href="#设定有效的目标" class="headerlink" title="设定有效的目标"></a>设定有效的目标</h1><ul><li>首先要有足够明确的目标，强烈的任务驱动欲望，而不是自己的白日梦那种偶尔幻想级别的任务，否则太容易半途而废了，<strong>比如你要出国留学,你现在迫在眉睫地需要练习好口语</strong>,<strong>还比如你下学期要打ICPC比赛了,你要急速提升你的算法竞赛能力</strong></li></ul><h1 id="直奔大师"><a href="#直奔大师" class="headerlink" title="直奔大师"></a>直奔大师</h1><ul><li><strong>在明确了自己的目标也就是自己要去到哪里之后，然后先来一次直奔你要去的地方的模仿</strong>(因为这里涵盖了<strong>兴趣和任务驱动</strong>),然后再是扎实地练习基础功，然后就不断地向着真正意义的大师慢慢进发</li><li><strong>怯场是最糟糕的自觉。一个人他胆子变得比之前的大一点，能走的路可能就长一点</strong></li></ul><h1 id="制造反馈"><a href="#制造反馈" class="headerlink" title="制造反馈"></a>制造反馈</h1><blockquote><p><strong>当学东西的时候，一定要想办法把学习的成功展示出来，应用出来</strong></p><ul><li>比如文字类的，写个总结(就是自己看着文章用自己的话来表述)</li><li>口语类的就给自己录音反复练习</li><li>动作类的就给自己拍视频然后看自己的动作是否规范，然后反复练习</li></ul></blockquote><h1 id="突破瓶颈"><a href="#突破瓶颈" class="headerlink" title="突破瓶颈"></a>突破瓶颈</h1><ul><li>解决自己的心态问题,在排除了技术问题后,要足够地自信</li><li>扩大涉猎范围,在你的专业里面,你要不断地积累</li><li>更加专注,请教名师</li></ul><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p><strong>如果自信来自于自律，那就是扎扎实实的自信。如果自信来源于幻想，那就是盲目的自信</strong></p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>关于认知,财富,阶层的听书blog记</title>
    <url>/%E5%85%B3%E4%BA%8E%E8%AE%A4%E7%9F%A5-%E8%B4%A2%E5%AF%8C-%E9%98%B6%E5%B1%82%E7%9A%84%E5%90%AC%E4%B9%A6blog%E8%AE%B0/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><ul><li>洛克菲勒行事准则: 绝对不要把精力发在不可逆转的事情上面！(所以不要花时间去抱怨)</li><li>记录读书笔记以及学习技术的blog，让自己忘了详细细节的时候能够快速查找到，也让自己加深理解—-&gt;然后想想怎么让人们能够轻松地给语音知识做笔记，这可能是一个爆点(脑电波？)</li><li>我们必须面对现实，现实就是没有那么多时间让你搞清楚一切，你必须做出当前限制下的选择！所以我们一般情况下是定好目标，选好方法，合适取舍！而非一直死磕！因为一般你不会一直做嗑盐，除非你是科学家，但你的梦想是伟大的工程师啊，所以你必须学会转变思维方式，确立目标，选好方法，合适取舍！</li><li>虽然你喜欢一直搞通全部，但这是不可能的，你要接受现实，但你必须努力去达成目标，目标域内关键的东西必须搞清楚</li><li>围棋智慧，两只眼活，所以让自己算法能力练习到前25%，演讲沟通管理写作技能练习到前25%，那你就可以成为伟大的工程师，好的就是这样</li><li>多只眼更爽</li><li>自己需要<strong>表达+算法+思维不断强化</strong></li><li>中国族群给哈佛这些私立学校捐款才能提高我们中国族群的哈佛入学率，而中国大学国家资助，所以只要多多纳税就好</li><li>美国自由，福利到，导致穷人不自控不自制，然后穷人很找就乱性生了孩子又容易单亲然后教育就不好，并且天天和穷人待在一起，思维觉得这样也好，然后穷人循环，然而富人反之，中国却可以让你有机会接触富人，让你在没有很强自制力前强制压迫你学习的机制，所以反而贫富流动性很好</li><li>中国也有分层，各处都有分层，但是分层的本质来自于思维方式导致的分层！你的思维是否就只是一个中产阶级的思维？</li><li>底层用技术教育，中层用素质教育，精英层用决策教育(你说1+1=3，那其他人同意吗？)</li><li>顶级精英，培养你自行决策，让你学会选择，中产是提供作业，让你多样化完成</li><li>所以多练习自己的决策能力！！！选择去改变世界，永远不按套路出牌，成为英雄，超越自己的命运</li><li>跨阶层的人才是英雄</li><li>不知道自己知道是经验！是认知最高境界</li><li>人和人唯一差别是认知</li><li>提升认知1.自我否定(不能对任何事确定地说我知道)2.行动(知行合一，认知到重要的马上行动)(早死早超生)3.和认知比你高的人待在一起！！(找职业就找认知比你高的老板或同事)(腾讯开放各平台就可以和各大佬交流认知！！！)</li><li>风险投资人 == 用概率算法，是一种精密算法的概率游戏，富人思维，好的亲友环境可以给你这种思维</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第七周(7/521)</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC%E4%B8%83%E5%91%A8-7-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST7/snow.jpg" alt="snow"></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.6/2019.6.4" target="_blank" rel="noopener">Algorithm</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://dzone.com/articles/learning-containershttps://dzone.com/articles/learning-containers" target="_blank" rel="noopener">Learning Containers</a><br>In addition to all the traditional work of a DBA, I’ll be adding a bunch of information on containers as I learn it. For good or for ill, a lot of stuff like query tuning, backups, HA/DR, and more, is NOT going away.<br>我认为:是的，容器化改变了运维现状，以后的运维师将会变少，但不会消失，极度优秀的运维师反而还会出现新的供不应求—-从古至今，市场从而不缺技术人员，只缺技术人才，所以我相信对于运维职业消失的担忧其实和当下的CV程序员对于自己是否会被裁掉的担忧是一样的,<strong>因此，我们面对技术变革，唯一需要做的，也是一辈子都需要做的就是：终身学习，我也喜欢这个行业带给我终身学习的习惯</strong></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h1><p><a href="https://www.nixonli.com/22700.html" target="_blank" rel="noopener">V2ray问题合集</a><br><a href="http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/" target="_blank" rel="noopener">Hexo搭建个性化next主题</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share:"></a>Share:</h1><p><a href="https://www.wolfdan.cn/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BD%BF%E7%94%A8Hexo/">Hexo和WordPress</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo和wordpress的选择</title>
    <url>/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BD%BF%E7%94%A8Hexo/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="Hexo和wordpress的选择"><a href="#Hexo和wordpress的选择" class="headerlink" title="Hexo和wordpress的选择"></a>Hexo和wordpress的选择</h1><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST7/Hexo%E5%A4%9A%E7%AB%AF%E5%90%8C%E6%AD%A5/master.png" alt="master"></p><h2 id="1-原来的服务器ip被墙了"><a href="#1-原来的服务器ip被墙了" class="headerlink" title="1. 原来的服务器ip被墙了"></a>1. 原来的服务器ip被墙了</h2><p>因为原来自己的网站是搭建在国外的一台服务器上面，然后最近一段时间网络整顿，然后我的ip被ban了,然后我抢救了4天整,好不容易救活了,但是访问速度极其不友好,所以为了让我的读者能有最后的体验,我必须努力啊,然后我就想到了境内境外分流(其实也是受到一个学长的启发)</p><h2 id="2-因为维护vps太麻烦了"><a href="#2-因为维护vps太麻烦了" class="headerlink" title="2. 因为维护vps太麻烦了"></a>2. 因为维护vps太麻烦了</h2><p>记得自己是最喜欢配置各种生产环境的一个人,前段时间还想过要做一个运维工程师来着,但是最近头铁了4天整,<strong>发现维护vps实在是太麻烦了</strong>,而且自己还有很多其他的事要处理,<strong>所以这种比较吃时间,可以做到的,但做慢了却会影响用户体验而导致自己熬夜也要肝的事情还是尽量少发生比较好一点</strong>,所以自己觉得让网站托管在大厂微软的github和腾讯的coding上面</p><h2 id="3-Hexo的美化度比较高-个人感觉"><a href="#3-Hexo的美化度比较高-个人感觉" class="headerlink" title="3. Hexo的美化度比较高(个人感觉)"></a>3. Hexo的美化度比较高(个人感觉)</h2><p>不知道是自己没有认真地看wordpress的主题还是怎么样,我感觉Hexo的美化度是比较高的,然而我看到的比较好看的wordpress的主题都是收费版的更好看,这让暂时没什么钱的我有点难受,而且觉得不太值得</p><h2 id="4-免费"><a href="#4-免费" class="headerlink" title="4. 免费"></a>4. 免费</h2><p>真的,买vps不管国内国外,就连学生机都要至少10RMB/月左右,<strong>所以对于这种Hexo的部署分流方式，真是又快又好又便宜又省事,何乐而不为呢?</strong></p><h4 id="注"><a href="#注" class="headerlink" title="注:"></a>注:</h4><blockquote><p>虽然有些大佬可以薅到谷歌云和亚马逊云的羊毛免费使用一段时间,但是时间是有限的,而且还是有第一二个问题—-<code>网站容易被墙</code>和<code>维护vps</code>困难</p></blockquote><h1 id="感言"><a href="#感言" class="headerlink" title="感言"></a>感言</h1><h2 id="当然我不是说不能用wordpress，wordpress其实也是有很多好处的，比如"><a href="#当然我不是说不能用wordpress，wordpress其实也是有很多好处的，比如" class="headerlink" title="当然我不是说不能用wordpress，wordpress其实也是有很多好处的，比如"></a>当然我不是说不能用wordpress，wordpress其实也是有很多好处的，比如</h2><ol><li>可以云端写文章(因为它是在网页端写作的特性)</li><li>可以搭建好了之后让一些没有计算机相关背景的作家使用(就是只要有技术的人定期维护一下就好)(当然这也不一定)</li><li>技术历史长，就是很多问题在谷歌百度上都能找到(而Hexo是一个相对来说新一点的东西)</li></ol><h2 id="做好真正重要的——————-学习和创作"><a href="#做好真正重要的——————-学习和创作" class="headerlink" title="做好真正重要的—————— 学习和创作"></a>做好真正重要的—————— <strong>学习和创作</strong></h2><p>这些东西其实都是一些工具，我们最应该做的还是在自己感兴趣的地方多多努力，然后创造价值，再分享给大家，这才是最重要的，也才是我们写作的最主要的目的—&gt;帮助更多的人</p><h1 id="2019年6月9日21-07-21"><a href="#2019年6月9日21-07-21" class="headerlink" title="2019年6月9日21:07:21"></a>2019年6月9日21:07:21</h1><p>当我今天用着wordpress写文档的时候，想着以后再有不用这个了，心里有说不出的难受，毕竟这真是我亲儿子一样，养了几个月了，难以割舍的情感，而且云端写作的体验也是妙不可言，所以我决定还是wordpress和hexo都使用<br>然后2019年6月9日21:49:40 发现Hexo是组件化，然后很多都是链接别处的东西，所以很容易挂掉某个组件，很惨的那种，然而WordPress就是只要你的vps不死掉，ip不死掉，基本上是没有任何事情会出大故障的</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第六周(6/521)</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC%E5%85%AD%E5%91%A8-6-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST6/All/WinterIsComing.jpg" alt="WinterIsComing"></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.5/2019.5.31%E5%89%8D%E7%BC%80%E5%B7%AE%E5%88%86%E4%BA%8C%E5%88%86" target="_blank" rel="noopener">第六周算法打卡</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://dzone.com/articles/the-modern-data-estate" target="_blank" rel="noopener">The Modern Data Estate</a><br>You need to be able to access past and present data and predict the future using data.</p><h3 id="What-I-think"><a href="#What-I-think" class="headerlink" title="What I think?"></a>What I think?</h3><p>Yes,I think that there must be a big chance in big data.And we should use it well.<br>鲁迅说过:<strong>要用历史的眼光看问题，借鉴历史，因为历史总是惊人的相似</strong><br>鲁迅又说:<strong>我没有说过</strong><br>其实是根据我高中历史老师教我的，以及看<strong>桥水公司创始人很早就用电脑来分析过去的股票数据来预测将来的股票走势</strong>(我觉得这可能是最早的<strong>量化交易</strong>)和<strong>《杠杆说服力》看的一个尿不湿和啤酒的故事</strong>，所以我觉得现在应该是：</p><blockquote><p><strong>结合AI来分析挖去泛数据中的价值</strong>，并且好好利用这些价值的时候了</p></blockquote><h1 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h1><p><a href="https://www.geeksforgeeks.org/socket-programming-cc/" target="_blank" rel="noopener">socket programming in cpp</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share:"></a>Share:</h1><p><a href="https://www.wolfdan.cn/Sublime%E6%8F%92%E4%BB%B6%E5%8C%85%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">SUBLIME插件包无法安装问题解决</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime插件包无法安装问题解决</title>
    <url>/Sublime%E6%8F%92%E4%BB%B6%E5%8C%85%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST6/%E6%8F%90%E5%88%A9%E6%98%82.jpg" alt="分享封面图"></p><h1 id="Sublime插件包无法安装了？"><a href="#Sublime插件包无法安装了？" class="headerlink" title="Sublime插件包无法安装了？"></a>Sublime插件包无法安装了？</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前段时间一直发现sublime使用过程中各种包报错说无法更新什么的，起初还以为是那些插件包出问题了，后面发现自己竟然根本无法访问<strong>Package Control</strong>！<br>当时我很震惊，然后一直忙到最近才有时间来解决这个bug<br>我不会告诉你我觉得写ACM题目用VScode写起来那个编译运行那里还是有点不爽，所以我又回归了用sublime写ACM题目</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>打开终端<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl + `</span><br></pre></td></tr></table></figure><p></p><p>查看错误<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST6/sublime%E9%94%99%E8%AF%AF%E4%B8%80.png" alt="第一个错误"></p><h3 id="实践分析发现（访问sublime提醒的官网解决方案）"><a href="#实践分析发现（访问sublime提醒的官网解决方案）" class="headerlink" title="实践分析发现（访问sublime提醒的官网解决方案）:"></a>实践分析发现（访问<a href="https://packagecontrol.io/docs/troubleshooting" target="_blank" rel="noopener">sublime提醒的官网解决方案</a>）:</h3><blockquote><p>这个网址被墙了，而且网站使用的子匿名域名(看不到)也被墙了</p></blockquote><h4 id="解决方案一-通过一些学习资源-比如校园网，科学上网-开启全局访问一下"><a href="#解决方案一-通过一些学习资源-比如校园网，科学上网-开启全局访问一下" class="headerlink" title="解决方案一:通过一些学习资源(比如校园网，科学上网)开启全局访问一下"></a>解决方案一:通过一些学习资源(比如校园网，科学上网)开启全局访问一下</h4><h4 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二:"></a>解决方案二:</h4><h5 id="手动下载一个package-control管理员在github上维护的包："><a href="#手动下载一个package-control管理员在github上维护的包：" class="headerlink" title="手动下载一个package control管理员在github上维护的包："></a>手动下载一个package control管理员在github上维护的包：</h5><p><a href="https://github.com/wbond/package_control" target="_blank" rel="noopener">package control管理员在github上维护的包</a></p><h5 id="打开链接后，右侧点击Download-ZIP："><a href="#打开链接后，右侧点击Download-ZIP：" class="headerlink" title="打开链接后，右侧点击Download ZIP："></a>打开链接后，右侧点击Download ZIP：</h5><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST6/%E5%AE%89%E8%A3%85package%E6%96%87%E4%BB%B6%E5%8C%85.png" alt="安装package文件包"><br>把下载下来的包解压，将解压后的文件夹重命名为<code>Package Control</code>, 拷贝到sublime的packages目录下，<strong>直接菜单栏Perferences—&gt;Browse Packages. 然后将 Package Control文件夹拷贝进去</strong></p><p>然后重新点击菜单栏Perferences，会发现多了Package Settings 和Package Control 这两个菜单，这就说明 Package Control安装成功了。</p><h5 id="打开Package-Settings—-gt-Package-Control-—-gt-Settings-User"><a href="#打开Package-Settings—-gt-Package-Control-—-gt-Settings-User" class="headerlink" title="打开Package Settings—&gt;Package Control —&gt; Settings User"></a>打开Package Settings—&gt;Package Control —&gt; Settings User</h5><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST6/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%882_%E6%9B%B4%E6%94%B9channels1.png" alt="打开package control的user settings"></p><h5 id="添加-quot-channels-quot-quot-http-cst-stu-126-net-u-json-cms-channel-v3-json-quot-前面的行尾记得加逗号-这里是使用的镜像索引网站"><a href="#添加-quot-channels-quot-quot-http-cst-stu-126-net-u-json-cms-channel-v3-json-quot-前面的行尾记得加逗号-这里是使用的镜像索引网站" class="headerlink" title="添加&quot;channels&quot;:&quot;http://cst.stu.126.net/u/json/cms/channel_v3.json&quot;,前面的行尾记得加逗号(这里是使用的镜像索引网站)"></a>添加<code>&quot;channels&quot;:&quot;http://cst.stu.126.net/u/json/cms/channel_v3.json&quot;,</code>前面的行尾记得加逗号(这里是使用的镜像索引网站)</h5><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST6/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%882_%E6%9B%B4%E6%94%B9channels2.png" alt="解决方案2_更改channels2"><br>2.5 然后就是熟悉的操作<code>Ctrl+Shift+P</code>—&gt;<code>install</code>—&gt;选包</p><h3 id="若遇到了新的问题：package版本过旧，也可使用2中的解决方案二来解决问题"><a href="#若遇到了新的问题：package版本过旧，也可使用2中的解决方案二来解决问题" class="headerlink" title="若遇到了新的问题：package版本过旧，也可使用2中的解决方案二来解决问题"></a>若遇到了新的问题：<strong>package版本过旧，也可使用2中的解决方案二来解决问题</strong></h3><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST6/sublime%E6%96%B0%E9%97%AE%E9%A2%98.png" alt="sublime新问题"></p><h3 id="再次访问官网-发现是版本过旧"><a href="#再次访问官网-发现是版本过旧" class="headerlink" title="再次访问官网(发现是版本过旧)"></a>再次访问官网(发现是版本过旧)</h3><p><strong>解决:</strong><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST6/sublime新问题解决方案.png" alt="sublime新问题解决方案"></p><h3 id="Have-fun"><a href="#Have-fun" class="headerlink" title="Have fun"></a>Have fun</h3><p>就是熟悉的操作<code>Ctrl+Shift+P</code>—&gt;<code>install</code>—&gt;选包<br>然后我装了个golang build来测试，发现成功了<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST6/%E9%87%8D%E8%A3%85%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98.png" alt="重装packageControl解决问题"></p><p>参考：<br><a href="https://packagecontrol.io/docs/troubleshooting" target="_blank" rel="noopener">https://packagecontrol.io/docs/troubleshooting</a><br><a href="https://blog.csdn.net/wcc27857285/article/details/88368866" target="_blank" rel="noopener">https://blog.csdn.net/wcc27857285/article/details/88368866</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>编辑器</category>
      </categories>
      <tags>
        <tag>Sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第五周(5/521)</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC%E4%BA%94%E5%91%A8-5-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST5/hold_the_door.jpg" alt="HoldTheDoor一生守一誓言"></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>这一周天天在准备计算机设计的国赛作品，所以比较忙，没有什么时间写算法代码，偷偷挤了点时间在上课的时候刷算法书，然后做了一小会题目，等下周项目提交之后就认真刷题，多刷题，疯狂刷题<br><strong>呜呜呜，我也想好好刷题，可是时间都被项目压榨了，坐下来写blog的时候队友还叫我过去调代码，然后我说我现在有一件大事要做，就是写blog呀，因为521周打卡是不能断的！</strong><br>(2019年5月26日14:33:36发现昨天寝室的电脑最终版忘记git push了，所以先粘出链接，到时候再push完善一下)<br><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/2019.5/2019.5.25/poj1845.cpp" target="_blank" rel="noopener">poj1845分治</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://dzone.com/articles/5-tools-for-fast-workflow-automation" target="_blank" rel="noopener">一下自动化工具</a><br>我相信未来是很智能很自动化的，我也喜欢让我的工作自动化，所以喜欢折腾各种提高效率的工具，由于这周一直在忙，于是没有看什么比较深度的英文，其实也有看Android开发的英文技术文档啦：》</p><h1 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h1><p>2019年5月19日15:53:33 突然发现自己的网站访问不了了，以为封ip和域名了，害怕，后面发现是网络连接问题，吓死，不过还是深入了解了一下相关的内容<br><a href="http://www.zhonghuaseo.com/youhua/2209.html" target="_blank" rel="noopener">什么是域名被墙？域名被墙了如何解决？</a></p><h1 id="Share：用github当做图床-amp-amp-用sublime或者VScode写markdown"><a href="#Share：用github当做图床-amp-amp-用sublime或者VScode写markdown" class="headerlink" title="Share：用github当做图床 &amp;&amp; 用sublime或者VScode写markdown"></a>Share：用github当做图床 &amp;&amp; 用sublime或者VScode写markdown</h1><blockquote><p><strong>再忙也不能不信守诺言，所以上周blog里面说过要给大家分享的东西，这周一定会写出来的，也会坚持521ARST打卡的</strong></p><h2 id="用github当做图床"><a href="#用github当做图床" class="headerlink" title="用github当做图床"></a>用github当做图床</h2><ol><li>生成本地git仓库<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST5/%E6%8A%8Agithub%E5%BD%93%E5%81%9A%E5%9B%BE%E5%BA%8A.png" alt="生成本地git仓库"></li><li>如何找到图片的真正链接<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST5/%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E5%9B%BE%E7%89%87%E7%9A%84%E7%9C%9F%E6%AD%A3%E9%93%BE%E6%8E%A5.png" alt="如何找到图片的真正链接"></li><li>真正的链接<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST5/%E5%9B%BE%E7%89%87%E7%9A%84%E7%9C%9F%E6%AD%A3%E9%93%BE%E6%8E%A5.png" alt="真正的链接"><h3 id="使用感言"><a href="#使用感言" class="headerlink" title="使用感言"></a>使用感言</h3><strong>我承认确实没有直接粘贴使用默认图床方便快捷，但是我需要我的小站存在的时间是我的整个有生之年，甚至奢望想它存在到永久，因为我想要帮助更多的人到永久(当然这不是很现实，所以是个奢望，不过我也还是会继续进行这样的努力，因为: 不试试怎么知道不行呢？),所以我需要一个能存在很久很久的云端存储，所以我选择了github，我觉得github如果要倒闭也会给我们时间转移资源，更何况现在看来它背后是微软，现在又贴出人性化的打赏全收益，所以我觉得它不会凉，呵呵呵，所以麻烦点只是为了更稳定长久</strong></li></ol></blockquote><h2 id="用sublime或者VScode写markdown"><a href="#用sublime或者VScode写markdown" class="headerlink" title="用sublime或者VScode写markdown"></a>用sublime或者VScode写markdown</h2><ol><li>VScode下载Markdown All in One插件<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST5/VScode%E7%9A%84markdown%E6%8F%92%E4%BB%B6.png" alt="VScode下载Markdown All in One插件"></li><li>VScode的markdown展示<br>建立一个.md结尾的文件<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST5/VScode%E7%9A%84markdown%E5%B1%95%E7%A4%BA.png" alt="VScode的markdown展示"></li><li>sublime写markdown<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST5/sublimeMarkdown.png" alt="sublime写markdown"></li></ol><h3 id="使用感言-1"><a href="#使用感言-1" class="headerlink" title="使用感言"></a>使用感言</h3><p><strong>感觉有些主题的色彩高亮不够完美，所以我觉得还是直接用wordpress上的markdown编辑器比较舒服，因为这个markdown编辑器真的是我用过最好的一个:色彩高亮合适，编辑器所有的快捷键几乎都支持，版本控制，自定义等等，唯一美中不足就是实时预览对于有图片的时候不太友好，不过这是实时预览的一个通病，也无可厚非，所以有网的时候还是用wordpress写吧，真香</strong></p><h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><p>git图片同名不替换?<strong>其实只有本地缓存的原因啦</strong><br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST5/git%E5%9B%BE%E7%89%87%E5%90%8C%E5%90%8D%E4%B8%8D%E6%9B%BF%E6%8D%A2%EF%BC%9F.png" alt="git图片同名不替换？"></p><h1 id="A-joke"><a href="#A-joke" class="headerlink" title="A joke"></a>A joke</h1><p><strong>本来想现在预报我下周给你们分享什么的，但是感觉这样万一没做到岂不是鸽了大家，而且留下了不守信用的骂名，所以我决定保持稳重，避免风险，但…</strong><br><strong>这不会让我懈怠的，我会努力地尽量每周都给你们惊喜的，嘿嘿</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第四周(4/521)</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC%E5%9B%9B%E5%91%A8-4-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST4/home-1.jpg" alt="home"><br><strong>这个小房间就像我的小站，我会让这里面住着一个美人</strong></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm:"></a>Algorithm:</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.5/2019.5.12" target="_blank" rel="noopener">第四周的LeetCode题目</a></p><h1 id="View-Always-Squash-and-Rebase-your-Git-Commits"><a href="#View-Always-Squash-and-Rebase-your-Git-Commits" class="headerlink" title="View:Always Squash and Rebase your Git Commits"></a>View:Always Squash and Rebase your Git Commits</h1><p><a href="https://blog.carbonfive.com/2017/08/28/always-squash-and-rebase-your-git-commits/" target="_blank" rel="noopener">Always Squash and Rebase your Git Commits</a><br>I propose a clean history is more valuable than one that is hard to understand.</p><h1 id="Tips-破解安装Quartus-15"><a href="#Tips-破解安装Quartus-15" class="headerlink" title="Tips:破解安装Quartus 15"></a>Tips:破解安装Quartus 15</h1><p><a href="https://blog.csdn.net/yxswhy/article/details/79612383" target="_blank" rel="noopener">破解安装Quartus 15</a><br><a href="https://blog.csdn.net/bailsong/article/details/77527773" target="_blank" rel="noopener">VS code 中的各种变量 ${file},${fileBasename}</a><br><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000" target="_blank" rel="noopener">廖雪峰前辈的git教程</a></p><h1 id="Share：wordpress使用markdown教程"><a href="#Share：wordpress使用markdown教程" class="headerlink" title="Share：wordpress使用markdown教程"></a>Share：wordpress使用markdown教程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前因为每次启动这个markdown编辑器就会把我整个文章都搞乱，就是它自动把我原来写的东西都按照html的格式展示出来，后面想了想，可能也是应该的，因为原来的文章虽然采用的是富文本的模式写的，但是原生的wordpress在保存的时候还是使用了html保存，所以这也不能怪这个wordpress，所以现在我在新的文章上面直接改用markdown来写作，然后就可以直接同步到简书和自己的个人网站和大部分支持markdown的地方，所以这是很好的，所以今天的分享就是关于使用markdown在wordpress<br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello markdown in wordpress"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"不得不说，直接用markdown写，代码高亮真滴赞那，\</span></span><br><span class="line"><span class="string">	所以我觉得以后可以多粘点代码给你们看了，嘿嘿"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>为了blog存在100年，所以我决定不用我不熟悉的图床，不然很容易导致时间久了我的图片就看不了了，所以我得找一个稳固的图床中心：github</strong><br><strong>但是自己这周得打程序设计比赛的省赛，所以下周再和大家分享如何使用github当做自己的图床</strong></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST4/markdown%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="效果图"></p><h2 id="方法正文"><a href="#方法正文" class="headerlink" title="方法正文"></a>方法正文</h2><ol><li>先登入wordpress</li><li>进入插件安装界面</li><li>搜索 <strong>WP Editor.MD</strong> 安装</li><li>通过插件Editor.MD点击进入启用设置，如下图<br><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST4/%E5%90%AF%E5%8A%A8Editor.md_.jpg" alt="设置"></li></ol><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST4/%E5%90%AF%E5%8A%A8markdown2.png" alt="设置2"></p><ol><li>然后就可以像效果图那样开心地写Blog了<h2 id="使用感言"><a href="#使用感言" class="headerlink" title="使用感言"></a>使用感言</h2>表示这个直接在上面写的感觉也是十分好的，1. 各不同类型的<strong>颜色高亮处理的相当出色</strong>，2. 然后就是他的预览也比较好看(不过插了图片之后就有点左右显示不太合理了,自己用一下就知道了) 3. <strong>竟然还有版本控制</strong>，和简书一样，真的很赞(虽然我不用，但是还是要点赞，因为指不定我哪天就用了呢，多一层安全总是好的)<br>如果你们想用sublime或者vscode作为写blog的工具，然后再之间粘贴到自己Blog的话，那么请关注收藏我的小站，我下周告诉你们</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>小站终于可以用MarkDown了，而且效果还这么好，我兴奋啊，所以最近的产量肯定会变高的，嘻嘻嘻，大家一起进步呀…对了，我向队友坦言我刷题慢，向队友求取刷题方法了，所以我下一段时间可能会有关于刷算法的一些分享</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>一开始本文采用了20M的图片，以及markdown评论，导致加载速度极其地慢<br>所以我把pic改成了 home <strong>这个小房间就像我的小站，我会让这里面住着一个美人</strong><br>然后还去除了评论使用markdown（这个主题好像有点不兼容）<br>然后还测试了手机端的访问以及易读性</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第三周(3/521)</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC%E4%B8%89%E5%91%A8-3-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="ARST打卡第三周-3-521"><a href="#ARST打卡第三周-3-521" class="headerlink" title="ARST打卡第三周(3/521)"></a>ARST打卡第三周(3/521)</h1><p></p><p><strong>Algorithm:</strong><br><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.5/2019.5.9" target="_blank" rel="noopener">https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.5/2019.5.9</a></p><br><p></p><p></p><p><strong>Review:</strong><br><a href="https://medium.com/s/freakonomicsradio/the-1-5-trillion-question-how-to-fix-student-loan-debt-39125449af44?FGa=true" target="_blank" rel="noopener">https://medium.com/s/freakonomicsradio/the-1-5-trillion-question-how-to-fix-student-loan-debt-39125449af44?FGa=true</a><br>美国大学生确实有很高的债务，怪不得他们大学拼命学习<br>我们国家大学学费真的很良心了，所以得好好珍惜啊<br><strong>不过自己的青春时光也很珍贵，所以也要在大学拼命学习</strong></p><br><p></p><p></p><p><strong>Tips:</strong><br><strong>制作了一个番茄时钟</strong><br><a href="https://blog.csdn.net/qq_38190111/article/details/89044299#commentsedit" target="_blank" rel="noopener">https://blog.csdn.net/qq_38190111/article/details/89044299#commentsedit</a></p><br><p></p><p></p><p><strong>Share：</strong></p><br><p></p><p></p><h2>#CentOS开启Ftp</h2><br><p></p><p></p><p><strong>注意：我是在CentOS6操作的，CentOS7的重启操作是</strong></p><br><p></p><p></p><p><strong>systemctl restart vsftpd.service</strong></p><br><p></p><p></p><p><strong>分析：（很急的观众老爷可以直接看最后面的操作）</strong></p><br><p></p><p></p><p style="text-align:left">Linux服务器上安装ftp提供用户上传下载，是很方便的事情，但是如果你的服务器开启了iptables防火墙，就要对ftp端口做一些设置。<br><br>ftp端口真的比较特殊，并不像80，22这些端口。它分为连接用的端口，还有当你上传下载文件的传输数据用的端口。<br><br>netstat -tnl 命令可以看到，我们现在运行了ftp服务。<br>tcp 0 0 0.0.0.0:21 0.0.0.0:* LISTEN<br><br>现在我开始对ftp端口的设置，按照我们以前的视频，添加需要开放的端口<br>ftp连接端口有 21 和 20 端口，21端口用于连接，20端口用于传输数据，我现在添加对应的规则。<br><br>[root@localhost root]# iptables -A INPUT -p tcp --dport 21 -j ACCEPT<br>[root@localhost root]# iptables -A INPUT -p tcp --dport 20 -j ACCEPT<br>[root@localhost root]# iptables -A OUTPUT -p tcp --sport 21 -j ACCEPT<br>[root@localhost root]# iptables -A OUTPUT -p tcp --sport 20 -j ACCEPT<br><br>好，这样就添加完了，我们用浏览器访问一下ftp,出现超时。<br><br>所以我刚才说 ftp 是比较特殊的端口，它还有一些端口是 数据传输端口，<br>例如目录列表， 上传 ，下载 文件都要用到这些端口。<br><br>而这些端口是 任意 端口。。。 这个 任意 真的比较特殊。<br><br>如果不指定什么一个端口范围， iptables 很难对任意端口开放的，如果iptables允许任意端口访问， 那和不设置防火墙没什么区别，所以不现实的。<br><br>那么我们的解决办法就是 指定这个数据传输端口的一个范围。<br>下面我们修改一下ftp配置文件。<br><br>我这里使用vsftpd来修改演示，其他ftp我不知道哪里修改，大家可以找找资料。<br><br>[root@localhost root]# vi /etc/vsftpd/vsftpd.conf<br><br>在配置文件的最下面添加<br>pasv_min_port=30001<br>pasv_max_port=31000<br><br>然后保存退出。<br><br>这两句话的意思告诉vsftpd, 要传输数据的端口范围就在30001到31000 这个范围内传送。<br><br>这样我们使用 iptables 就好办多了，我们就打开 30001到31000 这些端口。<br><br>[root@localhost root]# iptables -A INPUT -p tcp --dport 30001:31000 -j ACCEPT<br>[root@localhost root]# iptables -A OUTPUT -p tcp --sport 30001:31000 -j ACCEPT<br>[root@localhost root]# service iptables save<br><br>最后进行保存， 然后我们再用浏览器范围下 ftp。可以正常访问</p><br><p></p><p></p><figure class="wp-block-image"><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST3/image-2.png" alt class="wp-image-107"><figcaption><br>vi /etc/vsftpd/vsftpd.conf<br>service vsftp restart<br><br></figcaption></figure><br><p></p><p></p><figure class="wp-block-image"><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/ARST/ARST3/image-3.png" alt class="wp-image-108"><figcaption>vi /etc/sysconfig/iptables<br>service iptables restart</figcaption></figure><br><p></p><p></p><p><strong>操作：</strong></p><br><p></p><p></p><p><strong>先对vsftpd服务配置进行操作：</strong><br><strong>vi /etc/vsftpd/vsftpd.conf</strong><br><br>在文末添加<br><strong>pasv_min_port=30001<br>pasv_max_port=31000</strong><br></p><br><p></p><p></p><p>重启服务CentOS6：<br><strong>service vsftp restart</strong><br><br>重启服务CentOS7：<br><strong>systemctl restart vsftpd.service</strong><br><br></p><br><p></p><p></p><p><strong>再对iptables进行配置：</strong><br><strong>vi /etc/sysconfig/iptables</strong><br>找到一个位置，然后粘贴配置：</p><br><p></p><p></p><blockquote class="wp-block-quote"><p>#easy ftp<br>-A INPUT -p tcp -m tcp --dport 21 -j ACCEPT<br>-A INPUT -p tcp -m tcp --dport 20 -j ACCEPT<br>-A INPUT -p tcp --dport 30001:31000 -j ACCEPT<br>-A OUTPUT -p tcp --sport 30001:31000 -j ACCEPT</p><p></p><p>#下面是bloger尝试但失败的配置，可以不用管，不用复制<br># hard ftp,safer but failed<br># allow all ftp incoming connections<br>#-A INPUT -p tcp --dport 21 -m state --state ESTABLISHED -j ACCEPT<br># -A OUTPUT -p tcp --sport 21 -m state --state NEW,ESTABLISHED -j ACCEPT<br>#Enable active ftp transfers<br>#-A INPUT -p tcp --dport 20 -m state --state ESTABLISHED,RELATED -j ACCEPT<br>#-A OUTPUT -p tcp --sport 20 -m state --state ESTABLISHED -j ACCEPT<br># Enable passive ftp transfers<br># -A INPUT -p tcp --sport 1024:65535 --dport 1024:65535 -m state --state ESTABLISHED -j ACCEPT<br># -A OUTPUT -p tcp --sport 1024:65535 --dport 1024:65535 -m state --state ESTABLISHED,RELATED -j ACCEPT<br></p></blockquote><br><p></p><p></p><p>重启服务CentOS6：<br><strong>service iptables restart</strong><br>重启服务CentOS7：<br><strong>systemctl restart iptables</strong></p><br><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第二周(2/521)</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC%E4%BA%8C%E5%91%A8-2-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="ARST第二周-2-521"><a href="#ARST第二周-2-521" class="headerlink" title="ARST第二周(2/521)"></a>ARST第二周(2/521)</h1><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm:"></a>Algorithm:</h2><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.5/2019.5.2" target="_blank" rel="noopener">第二周LeetCode</a></p><h2 id="Review-为了学习英文"><a href="#Review-为了学习英文" class="headerlink" title="Review:(为了学习英文)"></a>Review:(为了学习英文)</h2><p>Consider how our digital content consumption works today. Some people consume free music and TV shows daily via pirated files, illegal streams. Some consume digital content via legal, publicly-funded radio and TV station streams. Others pay for the privilege to access highly curated and secure services like Spotify, Pandora, Netflix, Hulu, and others. AR clouds will be no different.So how will we choose? I think the answer is security and convenience.</p><p>我也认为将来全面上云之后盗版资源的安全隐患会变得极其巨大，所以必须做好安全防范，最好购买服务，但是同时也最好要照顾世界上的弱势群体</p><p>Don’t Be Evil！</p><p><a href="https://medium.com/@NextRealityNews/the-future-of-the-ar-cloud-a-thousand-walled-gardens-bloom-54426fe36b8b?KGa=true" target="_blank" rel="noopener">The Future of the AR Cloud — a Thousand Walled Gardens Bloom</a></p><h2 id="Tip-主要是为了总结和归纳你在是常工作中所遇到的知识点"><a href="#Tip-主要是为了总结和归纳你在是常工作中所遇到的知识点" class="headerlink" title="Tip:(主要是为了总结和归纳你在是常工作中所遇到的知识点)"></a>Tip:(主要是为了总结和归纳你在是常工作中所遇到的知识点)</h2><p>安装VMware15Pro，在上面安装CentOS7，并设置NAT联网(以及kexue就不说了，自行学习)<br><a href="https://blog.csdn.net/zouhuu/article/details/85794779" target="_blank" rel="noopener">安装VMware15Pro</a></p><p><a href="https://blog.csdn.net/zouhuu/article/details/86530787" target="_blank" rel="noopener">VMware15上安装CentOS7</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/80897533" target="_blank" rel="noopener">设置NAT联网</a></p><h2 id="Share："><a href="#Share：" class="headerlink" title="Share："></a>Share：</h2><h3 id="1-基于上下文的自适应算术编码代码实现"><a href="#1-基于上下文的自适应算术编码代码实现" class="headerlink" title="1.基于上下文的自适应算术编码代码实现"></a>1.基于上下文的自适应算术编码代码实现</h3><p>设信源可能输出的符号是a, b, c 三个字母，构成一个二阶Markov信源，且各阶条件概率如下，试编写程序可以对任意字母序列（如abbcabcb）进行基于上下文的自适应算术编码，并进行相应的译码。<br>思路:建立合适的映射表，然后对一个字符和两个字符的时候进行特殊讨论.<br></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设信源可能输出的符号是a, b, c 三个字母，构成一个二阶Markov信源，且各阶条件概率如下，</span></span><br><span class="line"><span class="comment">// 试编写程序可以对任意字母序列（如abbcabcb）进行基于上下文的自适应算术编码，并进行相应的译码。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 经过研究发现，长度变长的时候会出现不相等的情况，分析得知，是因为算法本身的概率选取的调整问题double tp = 0.01*be + 0.99*end;</span></span><br><span class="line"><span class="comment">// 选取时应该把tp调整到大区间段(个人猜测，不会证明，但可以写一个循环自动化调参训练...当在某个长度(input)上面达到某个精度的时候输出参数)</span></span><br><span class="line"><span class="comment">// input : length  先建立 length 长的全 a 序列, length重循环  最后一个从 a+0到+1到+2(最内层),每个外层一变化都要变化一次,O(3^length)指数爆炸</span></span><br><span class="line"><span class="comment">for(double i=0.01;i&lt;1.00;i+=0.01)&#123;</span></span><br><span class="line"><span class="comment">    for()// length重for3循环，后面计算  sumOf((s&lt;t)||(s&gt;t)) / 3^length  错误率...维护错误率min的i值 看i为多少的时候l错误率最低</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">发现还有是精度问题，如果p后面变得很小的时候，那判断的时候很可能去掉几位判断</span></span><br><span class="line"><span class="comment">最近这几天事情比较多，所以就不写高精度的小数计算了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s,ans,t;</span><br><span class="line"><span class="keyword">double</span> table[<span class="number">4</span>][<span class="number">4</span>][<span class="number">4</span>];<span class="comment">// eg: c/ab [1][2][3]   c/a [1][3][0]  a [1][0][0]</span></span><br><span class="line"><span class="keyword">int</span> sl;<span class="comment">// s 的长度</span></span><br><span class="line"><span class="keyword">int</span> l; <span class="comment">// 码符号长度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">        table[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>/<span class="number">3.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j) table[i][j][<span class="number">0</span>]=<span class="number">0.5</span>;</span><br><span class="line">            <span class="keyword">else</span> table[i][j][<span class="number">0</span>]=<span class="number">0.25</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有点机械，还好sublime有多点编辑</span></span><br><span class="line">    table[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">3</span>/<span class="number">5.0</span>;    table[<span class="number">1</span>][<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>/<span class="number">5.0</span>;    table[<span class="number">1</span>][<span class="number">1</span>][<span class="number">3</span>]=<span class="number">1</span>/<span class="number">5.0</span>;</span><br><span class="line">    table[<span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>/<span class="number">4.0</span>;    table[<span class="number">1</span>][<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>/<span class="number">4.0</span>;    table[<span class="number">1</span>][<span class="number">2</span>][<span class="number">3</span>]=<span class="number">1</span>/<span class="number">2.0</span>;</span><br><span class="line">    table[<span class="number">1</span>][<span class="number">3</span>][<span class="number">1</span>]=<span class="number">1</span>/<span class="number">4.0</span>;    table[<span class="number">1</span>][<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>/<span class="number">4.0</span>;    table[<span class="number">1</span>][<span class="number">3</span>][<span class="number">3</span>]=<span class="number">1</span>/<span class="number">2.0</span>;</span><br><span class="line">    table[<span class="number">2</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>/<span class="number">2.0</span>;    table[<span class="number">2</span>][<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>/<span class="number">4.0</span>;    table[<span class="number">2</span>][<span class="number">1</span>][<span class="number">3</span>]=<span class="number">1</span>/<span class="number">4.0</span>;</span><br><span class="line">    table[<span class="number">2</span>][<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>/<span class="number">5.0</span>;    table[<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>]=<span class="number">3</span>/<span class="number">5.0</span>;    table[<span class="number">2</span>][<span class="number">2</span>][<span class="number">3</span>]=<span class="number">1</span>/<span class="number">5.0</span>;</span><br><span class="line">    table[<span class="number">2</span>][<span class="number">3</span>][<span class="number">1</span>]=<span class="number">1</span>/<span class="number">4.0</span>;    table[<span class="number">2</span>][<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>/<span class="number">4.0</span>;    table[<span class="number">2</span>][<span class="number">3</span>][<span class="number">3</span>]=<span class="number">1</span>/<span class="number">2.0</span>;</span><br><span class="line">    table[<span class="number">3</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>/<span class="number">2.0</span>;    table[<span class="number">3</span>][<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>/<span class="number">4.0</span>;    table[<span class="number">3</span>][<span class="number">1</span>][<span class="number">3</span>]=<span class="number">1</span>/<span class="number">4.0</span>;</span><br><span class="line">    table[<span class="number">3</span>][<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>/<span class="number">2.0</span>;    table[<span class="number">3</span>][<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>/<span class="number">4.0</span>;    table[<span class="number">3</span>][<span class="number">2</span>][<span class="number">3</span>]=<span class="number">1</span>/<span class="number">4.0</span>;</span><br><span class="line">    table[<span class="number">3</span>][<span class="number">3</span>][<span class="number">1</span>]=<span class="number">1</span>/<span class="number">5.0</span>;    table[<span class="number">3</span>][<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>/<span class="number">5.0</span>;    table[<span class="number">3</span>][<span class="number">3</span>][<span class="number">3</span>]=<span class="number">3</span>/<span class="number">5.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encord</span><span class="params">()</span></span>&#123;<span class="comment">// 老师用be end 算 len (概率长度) ,我觉得用p (概率长度) 算前后更方便</span></span><br><span class="line">    <span class="comment">// 维护 p ,be , end , 之后用be ，end算出概率，p算出编码长度,之后便可以编码</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"编码开始"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="keyword">int</span>(s.length());</span><br><span class="line">    <span class="keyword">double</span> be = <span class="number">0.0</span>,end = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">double</span> p = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">int</span> k = s[<span class="number">0</span>] - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> kp=<span class="number">0</span>,kpp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;end = <span class="number">1</span>/<span class="number">3.0</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">2</span>)&#123; be = <span class="number">1</span>/<span class="number">3.0</span>; end = <span class="number">2</span>/<span class="number">3.0</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> be = <span class="number">2</span>/<span class="number">3.0</span>;</span><br><span class="line">            p = <span class="number">1</span>/<span class="number">3.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// kp = s[i-1] - 'a' + 1;/// 我也是醉了，昨天状态不佳的时候写了多少bug，我以后再在状态不好时写代码我是狗</span></span><br><span class="line">            kp = k;</span><br><span class="line">            k = s[i] - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">                p *= table[kp][k][<span class="number">0</span>];</span><br><span class="line">                end = be + p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">2</span>)&#123;</span><br><span class="line">                be += p*table[kp][k<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">                p *= table[kp][k][<span class="number">0</span>];</span><br><span class="line">                <span class="comment">// p *= table[kp][k][0];  // 昨天写的bug 真牛逼..</span></span><br><span class="line">                <span class="comment">// be += table[kp][k-1][0];</span></span><br><span class="line">                end = be + p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                p *= table[kp][k][<span class="number">0</span>];</span><br><span class="line">                be = end - p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            kpp = kp;</span><br><span class="line">            kp = k;</span><br><span class="line">            <span class="comment">// kp = s[i-1] - 'a' + 1;// 昨天的bug</span></span><br><span class="line">            <span class="comment">// kpp = s[i-2] - 'a' + 1;</span></span><br><span class="line">            k = s[i] - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">                p *= table[kpp][kp][k];</span><br><span class="line">                end = be + p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="comment">// p *= table[kpp][kp][k];</span></span><br><span class="line">                <span class="comment">// be += table[kpp][kp][k-1];// 这里有bug</span></span><br><span class="line">                <span class="comment">// end = be + p;</span></span><br><span class="line">                be += p*table[kpp][kp][k<span class="number">-1</span>];<span class="comment">// 原来的长度*第一段</span></span><br><span class="line">                p *= table[kpp][kp][k];</span><br><span class="line">                end = be + p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                p *= table[kpp][kp][k];</span><br><span class="line">                be = end - p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;"s[i]"&lt;&lt;s[i]&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;"kpp:"&lt;&lt;kpp&lt;&lt;" kp:"&lt;&lt;kp&lt;&lt;" k:"&lt;&lt;k&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;"p监控:"&lt;&lt;p&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;"be:  "&lt;&lt;be&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;"end: "&lt;&lt;end&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    l = <span class="built_in">ceil</span>(<span class="built_in">log</span>(<span class="number">1</span>/p)/<span class="built_in">log</span>(<span class="number">2</span>));</span><br><span class="line">    <span class="comment">// cout&lt;&lt;"be:"&lt;&lt;be&lt;&lt;"end:"&lt;&lt;end&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// double tp = 0.5*be + 0.5*end;</span></span><br><span class="line">    <span class="keyword">double</span> tp = <span class="number">0.01</span>*be + <span class="number">0.99</span>*end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tp2;</span><br><span class="line">    ans.resize(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">        tp *= <span class="number">2</span>;</span><br><span class="line">        tp2 = (<span class="keyword">int</span>)tp;</span><br><span class="line">        tp -= tp2;</span><br><span class="line">        ans += <span class="keyword">char</span>(tp2+<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"编码长度为: "</span>&lt;&lt;l&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"编码结果为: "</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    sl = <span class="keyword">int</span>(s.length());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decord</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n译码: "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">0.0</span>;<span class="keyword">double</span> w = <span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++,w*=<span class="number">0.5</span>)&#123;</span><br><span class="line">        res += w*(ans[i]-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"译码选取的数字为:"</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;     <span class="comment">// 用a,b,c来记录下一个概率分布数组</span></span><br><span class="line">    <span class="keyword">double</span> p = <span class="number">1</span>;  <span class="comment">//还是需要记录一个p(概率长度),因为这里的table是通用映射表，需要加约束</span></span><br><span class="line">    t.resize(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">double</span> be = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sl;i++)&#123;</span><br><span class="line">        <span class="comment">// 2019年4月27日20:52:03 发现还是不能仅跟长度对比啊，没有be，end不行</span></span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;<span class="comment">// 记住左闭右开</span></span><br><span class="line">            <span class="keyword">if</span>(res&lt;<span class="number">1</span>/<span class="number">3.0</span>)&#123;t+=<span class="string">'a'</span>;a = <span class="number">1</span>;be = <span class="number">0.0</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(res&lt;<span class="number">2</span>/<span class="number">3.0</span>)&#123;t+=<span class="string">'b'</span>; a = <span class="number">2</span>; be = <span class="number">1</span>/<span class="number">3.0</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;t+=<span class="string">'c'</span>;a = <span class="number">3</span>; be = <span class="number">2</span>/<span class="number">3.0</span>;&#125;</span><br><span class="line">            p = <span class="number">1</span>/<span class="number">3.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res &lt; be + p*table[a][<span class="number">1</span>][<span class="number">0</span>])&#123;<span class="comment">//be 不变</span></span><br><span class="line">                t += <span class="string">'a'</span>; b = <span class="number">1</span>;</span><br><span class="line">                p *= table[a][<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(res &lt; be + p*(table[a][<span class="number">2</span>][<span class="number">0</span>]+table[a][<span class="number">1</span>][<span class="number">0</span>]))&#123;</span><br><span class="line">                t += <span class="string">'b'</span>; b = <span class="number">2</span>;</span><br><span class="line">                be += p*(table[a][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">                <span class="comment">// be += p*table[a][2][0]; // 2019年4月27日21:49:18今天的bug也很抠脚</span></span><br><span class="line">                p *= table[a][<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                t += <span class="string">'c'</span>; b = <span class="number">3</span>;</span><br><span class="line">                be += p*(table[a][<span class="number">1</span>][<span class="number">0</span>]+table[a][<span class="number">2</span>][<span class="number">0</span>]);</span><br><span class="line">                p *= table[a][<span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">// eg: c/ab [1][2][3]   c/a [1][3][0]  a [1][0][0]自己开始的假设碰巧有一致性，下次还是要打草稿</span></span><br><span class="line">            <span class="comment">// 要先p*=table[a][b][1]再更新a,b</span></span><br><span class="line">            <span class="keyword">if</span>(res &lt; be + p*table[a][b][<span class="number">1</span>])&#123;</span><br><span class="line">                t += <span class="string">'a'</span>;</span><br><span class="line">                p*=table[a][b][<span class="number">1</span>];<span class="comment">// 更新a,b的值</span></span><br><span class="line">                a = b; b = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(res &lt; be + p*(table[a][b][<span class="number">2</span>]+table[a][b][<span class="number">1</span>]))&#123;</span><br><span class="line">                t += <span class="string">'b'</span>;</span><br><span class="line">                be += p*table[a][b][<span class="number">1</span>];</span><br><span class="line">                p*=table[a][b][<span class="number">2</span>];</span><br><span class="line">                a = b; b = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                t += <span class="string">'c'</span>;</span><br><span class="line">                be += p*(table[a][b][<span class="number">2</span>]+table[a][b][<span class="number">1</span>]);</span><br><span class="line">                p*=table[a][b][<span class="number">3</span>];</span><br><span class="line">                a = b; b = <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"译码结果为:"</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    Init();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入需要编码的字符序列(编码符号为a,b,c):"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;table[1][1][1]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s&amp;&amp;s[<span class="number">0</span>]!=<span class="string">'#'</span>)&#123;</span><br><span class="line">        encord();</span><br><span class="line">        decord();</span><br><span class="line">        <span class="built_in">string</span> tstr;</span><br><span class="line">        tstr += ((s&lt;t)||(s&gt;t)) == <span class="number">0</span> ? <span class="string">"恭喜你,译码和源码完全一样哦"</span>:<span class="string">"Sorry,可能长度超出了默认精度范围了哦,有空试试高精度吧"</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;tstr&lt;&lt;<span class="string">"  此时源码长度为: "</span>&lt;&lt;sl&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n是否验证下一个字符序列,是则输入,否则输入#:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="2-完全统计模型的算术编码代码实现"><a href="#2-完全统计模型的算术编码代码实现" class="headerlink" title="2.完全统计模型的算术编码代码实现"></a>2.完全统计模型的算术编码代码实现</h3><p>设信源可能输出的符号是26个字母，且每个字母出现的概率未知，试编写程序可以对任意字母序列（如presentation）进行完全统计模型的算术编码，并与香农编码进行码长比较（比值）。<br>思路:对输入的整个串做分析，然后生成特定串的概率映射表，从而可以开始用最基础的Algorithm Code做题了.</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设信源可能输出的符号是26个字母，且每个字母出现的概率未知，试编写程序可以对任意字母序列</span></span><br><span class="line"><span class="comment">（如presentation）进行完全统计模型的算术编码，并与香农编码进行码长比较（比值）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2019年4月28日19:44:50 总算找完了bug，发现真的有精度问题，如果p后面变得很小的时候，那判断的时候很可能去掉几位判断</span></span><br><span class="line"><span class="comment">最近这几天事情比较多，所以就不写高精度的小数计算了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="built_in">string</span> s, ans, t;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> Myhash[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">char</span> Myhash2[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> XNlen;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;&gt; Node;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入需要编码的字符序列(编码符号为小写哦):"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s&amp;&amp;s[<span class="number">0</span>]!=<span class="string">'#'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        XNlen = <span class="number">0</span>;</span><br><span class="line">        p.clear();</span><br><span class="line">        <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">memset</span>(Myhash, <span class="number">0</span>, <span class="keyword">sizeof</span>(Myhash));</span><br><span class="line">        <span class="built_in">memset</span>(Myhash2, <span class="number">0</span>, <span class="keyword">sizeof</span>(Myhash2));</span><br><span class="line">        <span class="keyword">int</span> n = (<span class="keyword">int</span>)s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num[s[i] - <span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Init</span></span><br><span class="line">        <span class="comment">// 先建立通用的概率，然后再进行讨论</span></span><br><span class="line">        <span class="comment">// pair&lt;possibility,&lt;be,end&gt;&gt; + hash[char] = order</span></span><br><span class="line">        <span class="keyword">double</span> be = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> temd;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (num[i])</span><br><span class="line">            &#123; <span class="comment">// 不为0说明有值的</span></span><br><span class="line">                be = end;</span><br><span class="line">                temd = (<span class="keyword">double</span>)num[i] / n;</span><br><span class="line">                end = be + temd;</span><br><span class="line">                XNlen += <span class="built_in">ceil</span>(<span class="built_in">log</span>(<span class="number">1</span> / temd) / <span class="built_in">log</span>(<span class="number">2</span>)) * num[i];</span><br><span class="line">                p.pb(&#123;temd, &#123;be, end&#125;&#125;);</span><br><span class="line">                Myhash[i] = k;</span><br><span class="line">                Myhash2[k] = <span class="string">'a'</span> + i;</span><br><span class="line">                <span class="comment">//在vscode debug结果令人震惊的时候还是得手动</span></span><br><span class="line">                <span class="comment">// cout&lt;&lt;"be: "&lt;&lt;be&lt;&lt;" end: "&lt;&lt;end&lt;&lt;endl;</span></span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// p的构建好像出了问题，2019年4月28日12:34:18 来测试一下  最后发现没有出错...</span></span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; (int)p.size();i++)&#123;</span></span><br><span class="line">        <span class="comment">//     cout &lt;&lt; "p[i].x:" &lt;&lt; p[i].x &lt;&lt; " p[i].y.x:" &lt;&lt; p[i].y.x &lt;&lt; " p[i].y.y:" &lt;&lt; p[i].y.y &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// encode</span></span><br><span class="line">        <span class="keyword">double</span> pos = <span class="number">1</span>;</span><br><span class="line">        be = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tem = Myhash[s[i] - <span class="string">'a'</span>];</span><br><span class="line">            be += pos * p[tem].y.x;</span><br><span class="line">            <span class="comment">// end += pos * p[tem].y.y;  昨天的bug   今天又错了，就是不能这样操作因为可能第一次就有end = 1，可以不维护end,可以的</span></span><br><span class="line">            pos *= p[tem].x;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "tem:" &lt;&lt; tem &lt;&lt; " p[tem].y.x" &lt;&lt; p[tem].y.x &lt;&lt; " p[tem].y.y:" &lt;&lt;p[tem].y.y &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">// cout &lt;&lt; "be:" &lt;&lt; be &lt;&lt; " end:" &lt;&lt; end &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">// cout &lt;&lt; "pos监控: " &lt;&lt; pos &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        end = be + pos;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "be:" &lt;&lt; be &lt;&lt; " end:" &lt;&lt; end &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; "pos监控: " &lt;&lt; pos &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">int</span> l = <span class="built_in">ceil</span>(<span class="built_in">log</span>(<span class="number">1</span> / pos) / <span class="built_in">log</span>(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">double</span> tp = <span class="number">0.01</span> * be + <span class="number">0.99</span> * end;</span><br><span class="line">        <span class="keyword">int</span> tp2;</span><br><span class="line">        ans.resize(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tp *= <span class="number">2</span>;</span><br><span class="line">            tp2 = (<span class="keyword">int</span>)tp;</span><br><span class="line">            tp -= tp2;</span><br><span class="line">            ans += <span class="keyword">char</span>(tp2 + <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"编码长度为: "</span> &lt;&lt; l &lt;&lt; <span class="string">" 香农编码长度为:"</span> &lt;&lt; XNlen &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt; XNlen)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"WOW,Algorithm Code 果然名不虚传！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"编码结果为: "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> sl = <span class="keyword">int</span>(s.length());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 译码</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n译码: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> w = <span class="number">0.5</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++, w *= <span class="number">0.5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res += w * (ans[i] - <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"译码选取的数字为:"</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        pos = <span class="number">1</span>;</span><br><span class="line">        t.resize(<span class="number">0</span>);</span><br><span class="line">        be = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sl; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; "p[j].y.x:" &lt;&lt; pos*p[j].y.x &lt;&lt; "p[j].y.y" &lt;&lt; pos*p[j].y.y &lt;&lt; endl;</span></span><br><span class="line">                <span class="comment">// if (res &gt;= pos * p[j].y.x &amp;&amp; res &lt; pos * p[j].y.y)  // mdzz,这个p值会越来越小，所以根本不能用 这样的比较，必须还是要和be和end比较    1. 没有借鉴昨天的后果  2. 没有思考清楚参考系的结果</span></span><br><span class="line">                <span class="keyword">if</span> (res &gt;= be + pos * p[j].y.x &amp;&amp; res &lt; be + pos * p[j].y.y)</span><br><span class="line">                &#123;</span><br><span class="line">                    t += Myhash2[j]; <span class="comment">// 这里应该是j对应的反hash</span></span><br><span class="line">                    be += pos * p[j].y.x;</span><br><span class="line">                    pos *= p[j].x;</span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">// 不跳出可能再二次迭代出错</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"译码结果为: \n"</span> &lt;&lt; t &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">string</span> tstr;</span><br><span class="line">        tstr += ((s&lt;t)||(s&gt;t)) == <span class="number">0</span> ? <span class="string">"恭喜你,译码和源码完全一样哦"</span>:<span class="string">"Sorry,可能长度超出了默认精度范围了哦,有空试试高精度吧"</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;tstr&lt;&lt;<span class="string">"  此时源码长度为: "</span>&lt;&lt;sl&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n是否验证下一个字符序列,是则输入,否则输入#:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-完全统计模型的算术编码代码实现—无限长不报错版"><a href="#3-完全统计模型的算术编码代码实现—无限长不报错版" class="headerlink" title="3.完全统计模型的算术编码代码实现—无限长不报错版"></a>3.完全统计模型的算术编码代码实现—无限长不报错版</h3><p>思路：<strong>上面的代码在长度达到20多位的时候就可能会报错了，所以也就是说在10位以内绝对不会报错，所以我们可以把源码分成8个一串的批次处理，这样就可以使的整个过程完成没有错误了</strong></p><ul><li>这种方法只要不溢出string的内存,理论上来说是可以实现无限长编码的</li><li>网上查了一下，发现string最大4G</li><li>4GB是单个程序内存寻址的极限，因此也是CString的极限。</li><li>绝对够你用了(所以一个2K电影的话就分两个string吧,23333)</li><li>1.自己昨天没有分成函数模块写，导致了自己改代码改的有点难受，于是花了2个小时改代码(然后还是没有改成函数版，因为这几天太忙了，所以就不改了，读者见谅)(小编不会说自己因为写这个分享错过了晚饭时间，所以不想改成模块化了可能主要是想早点分享给你们(lan~bu yao jiao bian~))</li><li>2.对于tp的取值思考::::取[ ]最终区段的左边会因为迭代操作而一直左偏，所以精度不行，所以选最右边的样子exp积累:<ul><li>1、 以后一定要函数化模块</li><li>2、 昨天想到的只是精度问题，只是想着暴力处理扩大精度，却没有思考的扩大精度的本质其实就是分块操作</li><li>(所以分布式+集群真是大道至简，积累成就无限的可能)</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="built_in">string</span> source, ans, t;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> Myhash[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">char</span> Myhash2[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> XNlen;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;&gt; Node;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; p;</span><br><span class="line"><span class="keyword">int</span> l;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">int</span>(source.length());</span><br><span class="line">    <span class="keyword">int</span> last = <span class="number">0</span>,binlast=<span class="number">0</span>;<span class="comment">// 一开始没有想到binlast!</span></span><br><span class="line">    <span class="keyword">while</span>(len)&#123;</span><br><span class="line">        <span class="keyword">int</span> slen = len &gt;= <span class="number">8</span>? <span class="number">8</span> : len;</span><br><span class="line">        <span class="built_in">string</span> s = source.substr(last,slen);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// last += slen;</span></span><br><span class="line">        <span class="comment">// len -= slen;   // 这两个要在最最最后才搞，否则出错</span></span><br><span class="line">        <span class="comment">// string s = source.substr(last,slen);// mdzz 写在这</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"s:"</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        p.clear();</span><br><span class="line">        <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">memset</span>(Myhash, <span class="number">0</span>, <span class="keyword">sizeof</span>(Myhash));</span><br><span class="line">        <span class="built_in">memset</span>(Myhash2, <span class="number">0</span>, <span class="keyword">sizeof</span>(Myhash2));</span><br><span class="line">        <span class="keyword">int</span> n = (<span class="keyword">int</span>)s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num[s[i] - <span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Init</span></span><br><span class="line">        <span class="comment">// 先建立通用的概率，然后再进行讨论</span></span><br><span class="line">        <span class="comment">// pair&lt;possibility,&lt;be,end&gt;&gt; + hash[char] = order</span></span><br><span class="line">        <span class="keyword">double</span> be = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> temd;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (num[i])</span><br><span class="line">            &#123; <span class="comment">// 不为0说明有值的</span></span><br><span class="line">                be = end;</span><br><span class="line">                temd = (<span class="keyword">double</span>)num[i] / n;</span><br><span class="line">                end = be + temd;</span><br><span class="line">                XNlen += <span class="built_in">ceil</span>(<span class="built_in">log</span>(<span class="number">1</span> / temd) / <span class="built_in">log</span>(<span class="number">2</span>)) * num[i];</span><br><span class="line">                p.pb(&#123;temd, &#123;be, end&#125;&#125;);</span><br><span class="line">                Myhash[i] = k;</span><br><span class="line">                Myhash2[k] = <span class="string">'a'</span> + i;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// p的构建好像出了问题，2019年4月28日12:34:18 来测试一下  最后发现没有出错...</span></span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; (int)p.size();i++)&#123;</span></span><br><span class="line">        <span class="comment">//     cout &lt;&lt; "p[i].x:" &lt;&lt; p[i].x &lt;&lt; " p[i].y.x:" &lt;&lt; p[i].y.x &lt;&lt; " p[i].y.y:" &lt;&lt; p[i].y.y &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// encode</span></span><br><span class="line">        <span class="keyword">double</span> pos = <span class="number">1</span>;</span><br><span class="line">        be = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tem = Myhash[s[i] - <span class="string">'a'</span>];</span><br><span class="line">            be += pos * p[tem].y.x;</span><br><span class="line">            <span class="comment">// end += pos * p[tem].y.y;  昨天的bug   今天又错了，就是不能这样操作因为可能第一次就有end = 1，可以不维护end,可以的</span></span><br><span class="line">            pos *= p[tem].x;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "tem:" &lt;&lt; tem &lt;&lt; " p[tem].y.x" &lt;&lt; p[tem].y.x &lt;&lt; " p[tem].y.y:" &lt;&lt;p[tem].y.y &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">// cout &lt;&lt; "be:" &lt;&lt; be &lt;&lt; " end:" &lt;&lt; end &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">// cout &lt;&lt; "pos监控: " &lt;&lt; pos &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        end = be + pos;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "be:" &lt;&lt; be &lt;&lt; " end:" &lt;&lt; end &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; "pos监控: " &lt;&lt; pos &lt;&lt; endl;</span></span><br><span class="line">        l = <span class="built_in">ceil</span>(<span class="built_in">log</span>(<span class="number">1</span> / pos) / <span class="built_in">log</span>(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">double</span> tp = <span class="number">0.01</span> * be + <span class="number">0.99</span> * end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> tp2;</span><br><span class="line">        <span class="comment">// ans.resize(0);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tp *= <span class="number">2</span>;</span><br><span class="line">            tp2 = (<span class="keyword">int</span>)tp;</span><br><span class="line">            tp -= tp2;</span><br><span class="line">            ans += <span class="keyword">char</span>(tp2 + <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"编码结果为: "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> sl = <span class="keyword">int</span>(s.length());</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前串长:"</span>&lt;&lt;sl&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 译码</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n译码: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> w = <span class="number">0.5</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = binlast; i &lt; binlast+ l ; i++, w *= <span class="number">0.5</span>) <span class="comment">// 要用0 1 码长搞出来</span></span><br><span class="line">        &#123;</span><br><span class="line">            res += w * (ans[i] - <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"译码选取的数字为:"</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        pos = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// t.resize(0);</span></span><br><span class="line">        be = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sl; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; "p[j].y.x:" &lt;&lt; pos*p[j].y.x &lt;&lt; "p[j].y.y" &lt;&lt; pos*p[j].y.y &lt;&lt; endl;</span></span><br><span class="line">                <span class="comment">// if (res &gt;= pos * p[j].y.x &amp;&amp; res &lt; pos * p[j].y.y)  // mdzz,这个p值会越来越小，所以根本不能用 这样的比较，必须还是要和be和end比较    1. 没有借鉴昨天的后果  2. 没有思考清楚参考系的结果</span></span><br><span class="line">                <span class="keyword">if</span> (res &gt;= be + pos * p[j].y.x &amp;&amp; res &lt; be + pos * p[j].y.y)</span><br><span class="line">                &#123;</span><br><span class="line">                    t += Myhash2[j]; <span class="comment">// 这里应该是j对应的反hash</span></span><br><span class="line">                    be += pos * p[j].y.x;</span><br><span class="line">                    pos *= p[j].x;</span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">// 不跳出可能再二次迭代出错</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"中间源码为："</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"中间译码为："</span>&lt;&lt;t.substr(last,slen)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        last += slen;</span><br><span class="line">        len -= slen;</span><br><span class="line">        binlast += l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入需要编码的字符序列(编码符号为小写哦):"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;source&amp;&amp;source[<span class="number">0</span>]!=<span class="string">'#'</span>) &#123;</span><br><span class="line">        XNlen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        t.resize(<span class="number">0</span>);</span><br><span class="line">        ans.resize(<span class="number">0</span>);</span><br><span class="line">        solve();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"编码为："</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n编码长度是："</span>&lt;&lt;ans.length()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"译码为:"</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// 与香农比较</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"编码长度为: "</span> &lt;&lt; l &lt;&lt; <span class="string">" 香农编码长度为:"</span> &lt;&lt; XNlen &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt; XNlen)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"WOW,Algorithm Code 果然名不虚传！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> tstr;</span><br><span class="line">        tstr += ((source&lt;t)||(source&gt;t)) == <span class="number">0</span> ? <span class="string">"恭喜你,译码和源码完全一样哦"</span>:<span class="string">"Sorry,可能长度超出了默认精度范围了哦,有空试试高精度吧"</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;tstr&lt;&lt;<span class="string">"  此时源码长度为: "</span>&lt;&lt;<span class="keyword">int</span>(source.length())&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n是否验证下一个字符序列,是则输入,否则输入#:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>2019年10月11日19:42:24 更新了文章,发现主分类不用写updated时间也会由插件记录更新时间,但是我不知道记录在哪了,所以写一下比较好</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>儒家修身之道 - 2019春期中考试答案</title>
    <url>/%E5%84%92%E5%AE%B6%E4%BF%AE%E8%BA%AB%E4%B9%8B%E9%81%93-2019%E6%98%A5%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%95%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="儒家修身之道-2019春期中考试答案"><a href="#儒家修身之道-2019春期中考试答案" class="headerlink" title="儒家修身之道 - 2019春期中考试答案"></a>儒家修身之道 - 2019春期中考试答案</h1><p></p><p class="has-text-color has-background has-vivid-cyan-blue-color has-very-light-gray-background-color"><strong>我自己找资料写了两个半小时左右，希望这些答案能帮到你们节约时间以及拿到满分</strong></p><br><p></p><p></p><div class="wp-block-file"><a href="https://github.com/wolfdan666/BlogPic/blob/master/%E6%80%BB%E6%9C%89%E4%B8%80%E4%BA%9B%E4%BA%8B%E5%80%BC%E5%BE%97/mooc/%E5%90%88%E8%82%A5%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E6%85%95%E8%AF%BE%E5%B9%B3%E5%8F%B0_%E5%AD%A6%E7%94%9F%E7%AB%AF_files.zip" target="_blank" rel="noopener">合肥工业大学慕课平台_学生端_files</a><a href="https://github.com/wolfdan666/BlogPic/blob/master/%E6%80%BB%E6%9C%89%E4%B8%80%E4%BA%9B%E4%BA%8B%E5%80%BC%E5%BE%97/mooc/%E5%90%88%E8%82%A5%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E6%85%95%E8%AF%BE%E5%B9%B3%E5%8F%B0_%E5%AD%A6%E7%94%9F%E7%AB%AF_files.zip" class="wp-block-file__button" download target="_blank" rel="noopener">下载</a></div><br><p></p><p></p><div class="wp-block-file"><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/总有一些事值得/mooc/合肥工业大学慕课平台_学生端.htm" target="_blank" rel="noopener">合肥工业大学慕课平台_学生端</a><a href="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/总有一些事值得/mooc/合肥工业大学慕课平台_学生端.htm" class="wp-block-file__button" download target="_blank" rel="noopener">下载</a></div><br><p></p><p></p><p class="has-text-color has-luminous-vivid-amber-color"><strong>下载之后再打开体验更佳</strong></p><br><p></p><p></p><h2>使用说明：</h2><br><p></p><p></p><blockquote class="wp-block-quote"><p>1. 可以直接网页浏览第二个文件，体验很差</p><p>2. 下载两个文件放到同一个目录下面，解压缩第一个文件到当前目录，然后用谷歌打开html文件即可</p></blockquote><br><p></p><p></p><figure class="wp-block-image"><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E6%80%BB%E6%9C%89%E4%B8%80%E4%BA%9B%E4%BA%8B%E5%80%BC%E5%BE%97/mooc/image.png" alt class="wp-image-69"></figure><br><p></p><p></p><figure class="wp-block-image"><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E6%80%BB%E6%9C%89%E4%B8%80%E4%BA%9B%E4%BA%8B%E5%80%BC%E5%BE%97/mooc/image-1-1024x816.png" alt class="wp-image-70"></figure><br><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>总有一些事值得</category>
      </categories>
      <tags>
        <tag>总有一些事值得</tag>
      </tags>
  </entry>
  <entry>
    <title>ARST打卡第一周(1/521)</title>
    <url>/ARST%E6%89%93%E5%8D%A1%E7%AC%AC%E4%B8%80%E5%91%A8-1-521/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="ARST打卡第一周-1-521"><a href="#ARST打卡第一周-1-521" class="headerlink" title="ARST打卡第一周(1/521)"></a>ARST打卡第一周(1/521)</h1><p></p><p><strong>Algorithm:</strong></p><br><p></p><p></p><p>自己在github上面打卡，LeetCode还是第一次做，和以前在其他平台做的题不太一样，它只要提交一个cpp的solve类就行：</p><br><p></p><p></p><p class="has-text-color has-background has-medium-font-size has-vivid-green-cyan-color has-very-light-gray-background-color"><a rel="noreferrer noopener" target="_blank" href="https://link.zhihu.com/?target=https%3A//github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/2019.4.25/LeetCode1.cpp">第一题LeetCode​github.com</a></p><br><p></p><p></p><p>除了LeetCode的刷题，自己也有坚持字符串等的刷题，只是本周前段时间忙着做一个比赛的项目导致自己前几天都没有时间刷题(emmmm).</p><br><p></p><p></p><p><strong>Review:</strong></p><br><p></p><p></p><p>平常不怎么关注英文技术文章，所以第一次还找了很多个网站进行尝试（最终看了群里小伙伴的打卡的review文章），所以第一次是读简单一点的文章，以后慢慢把难度提升上去</p><br><p></p><p></p><p>The Key To Accelerating Your Coding Skills</p><br><p></p><p></p><p><a rel="noreferrer noopener" aria-label="（在新窗口打开）" href="http://blog.thefirehoseproject.com/posts/learn-to-code-and-be-self-reliant/" target="_blank">http://blog.thefirehoseproject.com/posts/learn-to-code-and-be-self-reliant/</a></p><br><p></p><p></p><p><strong>1.Become self-reliant</strong>. Having the ability to learn new coding skills without structured guidance means you no longer need to wait for anyone to help you out. This means that for the majority of what you need to learn, you can simply search the internet and read the various material on what you need to know.</p><br><p></p><p></p><p>This doesn’t mean you immediately “know” everything, but just that everything is now “figure-out-able,” so in essence, you are unstoppable.</p><br><p></p><p></p><p><strong>2.Work consistently, but don’t overwork yourself</strong>. At this phase of the game, know that you can only be productive for around 6 hours a day at the most. Working in an exhausted state will only prolong the time you spend building up to the inflection point.</p><br><p></p><p></p><p>自己感触很深的两个点在摘抄在上面了</p><br><p></p><p></p><p>1.其实有时候遇到了技术问题是很好找前辈帮忙解决的，因为有很多坑前辈们都是一步步走过来的，所以就能很快的看出你的错误并且帮你纠正，但是我个人觉得有些必须自己去亲身体验，自己去努力查资料，自己努力去想的，不到迫不得已不去打扰大神，因为这样自己才能对自己遇到的问题有清析的认识，并且在以后一般不会再出现这种问题，而且自己也能在相似的事件处理上做的更好，从而锻炼了自己真正的解决问题的能力。</p><br><p></p><p></p><p>2.对于第二点自己有切身的体会，因为自己经常进行算法训练，有时候状态很好，一下子就能写出思路和代码，有时候很累的时候，半天想不出思路，而且就算想出了一些常规的思路，但是在很累的时候写出来的基本上都是bug，等到状态好一点的时候再把bug改回来，或者彻底推翻重写，真的是浪费了时间，又没有好好休息，从而延长了自己积累到拐点的时间。</p><br><p></p><p></p><p><strong>Tip：(学习一个技术技巧)</strong></p><br><p></p><p></p><p>如何在Debian 9上安装和使用Docker​<br><a href="https://www.howtoing.com/how-to-install-and-use-docker-on-debian-9" target="_blank" rel="noopener">https://www.howtoing.com/how-to-install-and-use-docker-on-debian-9</a></p><br><p></p><p></p><h2></h2><br><p></p><p></p><p><strong>Share：</strong></p><br><p></p><p></p><p><strong>Android开发---如何在assets文件下只播放一首歌</strong></p><br><p></p><p></p><p><strong>环境：项目需要嵌入多个音频文件</strong></p><br><p></p><p></p><p><strong>问题:</strong></p><br><p></p><p></p><p><strong>1.使用assets播放音频的时候用固定的套路会把整个文件播放完，</strong></p><br><p></p><p></p><p><strong>2.用R.raw.MusicName无法在某些类中使用(应该是我Java太菜了，所以在要调用的那个类中不能用R.raw.MusicName)</strong></p><br><p></p><p></p><p><strong>解决方案：</strong>对着函数按ctrl+左键查看setDataSource函数</p><br><p></p><p></p><p>可以看到length参数，如果按照一般使用setDataSource的方法，我们会使用fileDescriptor.getStartOffset()用来赋值给length，那么这样就会在语音播报的时候播报整个assets文件夹下面的音乐</p><br><p></p><p>&lt;p&gt;而且看@param说明可以知道length的单位是字节，所以我采用了一个笨办法，就是依次查看每一首歌的长度，从而得到了参数值，然后写成selectSong()函数(耗子叔说要利用自己的计算机思维，多做自动化工作)，然后完成调用。巧妙地解决了自己的项目需求。&lt;/p&gt;<br></p><p><pre class="wp-block-syntaxhighlighter-code">   // 按ctrl+左键查看setDataSource函数<br>    /**</pre></p><pre><code> * Sets the data source (FileDescriptor) to use.  The FileDescriptor must be
 * seekable (N.B. a LocalSocket is not seekable). It is the caller&#39;s responsibility
 * to close the file descriptor. It is safe to do so as soon as this call returns.
 *
 * @param fd the FileDescriptor for the file you want to play
 * @param offset the offset into the file where the data to be played starts, in bytes
 * @param length the length in bytes of the data to be played
 * @throws IllegalStateException if it is called in an invalid state
 * @throws IllegalArgumentException if fd is not a valid FileDescriptor
 * @throws IOException if fd can not be read
 */
public void setDataSource(FileDescriptor fd, long offset, long length)
        throws IOException, IllegalArgumentException, IllegalStateException {
    _setDataSource(fd, offset, length);
}
</code></pre><p>// 调用的地方<br>AssetManager assetManager;<br>MediaPlayer player = null;<br>player = new MediaPlayer();<br>assetManager = getResources().getAssets();<br>try {<br>String song = “”;<br>int [] k={0};<br>song += selectSong(flag,k);<br>AssetFileDescriptor fileDescriptor = assetManager.openFd(song);<br>// player.setDataSource(fileDescriptor.getFileDescriptor(), fileDescriptor.getStartOffset(), fileDescriptor.getStartOffset());<br>player.setDataSource(fileDescriptor.getFileDescriptor(), fileDescriptor.getStartOffset(),k[0]);<br>player.prepare();<br>player.start();<br>} catch (IOException e) {<br>e.printStackTrace();<br>}</p><p>// 支持函数<br>private String selectSong(char c,int[] k) {<br>String song = “”;<br>if(c==’a’) {<br>song += “不要露出您的牙齿哟.mp3”;//6408<br>k[0] = 6408;<br>}<br>else if(c==’b’) {<br>song += “嘴角微微上扬O.mp3”;//5616<br>k[0] = 5616;<br>}<br>else if(c==’c’) {<br>song += “恭喜你成功习得笑不露齿.mp3”;<br>k[0]=5976;<br>}<br>else if(c==’d’) {<br>song +=”咧开嘴巴开心大笑.mp3”;//4464<br>k[0] = 4464;<br>}<br>else if(c==’e’) {<br>song +=”不妨笑的更快乐一点.mp3”;//6624<br>k[0] = 6624;<br>}<br>else if(c==’f’) {<br>song +=”今天的大笑完成了哦.mp3”;//4752<br>k[0] = 4752;<br>}<br>else if(c==’g’) {<br>song +=”左眼闭紧哟.mp3”;//3528<br>k[0] = 3528;<br>}<br>else if(c==’h’) {<br>song +=”右眼瞪大点.mp3”;//3384<br>k[0] = 3384;<br>}<br>else if(c==’i’) {<br>song +=”太好了，得到了一张俏皮图.mp3”;//6624<br>k[0] = 6624;<br>}<br>else if(c==’j’) {<br>song +=”右眼闭紧哟.mp3”;//3024<br>k[0] = 3024;<br>}<br>else if(c==’k’) {<br>song +=”左眼瞪大点.mp3”;//3528<br>k[0] = 3528;<br>}<br>else if(c==’l’) {<br>song +=”哟，我有被你电到哦.mp3”;//4896<br>k[0] = 4896;<br>}<br>else if(c==’m’) {<br>song +=”张大嘴巴“O”一声.mp3”;//5616<br>k[0] = 5616;<br>}<br>else if(c==’n’) {<br>song +=”眼睛瞪圆圆.mp3”;//3384<br>k[0] = 3384;<br>}<br>else if(c==’o’) {<br>song +=”惊讶表情图获取了哟.mp3”;//5472<br>k[0] = 5472;<br>}<br>return song;<br>}&lt;/pre&gt;<br></p><p></p><figure class="wp-block-image"><img data-src="https://pic1.zhimg.com/80/v2-63df53f1d5f3d735c06b581473b36b4c_hd.jpg" alt><figcaption>项目图片</figcaption></figure><br><p></p><p></p><figure class="wp-block-image"><img data-src="https://pic1.zhimg.com/80/v2-d2e2b4cb2094585089ea53119cff29d0_hd.jpg" alt><figcaption>查看属性，得到字节大小</figcaption></figure><br><p></p><p></p><p><strong>感想：</strong></p><br><p></p><p></p><p>1. 感觉在知乎写文章的体验十分好(对比以前自己在简书和CSDN的写作体验)</p><br><p></p><p></p><p>2. Review读文章感觉自己英语水平很差劲，然后读久了感觉有点累，所以得多练习</p><br><p></p><p></p><p>3. 自己都20多的人了，还只是学了计算机领域的一点点皮毛，而且感觉这个ARST打卡很锻炼自己，也符合自己要成为一个技术专家(将来解决计算界的一些难题)的理想，所以决定把这个每周打卡进行10年，也就是365/7*10=521周，现在是第一周(猛地发现原来十年是个如此浪漫的数字)</p><br><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ARST</category>
      </categories>
      <tags>
        <tag>ARST</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年如何注册谷歌账号</title>
    <url>/2019%E5%B9%B4%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E8%B0%B7%E6%AD%8C%E8%B4%A6%E5%8F%B7/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><h1 id="2019年如何注册谷歌账号"><a href="#2019年如何注册谷歌账号" class="headerlink" title="2019年如何注册谷歌账号"></a>2019年如何注册谷歌账号</h1><p></p><p>现在谷歌账号注册对中国区用户很不友好，你如果用电脑端去网页注册，那么你的手机号不管注册过没有，你很大几率得到的是下图</p><br><p></p><p></p><figure class="wp-block-image"><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E6%80%BB%E6%9C%89%E4%B8%80%E4%BA%9B%E4%BA%8B%E5%80%BC%E5%BE%97/google%E8%B4%A6%E5%8F%B7/image-1.png" alt class="wp-image-37"><figcaption>无法验证</figcaption></figure><br><p></p><p></p><p>小编在各大网站平台摸爬滚打2个小时，终于找到了解决方案：</p><br><p></p><p></p><p>通过手机连上vpn，然后用APKPure下载Gmail</p><br><p></p><p></p><p>1.vpn：使用superVPN等，自行下载吧(因为这里不能传apk文件啊)</p><br><p></p><p></p><p>（自行网上下载）</p><br><p></p><p></p><p>2.<strong>有了VPN肯定能下载APKPure和Gmail，所以go on下一步---注册的大正题</strong></p><br><p></p><p></p><p>进入Gmail，然后依次 <strong>点击添加用户 Google</strong></p><br><p></p><p></p><p><strong>等待核对信息 然后点创建账号 </strong>然后就可以<strong>正常用刚刚在网页端报错的手机号 创建Google账号了</strong></p><br><p></p><p></p><p></p><br><p></p><p></p><p></p><br><p></p><p></p><p>之后就可以开心地用 网页端登入谷歌账号了啊</p><br><p></p><p></p><figure class="wp-block-image"><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E6%80%BB%E6%9C%89%E4%B8%80%E4%BA%9B%E4%BA%8B%E5%80%BC%E5%BE%97/google%E8%B4%A6%E5%8F%B7/image-2.png" alt class="wp-image-38"><figcaption>happy<br></figcaption></figure><br><p></p><p></p><p></p><br><p></p><p></p><p></p><br><p></p><p></p><p></p><br><p></p><p></p><p><strong>结语：现在很多人用卖谷歌账号赚钱，更有甚者给出错误教程，然后说别人操作不对，让别人给他转100块再帮别人创建账号，我觉得这是真的黑啊</strong></p><br><p></p><p></p><p></p><br><p></p><p></p><p>所以想避免以后“搞机”（软硬件等）路上不被黑，</p><br><p></p><p></p><p>就收藏小编的网站：<strong>wolfdan.cn</strong></p><br><p></p><p></p><p></p><br><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>有些事情总是值得</category>
      </categories>
      <tags>
        <tag>有些事情总是值得</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑手机端同步的电子阅读器</title>
    <url>/%E7%94%B5%E8%84%91%E6%89%8B%E6%9C%BA%E7%AB%AF%E5%90%8C%E6%AD%A5%E7%9A%84%E7%94%B5%E5%AD%90%E9%98%85%E8%AF%BB%E5%99%A8/</url>
    <content><![CDATA[<!-- build time:Sun Nov 15 2020 23:49:59 GMT+0800 (中国标准时间) --><p></p><h4><div>此文由来和自我想法（可跳过）</div></h4><br><p></p><p></p><p>今天给大家推荐一个自己找了比较久的的电子阅读器，为什么我要推荐一个电脑手机端同步的阅读器呢？</p><br><p></p><p><ol><li><strong>手机端移动使用</strong> 和 <strong>电脑端长时间护眼+快速笔记+浏览使用</strong></li><li>流行的 <strong>掌阅</strong> 和 <strong>网易蜗牛阅读</strong> 都是我用得比较久的两款阅读器，但是<strong>无奈没有多端同步，加上自己想用电脑看书</strong>，找了很久才找到，<strong>觉得一定有人和我有相同需求</strong>，于是分享给大家</li></ol><br></p><p></p><h3>进入分享正文</h3><br><p></p><p><ol><li>这款软件就是 <strong>京东阅读 </strong>然后 <strong>上图说话</strong></li></ol><br></p><p></p><p></p><div>声明：本人非京东员工，仅一个热心分享</div><p></p><br><p></p><p><ul><li><a href="https://cread.jd.com/custom/custom_pcDownload.action" target="_blank" rel="noopener">京东读书</a></li></ul><br></p><p></p><figure class="wp-block-image"><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E6%80%BB%E6%9C%89%E4%B8%80%E4%BA%9B%E4%BA%8B%E5%80%BC%E5%BE%97/%E4%BA%AC%E4%B8%9C%E9%98%85%E8%AF%BB/image-8-1024x608.png" alt class="wp-image-24"></figure><br><p></p><p></p><p></p><div>2.云同步演示（实现京东读书手机端电脑端书籍同步（此软件比起友商的稀有之处））</div><p></p><br><p></p><p></p><p></p><br><p></p><p></p><div class="wp-block-image"><figure class="aligncenter"><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E6%80%BB%E6%9C%89%E4%B8%80%E4%BA%9B%E4%BA%8B%E5%80%BC%E5%BE%97/%E4%BA%AC%E4%B8%9C%E9%98%85%E8%AF%BB/image-9.png" alt class="wp-image-25"><figcaption><br><strong>上传</strong></figcaption></figure></div><br><p></p><p></p><figure class="wp-block-image"><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E6%80%BB%E6%9C%89%E4%B8%80%E4%BA%9B%E4%BA%8B%E5%80%BC%E5%BE%97/%E4%BA%AC%E4%B8%9C%E9%98%85%E8%AF%BB/DHT5BC4WIHWBPGECJ.png" alt class="wp-image-27"></figure><br><p></p><p></p><p><strong>于是乎</strong></p><br><p></p><p></p><div class="wp-block-image"><figure class="aligncenter"><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/%E6%80%BB%E6%9C%89%E4%B8%80%E4%BA%9B%E4%BA%8B%E5%80%BC%E5%BE%97/%E4%BA%AC%E4%B8%9C%E9%98%85%E8%AF%BB/image-10.png" alt class="wp-image-26"><figcaption><strong>成功</strong><br></figcaption></figure></div><br><p></p><p></p><p><br><strong>nice 兄弟，来愉快地阅读吧</strong></p><div><br></div><p></p><br><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>总有一些事值得</category>
      </categories>
      <tags>
        <tag>总有一些事值得</tag>
      </tags>
  </entry>
</search>
