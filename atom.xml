<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>单林敏的博客</title>
  
  <subtitle>wolfdan&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wolfdan.cn/"/>
  <updated>2021-04-04T07:25:39.297Z</updated>
  <id>https://www.wolfdan.cn/</id>
  
  <author>
    <name>单林敏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ARST打卡第100周[100/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC100%E5%91%A8-100-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第100周-100-521/</id>
    <published>2021-04-04T06:30:00.000Z</published>
    <updated>2021-04-04T07:25:39.297Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/1771_%E7%94%B1%E5%AD%90%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E7%9A%84%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2%E7%9A%84%E9%95%BF%E5%BA%A6.cpp" target="_blank" rel="noopener">LeetCode/1771_由子序列构造的最长回文串的长度</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：怎么才能活的更幸福？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=796424499&bvid=BV13C4y1b7Pn&cid=213959236&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>分心使人产生不幸福的感觉<br>所以专注当下在做的事情，让人感到幸福<br>（视频中的实验数据表明人在做爱的时候分心的比例是最小的</p><p><del>好像是二次分享，但是感觉这个TED值得多次看</del></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/jiatingqiang/article/details/6437496" target="_blank" rel="noopener">list_entry()详解</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>《Linux内核设计与实现》—读书心得上</p><p><img data-src="https://cdn.jsdelivr.net/gh/wolfdan666/BlogPic/books/Linux内核设计与实现.jpg" width="20%" height="20%"></p><p>读了这本书的前10章，读了一半了<br>从内核的介绍—详细地介绍了Linux来源和发展<br>到进程调度,系统调用和数据结构—让我明白了Linux高效的实现和设计的优美<br>然后是Linux中断机制和锁机制—让我感受到了Linux如何妥善地处理所有的外设请求以及保证所有的事情都尽量完美地运转的，当然也看到了中断下半部中糟糕的命名(tasklet，tq等)，让人误以为回到了进程调度…</p><p>总得来说，这本书上半部分生动有趣，而又详细合理地介绍了Linux对于进程，中断的巧妙设计与管理，也让我们对Linux内核代码的可维护性和一些机智操作叹为观止，好书！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/1771_由子序列构造的最长回文串的长度 TED演讲：怎么才能活的更幸福？ list_entry()详解 《Linux内核设计与实现》--读书心得上
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第99周[99/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC99%E5%91%A8-99-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第99周-99-521/</id>
    <published>2021-03-28T09:42:10.000Z</published>
    <updated>2021-03-28T10:08:35.750Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm-lru实现"><a href="#Algorithm-lru实现" class="headerlink" title="Algorithm-lru实现"></a>Algorithm-lru实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;::iterator &gt; cache_map;</span><br><span class="line">    <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; cache_list;</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    LRUCache(<span class="keyword">int</span> cap_v) : cap(cap_v) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;::iterator &gt;::iterator it = cache_map.find(key);</span><br><span class="line">        <span class="keyword">if</span> (it != cache_map.end()) &#123;</span><br><span class="line">            <span class="comment">// 利用del来赋值</span></span><br><span class="line">            <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;::iterator del = it-&gt;second;</span><br><span class="line">            del-&gt;second = val;</span><br><span class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmp = *del;</span><br><span class="line">            cache_list.erase(del);</span><br><span class="line">            cache_list.push_front(tmp);</span><br><span class="line"></span><br><span class="line">            cache_map[key] = cache_list.begin();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmp = make_pair(key, val);</span><br><span class="line">            <span class="keyword">if</span> (cache_map.size() &gt;= cap) &#123;</span><br><span class="line">                <span class="keyword">int</span> del_key = cache_list.back().first;</span><br><span class="line">                cache_list.pop_back();</span><br><span class="line">                <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;::iterator&gt;::iterator del_it = </span><br><span class="line">                    cache_map.find(del_key);</span><br><span class="line">                cache_map.erase(del_it);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            cache_list.push_front(tmp);</span><br><span class="line">            cache_map[key] = cache_list.begin();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret_val = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;::iterator &gt;::iterator it = cache_map.find(key);</span><br><span class="line">        <span class="comment">// 找到则返回对应的val</span></span><br><span class="line">        <span class="keyword">if</span> (it != cache_map.end()) &#123;</span><br><span class="line">            ret_val = it-&gt;second-&gt;second;</span><br><span class="line">            <span class="comment">// 更新</span></span><br><span class="line">            <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;::iterator del = it-&gt;second;</span><br><span class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmp = *del;</span><br><span class="line">            cache_list.erase(del);</span><br><span class="line">            cache_list.push_front(tmp);</span><br><span class="line">            cache_map[key] = cache_list.begin();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret_val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">LRUCache <span class="title">cache</span><span class="params">( <span class="number">2</span> <span class="comment">/* 缓存容量 */</span> )</span></span>;</span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 返回 1</span></span><br><span class="line">    cache.put(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// 该操作会使得关键字 2 作废</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">    cache.put(<span class="number">4</span>, <span class="number">4</span>); <span class="comment">// 该操作会使得关键字 1 作废</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 返回 3</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 返回 4</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>20岁，我们要明白的道理</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=247291352&bvid=BV1Gv41187eD&cid=314870198&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>相信自己求证的东西，相信自己一定能变得更好</p><p>不要相信任何人，包括自己，然后去保持疑惑，去求证疑惑，最终相信自己求证出来的东西，然后不断实践，让自己变得更好</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.jianshu.com/p/9c3784d8d8ad" target="_blank" rel="noopener">memcpy与memmove的区别</a></p><h1 id="Share-前中后序非递归二叉树遍历"><a href="#Share-前中后序非递归二叉树遍历" class="headerlink" title="Share-前中后序非递归二叉树遍历"></a>Share-前中后序非递归二叉树遍历</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">共同点：</span></span><br><span class="line"><span class="comment">- 用栈模拟递归</span></span><br><span class="line"><span class="comment">- 都是在为根时输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bt_node</span>* <span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bt_node</span>* <span class="title">rchild</span>;</span></span><br><span class="line">&#125; <span class="keyword">bt_node_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_order_without_dfs</span><span class="params">(<span class="keyword">bt_node_t</span>* root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 空树</span></span><br><span class="line">    <span class="keyword">if</span> (!root)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bt_node_t</span>* p = root;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">bt_node_t</span>*&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty() || p) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            <span class="comment">/* 根---后面的左，右变成根的时候也走这里 */</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; p-&gt;data;</span><br><span class="line">            s.push(p);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 右 */</span></span><br><span class="line">            p = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">in_order_whitout_dfs</span><span class="params">(<span class="keyword">bt_node_t</span>* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bt_node_t</span>* p = root;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">bt_node_t</span>*&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty() || p) &#123;</span><br><span class="line">        <span class="comment">// 左和根都放进去--先根后左，正好可以出栈先左后根</span></span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            s.push(p);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; p-&gt;data;</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">last_order_whitout_dfs</span><span class="params">(<span class="keyword">bt_node_t</span>* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">bt_node_t</span>*&gt; s;</span><br><span class="line">    <span class="comment">/* 记录当前访问节点 和 上次访问节点 */</span></span><br><span class="line">    <span class="keyword">bt_node_t</span>* p_cur, * p_last_visit;</span><br><span class="line"></span><br><span class="line">    p_cur = root;</span><br><span class="line">    p_last_visit = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 先把cur移动到最左边，并且把根都记录 */</span></span><br><span class="line">    <span class="keyword">while</span> (p_cur) &#123;</span><br><span class="line">        s.push(p_cur);</span><br><span class="line">        p_cur = p_cur-&gt;lchild;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        <span class="comment">/* 每次都while到没有，所以这里的p_cur为空 */</span></span><br><span class="line">        p_cur = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 左边访问完了，现在看右边没有 or 已经访问过的情况 */</span></span><br><span class="line">        <span class="keyword">if</span> (p_cur-&gt;rchild == <span class="literal">NULL</span> || p_cur-&gt;rchild == p_last_visit) &#123;</span><br><span class="line">            <span class="comment">/* 现在可以输出根了 */</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; p_cur-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            p_last_visit = p_cur;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 有右节点且未被访问 */</span></span><br><span class="line">            s.push(p_cur);</span><br><span class="line">            <span class="comment">/* 进入右子树访问 */</span></span><br><span class="line">            p_cur = p_cur-&gt;rchild;</span><br><span class="line">            <span class="keyword">while</span> (p_cur) &#123;</span><br><span class="line">                s.push(p_cur);</span><br><span class="line">                p_cur = p_cur-&gt;lchild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lru实现 20岁，我们要明白的道理 memcpy与memmove的区别 前中后序非递归二叉树遍历
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第98周[98/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC98%E5%91%A8-98-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第98周-98-521/</id>
    <published>2021-03-21T05:36:06.000Z</published>
    <updated>2021-03-21T08:40:06.086Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/73_%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6.cpp" target="_blank" rel="noopener">LeetCode/73_矩阵置零</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：如何避免被他人情绪传染？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=502085753&bvid=BV1kN411Q7jh&cid=307665272&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><ol><li>学会认知重估，重新构建心理预期。把“他不喜欢我，他在我面前看上去总是那么沮丧”的想法，变成“他可能看上去不高兴，但他会花时间引导我解决问题”。</li><li>接受——分三个步骤：<ol><li>OK：接纳，抛开对对方的偏见与情绪</li><li>SO WHAT：拉开情绪与事件的距离，就事论事</li><li>now what：解决问题本身。</li></ol></li></ol><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://docs.djangoproject.com/zh-hans/3.1/intro/tutorial01/" target="_blank" rel="noopener">编写你的第一个 Django 应用</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>关于猎鹰与冬兵第一集的思考</p><p>思考地球消失一半人又出现一半人的世界，人均资源多的时候，人们可以过得很轻松，但是人均资源变少了之后，恶意竞争变多了，内卷化严重，人们不得不更拼命地工作只为了保住原来的生活</p><p>所以我们现在这个世界如此内卷，不正如猎鹰与冬兵第一集里面展现的猎鹰家的生活窘境吗</p><p>我们的世界会好吗？大家都能过上幸福的生活吗？</p><p>想到这些，就感觉自己的生活上的小烦恼好像没有什么烦恼了</p><p>深思了很久很久，是用科技让人们的娱乐时光更加快乐呢？还是让世界的保驾护航变得更高效？</p><p><strong>我不知道，我只想到了魁拔里面海问香说的，当自己摇摆不定的时候，就去做让自己内心真正感动的事情</strong></p><p><strong>做那个人的战士，和他一同去经历失败</strong></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/73_矩阵置零 TED演讲：如何避免被他人情绪传染？ 编写你的第一个 Django 应用 关于猎鹰与冬兵第一集的思考
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第97周[97/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC97%E5%91%A8-97-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第97周-97-521/</id>
    <published>2021-03-14T06:28:04.000Z</published>
    <updated>2021-03-14T06:54:15.055Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/706_%E8%AE%BE%E8%AE%A1%E5%93%88%E5%B8%8C%E6%98%A0%E5%B0%84.cpp" target="_blank" rel="noopener">简单实现hashtable</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>如何让你的智力提高10倍？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=844512427&bvid=BV1L54y1a7th&cid=309489369&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>每年读十本难读的书，锻炼自己的思维</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.cnblogs.com/zdz8207/p/Linux-Centos-mail-root-sendmail.html" target="_blank" rel="noopener">You have new mail in /var/spool/mail/root提示，查看，关闭邮件</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><h2 id="Centos7安装python3以及后续兼容yum"><a href="#Centos7安装python3以及后续兼容yum" class="headerlink" title="Centos7安装python3以及后续兼容yum"></a>Centos7安装python3以及后续兼容yum</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 下载epel：</span></span><br><span class="line">sudo yum install epel-release</span><br><span class="line"><span class="comment">## 安装python3：(python36是python3加一些pip等组件)，可以去掉 -y 查看</span></span><br><span class="line">sudo yum install -y python36</span><br><span class="line">[root@lm graduate_work]<span class="comment"># python3 --version</span></span><br><span class="line">Python 3.6.8</span><br></pre></td></tr></table></figure><h3 id="修改默认的python和pip版本-并更改yum的python版本为python2-7"><a href="#修改默认的python和pip版本-并更改yum的python版本为python2-7" class="headerlink" title="修改默认的python和pip版本,并更改yum的python版本为python2.7"></a>修改默认的python和pip版本,并更改yum的python版本为python2.7</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">[root@lm build]<span class="comment"># whereis python</span></span><br><span class="line">python: /usr/bin/python /usr/bin/python2.7 /usr/bin/python3.6 /usr/bin/python3.6m /usr/lib/python2.7 /usr/lib/python3.6 /usr/lib64/python2.7 /usr/lib64/python3.6 /etc/python /usr/include/python2.7 /usr/include/python3.6m /usr/share/man/man1/python.1.gz</span><br><span class="line">[root@lm build]<span class="comment"># ll /usr/bin/python</span></span><br><span class="line">lrwxrwxrwx. 1 root root 7 2月  17 01:36 /usr/bin/python -&gt; python2</span><br><span class="line">[root@lm build]<span class="comment"># ln -s /usr/bin/python3.6 /usr/bin/python</span></span><br><span class="line">ln: 无法创建符号链接<span class="string">"/usr/bin/python"</span>: 文件已存在</span><br><span class="line">[root@lm build]<span class="comment"># rm /usr/bin/python</span></span><br><span class="line">rm：是否删除符号链接 <span class="string">"/usr/bin/python"</span>？y</span><br><span class="line">[root@lm build]<span class="comment"># ln -s /usr/bin/python3.6 /usr/bin/python</span></span><br><span class="line">[root@lm build]<span class="comment"># python --version</span></span><br><span class="line">Python 3.6.8</span><br><span class="line">[root@lm build]<span class="comment"># pip --version</span></span><br><span class="line">bash: pip: 未找到命令</span><br><span class="line">[root@lm build]<span class="comment"># whereis pip</span></span><br><span class="line">pip: /usr/bin/pip3.6</span><br><span class="line">[root@lm build]<span class="comment"># ln -s /usr/bin/pip3.6 /usr/bin/pip</span></span><br><span class="line">[root@lm build]<span class="comment"># pip --version</span></span><br><span class="line">pip 9.0.3 from /usr/lib/python3.6/site-packages (python 3.6)</span><br><span class="line"></span><br><span class="line">[root@lm build]<span class="comment"># yum</span></span><br><span class="line">  File <span class="string">"/usr/bin/yum"</span>, line 30</span><br><span class="line">    except KeyboardInterrupt, e:</span><br><span class="line">                            ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line">[root@lm build]<span class="comment"># vim /usr/bin/yum</span></span><br><span class="line">[root@lm build]<span class="comment"># cat /usr/bin/yum | head -1</span></span><br><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line">Downloading packages:</span><br><span class="line">  File <span class="string">"/usr/libexec/urlgrabber-ext-down"</span>, line 28</span><br><span class="line">    except OSError, e:</span><br><span class="line">                  ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line">  File <span class="string">"/usr/libexec/urlgrabber-ext-down"</span>, line 28</span><br><span class="line">    except OSError, e:</span><br><span class="line">                  ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">由于用户取消而退出</span><br><span class="line">[root@lm build]<span class="comment"># vim /usr/libexec/urlgrabber-ext-down</span></span><br><span class="line">[root@lm build]<span class="comment"># cat /usr/libexec/urlgrabber-ext-down | head -1</span></span><br><span class="line"><span class="comment">#! /usr/bin/python2.7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">您在 /var/spool/mail/root 中有邮件</span><br><span class="line">[root@lm download]<span class="comment"># cat /var/spool/mail/root</span></span><br><span class="line">From root@lm.localdomain  Fri Mar 12 14:01:01 2021</span><br><span class="line">Return-Path: &lt;root@lm.localdomain&gt;</span><br><span class="line">X-Original-To: root</span><br><span class="line">Delivered-To: root@lm.localdomain</span><br><span class="line">Received: by lm.localdomain (Postfix, from userid 0)</span><br><span class="line">        id 488F220BCEB8; Fri, 12 Mar 2021 14:01:01 +0800 (CST)</span><br><span class="line">From: <span class="string">"(Cron Daemon)"</span> &lt;root@lm.localdomain&gt;</span><br><span class="line">To: root@lm.localdomain</span><br><span class="line">Subject: Cron &lt;root@lm&gt; run-parts /etc/cron.hourly</span><br><span class="line">Content-Type: text/plain; charset=UTF-8</span><br><span class="line">Auto-Submitted: auto-generated</span><br><span class="line">Precedence: bulk</span><br><span class="line">X-Cron-Env: &lt;XDG_SESSION_ID=165&gt;</span><br><span class="line">X-Cron-Env: &lt;XDG_RUNTIME_DIR=/run/user/0&gt;</span><br><span class="line">X-Cron-Env: &lt;LANG=en_US.UTF-8&gt;</span><br><span class="line">X-Cron-Env: &lt;SHELL=/bin/bash&gt;</span><br><span class="line">X-Cron-Env: &lt;PATH=/sbin:/bin:/usr/sbin:/usr/bin&gt;</span><br><span class="line">X-Cron-Env: &lt;MAILTO=root&gt;</span><br><span class="line">X-Cron-Env: &lt;HOME=/root&gt;</span><br><span class="line">X-Cron-Env: &lt;LOGNAME=root&gt;</span><br><span class="line">X-Cron-Env: &lt;USER=root&gt;</span><br><span class="line">Message-Id: &lt;20210312060101.488F220BCEB8@lm.localdomain&gt;</span><br><span class="line">Date: Fri, 12 Mar 2021 14:01:01 +0800 (CST)</span><br><span class="line"></span><br><span class="line">/etc/cron.hourly/0yum-hourly.cron:</span><br><span class="line"></span><br><span class="line">  File <span class="string">"/usr/sbin/yum-cron"</span>, line 256</span><br><span class="line">    except Exception, e:</span><br><span class="line">                    ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line">[root@lm download]<span class="comment"># vim /usr/sbin/yum-cron </span></span><br><span class="line">[root@lm download]<span class="comment"># cat /usr/sbin/yum-cron | head -n 1 </span></span><br><span class="line"><span class="comment">#!/usr/bin/python2.7 -tt</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      简单实现hashtable 如何让你的智力提高10倍？ You have new mail in /var/spool/mail/root提示，查看，关闭邮件 Centos7安装python3以及后续兼容yum
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第96周[96/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC96%E5%91%A8-96-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第96周-96-521/</id>
    <published>2021-03-06T08:43:45.000Z</published>
    <updated>2021-03-06T09:02:21.772Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algotithm"><a href="#Algotithm" class="headerlink" title="Algotithm"></a>Algotithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/503_%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A02.cpp" target="_blank" rel="noopener">LeetCode/503_下一个更大元素2</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>如何应对有毒之人？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=844439637&bvid=BV1R54y1h7r4&cid=305899481&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><ol><li>尽量避开这类人</li><li>如果恶霸想要欺负你，表现得凶狠点，否则别人以为你是软柿子</li><li>如果太熟无法避免他们，表明你真实想法，多说几次</li><li>还听不进去，就远离他们（任何关系下），因为不在乎你的人不值得你付出时间精力</li></ol><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.cnblogs.com/ityouknow/p/8903975.html" target="_blank" rel="noopener">Docker Swarm</a></p><p>结合 <code>docker swarm --help</code> 服用更佳</p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/114268176?spm=1001.2014.3001.5501" target="_blank" rel="noopener">ftp下载文件失败</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/503_下一个更大元素2 如何应对有毒之人？ Docker Swarm ftp下载文件失败
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第95周[95/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC95%E5%91%A8-95-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第95周-95-521/</id>
    <published>2021-02-28T11:17:44.000Z</published>
    <updated>2021-02-28T11:51:52.769Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/896_%E5%8D%95%E8%B0%83%E6%95%B0%E5%88%97.cpp" target="_blank" rel="noopener">LeetCode/896_单调数列</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://movie.douban.com/subject/2300586/" target="_blank" rel="noopener">这个男人来自地球 The Man from Earth</a></p><p>面对一个活了一万四千年的洞穴人，各种学科的大学教授为此感到惊讶，恐怖，难受，沮丧，甚至想要立马杀死对方</p><p>他们无法容忍超越自己的家伙存在，他们怀疑他通过某种方式窃取他们的生命，他们因此而崩塌了自己学到的生物学知识，也崩塌了所有的宗教信仰，为了自己的信仰，想要诋毁这个男人，逼迫这个男人说自己是开玩笑的</p><p>所以，世界总是你看到的样子，因为你只相信你相信的东西</p><p><strong>多点包容的心态，不以物喜不以己悲，去感受这个世间所有的经历</strong></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/caoyu1221/article/details/108358157" target="_blank" rel="noopener">常见docker容易故障排除错误</a></p><p><a href="https://blog.csdn.net/baimafujinji/article/details/78810042" target="_blank" rel="noopener">在Linux中创建回环设备（loopback device）的方法</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/113945525" target="_blank" rel="noopener">安装docker-ce报错</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/896_单调数列 这个男人来自地球 The Man from Earth 常见docker容易故障排除错误 在Linux中创建回环设备（loopback device）的方法 安装docker-ce报错
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第94周[94/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC94%E5%91%A8-94-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第94周-94-521/</id>
    <published>2021-02-21T12:28:13.000Z</published>
    <updated>2021-02-21T13:02:43.908Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/face_recognition/commit/7a34e568a9e2abe782040601d4547bf0efe6e125" target="_blank" rel="noopener">视频区间时间片保存的应用</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：温和的成功哲学</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=201829274&bvid=BV1Lh411o73U&cid=225968597&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>成功的人生，是以自己喜欢的方式过自己的一生，而不是一直追逐他人的目光</p><p>世界上存在太多的偶然，并不是失败了一定是你不行</p><p>不要别人的社会地位去评价别人，甚至最好不要评价别人</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/kingroc/article/details/91517343" target="_blank" rel="noopener">OpenCV读取视频文件帧数据的同时获取该帧的时间戳</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>今年回家，发现了很多的东西</p><ul><li>外公已经多次忘记我找了女朋友，而重复让我多交朋友</li><li>硬朗的外婆也上楼很累了</li><li>父母对我们越来越好，但是我们陪伴父母的时间却越来越少</li></ul><p>所以，多陪陪家人</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      视频区间时间片保存的应用 TED演讲：温和的成功哲学 OpenCV读取视频文件帧数据的同时获取该帧的时间戳 多陪陪家人
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第93周[93/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC93%E5%91%A8-93-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第93周-93-521/</id>
    <published>2021-02-12T06:15:00.000Z</published>
    <updated>2021-02-12T09:31:06.837Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/119_%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%922.cpp" target="_blank" rel="noopener">LeetCode/119_杨辉三角2</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED-为什么有野心的女性头顶是平的？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=331531646&bvid=BV1QA411u7ft&cid=295757054&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><ul><li>头顶是平的，接受他人的拍打</li><li>和优秀的人在一起</li><li>拥抱变化</li></ul><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://zhuanlan.zhihu.com/p/24567586" target="_blank" rel="noopener">机器学习原来这么有趣！第四章：用深度学习识别人脸</a></p><h1 id="Share-新年祝福和愿望"><a href="#Share-新年祝福和愿望" class="headerlink" title="Share-新年祝福和愿望"></a>Share-新年祝福和愿望</h1><p>祝大家新春快乐，牛年大吉。<br>新的一年，多和家里人待在一起，珍惜美好的时光</p><p>新的一年，多善待每一个遇到的人，不要评判别人，因为你不知道别人经历了什么，尽量去包容，去倾听</p><p>新的一年，希望大家都平安喜乐，达成自己的目标，勇敢地去面对生活中的挑战，奥利给！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/119_杨辉三角2 TED-为什么有野心的女性头顶是平的？ 机器学习原来这么有趣！第四章：用深度学习识别人脸 新年祝福和愿望
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第92周[92/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC92%E5%91%A8-92-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第92周-92-521/</id>
    <published>2021-02-07T13:18:17.000Z</published>
    <updated>2021-02-07T13:26:53.737Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/665_%E9%9D%9E%E9%80%92%E5%87%8F%E6%95%B0%E5%88%97.cpp" target="_blank" rel="noopener">665_非递减数列</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/" target="_blank" rel="noopener">Best practices for writing Dockerfiles</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://yeasy.gitbook.io/docker_practice/" target="_blank" rel="noopener">Docker —— 从入门到实践</a></p><p><a href="https://www.infoq.cn/article/3-simple-tricks-for-smaller-docker-images" target="_blank" rel="noopener">三个技巧，将 Docker 镜像体积减小 90%</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><h2 id="shell获取文件版本号-1的含义"><a href="#shell获取文件版本号-1的含义" class="headerlink" title="shell获取文件版本号[\1的含义]"></a>shell获取文件版本号[\1的含义]</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">version=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;filename&#125;</span>"</span> | sed -r <span class="string">"s/.*([0-9]+\.[0-9]+\.[0-9]+).*/\1/g"</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">## -r 表示regex正则表达式</span></span><br><span class="line"><span class="comment">## s表示替换</span></span><br><span class="line"><span class="comment">## 最后的g表示global全部匹配</span></span><br><span class="line"><span class="comment">## .*表示匹配任意项</span></span><br><span class="line"><span class="comment">## 一个()表示放在\1中，\0表示整体，当有多个()</span></span><br><span class="line"><span class="comment">### 第一个括号放在\1中</span></span><br><span class="line"><span class="comment">### 第二个括号放在\2中</span></span><br><span class="line"><span class="comment">### 比如</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hdsad1.02.2.22"</span> | sed -r <span class="string">"s/.*([0-9]+\.[0-9]+\.[0-9]+)(\.[0-9]+).*/\1/g"</span></span><br><span class="line"><span class="comment"># 输出： 1.02.2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hdsad1.02.2.22"</span> | sed -r <span class="string">"s/.*([0-9]+\.[0-9]+\.[0-9]+)(\.[0-9]+).*/\2/g"</span></span><br><span class="line"><span class="comment"># 输出： .22</span></span><br></pre></td></tr></table></figure><h2 id="linux-shell下除了某个文件外的其他文件全部删除的命令"><a href="#linux-shell下除了某个文件外的其他文件全部删除的命令" class="headerlink" title="linux shell下除了某个文件外的其他文件全部删除的命令"></a>linux shell下除了某个文件外的其他文件全部删除的命令</h2><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/113663646" target="_blank" rel="noopener">linux shell下除了某个文件外的其他文件全部删除的命令</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      665_非递减数列 Best practices for writing Dockerfiles Docker——从入门到实践 三个技巧，将Docker镜像体积减小90% shell获取文件版本号[\1的含义] linux shell下除了某个文件外的其他文件全部删除的命令
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第91周[91/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC91%E5%91%A8-91-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第91周-91-521/</id>
    <published>2021-01-31T06:25:24.000Z</published>
    <updated>2021-01-31T07:22:55.907Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/9376e8c03a5f6e92ebe06d7b11bb191488021aa6/LeetCode/839_%E7%9B%B8%E4%BC%BC%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%84.cpp" target="_blank" rel="noopener">LeetCode/839_相似字符串组</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://docs.ceph.com/en/latest/dev/encoding/" target="_blank" rel="noopener">SERIALIZATION (ENCODE/DECODE)</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/weixin_42527719/article/details/85694544" target="_blank" rel="noopener">Python结合OpenCV视频处理、逐帧修改图片</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><h2 id="Ceph的encoding宏定义妙用"><a href="#Ceph的encoding宏定义妙用" class="headerlink" title="Ceph的encoding宏定义妙用"></a>Ceph的encoding宏定义妙用</h2><ol><li><p>宏定义do_while(false)套娃</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENCODE_START(A) \</span></span><br><span class="line">    <span class="keyword">int</span> a = A;      \</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello a=%d\n"</span>, a); \</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这中间还套娃了很多层do,while,这是我没有想到了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECODE_FINISH() \</span></span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ENCODE_START(<span class="number">100</span>)</span><br><span class="line">    DECODE_FINISH()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>震惊宏定义缩短定义的方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -----------------------------------</span></span><br><span class="line"><span class="comment">// int types</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITE_INTTYPE_ENCODER(type, etype)\</span></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(type v, bufferlist&amp; bl, <span class="keyword">uint64_t</span> features=<span class="number">0</span>)</span> </span>&#123;\</span><br><span class="line">    ceph_#<span class="meta">#etype e;                \</span></span><br><span class="line">    e = v;                                                              \</span><br><span class="line">    encode_raw(e, bl);\</span><br><span class="line">  &#125;\</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(type &amp;v, bufferlist::iterator&amp; p)</span> </span>&#123;\</span><br><span class="line">    ceph_#<span class="meta">#etype e;\</span></span><br><span class="line">    decode_raw(e, p);\</span><br><span class="line">    v = e;\</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">WRITE_INTTYPE_ENCODER(<span class="keyword">uint64_t</span>, le64)</span><br><span class="line">WRITE_INTTYPE_ENCODER(<span class="keyword">int64_t</span>, le64)</span><br><span class="line">WRITE_INTTYPE_ENCODER(<span class="keyword">uint32_t</span>, le32)</span><br><span class="line">WRITE_INTTYPE_ENCODER(<span class="keyword">int32_t</span>, le32)</span><br><span class="line">WRITE_INTTYPE_ENCODER(<span class="keyword">uint16_t</span>, le16)</span><br><span class="line">WRITE_INTTYPE_ENCODER(<span class="keyword">int16_t</span>, le16)</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/839_相似字符串组 SERIALIZATION (ENCODE/DECODE) Python结合OpenCV视频处理、逐帧修改图片 Ceph的encoding宏定义妙用
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第90周[90/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC90%E5%91%A8-90-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第90周-90-521/</id>
    <published>2021-01-24T14:14:26.000Z</published>
    <updated>2021-01-24T14:46:10.871Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/674_%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97.cpp" target="_blank" rel="noopener">LeetCode/674_最长连续递增序列</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://github.com/ageitgey/face_recognition" target="_blank" rel="noopener">ageitgey/face_recognition</a>: The world’s simplest facial recognition api for Python and the command line</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://bbs.csdn.net/topics/70034554" target="_blank" rel="noopener">怎样处理申请内存失败</a></p><h1 id="Share-VScode连接docker"><a href="#Share-VScode连接docker" class="headerlink" title="Share - VScode连接docker"></a>Share - VScode连接docker</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>经过一番调研，发现网上使用的VScode连接docker的开发环境的解决方案都是在创建docker的时候建立端口映射，这样就使得可以用VScode的remote-ssh插件访问某个自定义的端口来访问docker的22端口，但是我觉得这样还是有点复杂，而且不利于ip辨别，所以<strong>找到了一个给docker上独立ip的方法</strong></p><p>这样就可以保证不用端口映射，docker自己相当于一个完整的linux主机，有自己的ip，这样子可以直接把docker当成一个linux服务器使用，和原来没有任何区别，保持了良好的配置的一致性</p><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><p>具体操作方法如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建的时候映射ip,需要自己先给linux上的环境配置虚拟网卡</span></span><br><span class="line">docker run -itd --privileged --name your_docker_name -v /data1/your_linux_docker_share_dir:/your_docker_linux_share_dir -v /etc/hosts:/etc/hosts -v /etc/yum.repos.d/eds-mirrors.repo:/etc/yum.repos.d/eds-mirrors.repo --network dockernet --ip XX.XX.XX.133 CentOS7_your_image /usr/sbin/init</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装sshd</span></span><br><span class="line">yum install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment">## 给docker root设置密码</span></span><br><span class="line">passwd root</span><br><span class="line"></span><br><span class="line"><span class="comment">## 编辑sshd配置文件</span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment">### 取消下面这一行的注释</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动sshd</span></span><br><span class="line">systemctl start sshd</span><br></pre></td></tr></table></figure><p></p><p>之后安装一下ssh-remote连接docker就可以完成了，如果你的docker在离线环境，可以参考如下文章：<br><a href="https://www.cnblogs.com/litaozijin/p/13202992.html" target="_blank" rel="noopener">离线环境配置VScode remote-ssh</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/674_最长连续递增序列 ageitgey/face_recognition 怎样处理申请内存失败 VScode连接docker
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第89周[89/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC89%E5%91%A8-89-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第89周-89-521/</id>
    <published>2021-01-15T14:14:03.000Z</published>
    <updated>2021-01-17T09:09:09.757Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/947_%E7%A7%BB%E9%99%A4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%90%8C%E8%A1%8C%E6%88%96%E5%90%8C%E5%88%97%E7%9F%B3%E5%A4%B4.c" target="_blank" rel="noopener">LeetCode/947_移除最多的同行或同列石头</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：生命只有一次，请活得灿烂</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=586235320&bvid=BV1Ez4y1S7CW&cid=282758586&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>如果苦难必将发生，那么我们唯一能做的是改变自己面对苦难的态度</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.runoob.com/w3cnote/c-assert.html" target="_blank" rel="noopener">断言(assert)的用法</a></p><h1 id="Share-正则匹配函数封装"><a href="#Share-正则匹配函数封装" class="headerlink" title="Share - 正则匹配函数封装"></a>Share - 正则匹配函数封装</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 正则表达式匹配检查</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param [in] reg_str 正则表达式</span></span><br><span class="line"><span class="comment"> * @param [in] check_str 待检测的字符串</span></span><br><span class="line"><span class="comment"> * @return int 匹配失败返回-1，匹配成功返回0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reg_check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *reg_str, <span class="keyword">const</span> <span class="keyword">char</span> *check_str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *pattern;</span><br><span class="line">    <span class="keyword">int</span> i, ret, cflags = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">regex_t</span> reg;</span><br><span class="line">    <span class="keyword">regmatch_t</span> pm[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> nmatch = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 编译正则表达式*/</span></span><br><span class="line">    pattern = reg_str;</span><br><span class="line">    ret = regcomp(&amp;reg, pattern, cflags);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        regerror(ret, &amp;reg, ebuf, <span class="keyword">sizeof</span>(ebuf));</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s: pattern '%s' \n"</span>, ebuf, pattern);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 处理输入的数据 */</span></span><br><span class="line">    <span class="keyword">char</span> *<span class="keyword">check_str_t</span> = (<span class="keyword">char</span> *)check_str;</span><br><span class="line">    <span class="keyword">if</span> ((ret = <span class="built_in">strlen</span>(<span class="keyword">check_str_t</span>)) &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">check_str_t</span>[ret - <span class="number">1</span>] == <span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">check_str_t</span>[ret - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 对每一行应用正则表达式进行匹配 */</span></span><br><span class="line">    ret = regexec(&amp;reg, <span class="keyword">check_str_t</span>, nmatch, pm, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret == REG_NOMATCH) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        regerror(ret, &amp;reg, ebuf, <span class="keyword">sizeof</span>(ebuf));</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s: regcom('%s')\n"</span>, ebuf, <span class="keyword">check_str_t</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 输出处理结果 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmatch &amp;&amp; pm[i].rm_so != <span class="number">-1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> one_match_len = pm[i].rm_eo - pm[i].rm_so;</span><br><span class="line">        <span class="keyword">int</span> str_sz = <span class="built_in">strlen</span>(<span class="keyword">check_str_t</span>);</span><br><span class="line">        <span class="keyword">if</span> (one_match_len == str_sz) &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 释放正则表达式 */</span></span><br><span class="line">    regfree(&amp;reg);</span><br><span class="line">    <span class="keyword">return</span> flag == <span class="number">1</span> ? <span class="number">0</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 对check_str做json key的参数校验</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param [in] check_str 待检测的json key</span></span><br><span class="line"><span class="comment"> * @return int 匹配失败返回-1，匹配成功返回0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">json_key_check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *check_str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *json_str = <span class="string">"[a-zA-Z_][a-zA-Z_0-9-]*"</span>;</span><br><span class="line">    <span class="keyword">return</span> reg_check(json_str, check_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/947_移除最多的同行或同列石头 如果苦难必将发生，那么我们唯一能做的是改变自己面对苦难的态度 断言(assert)的用法 正则匹配函数封装
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第88周[88/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC88%E5%91%A8-88-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第88周-88-521/</id>
    <published>2021-01-10T06:20:24.000Z</published>
    <updated>2021-01-10T07:01:24.081Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/228_%E6%B1%87%E6%80%BB%E5%8C%BA%E9%97%B4.cpp" target="_blank" rel="noopener">LeetCode/228_汇总区间</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>托尼罗宾斯：做自己的大师.Tony.Robbins.I.Am.Not.Your.Guru.2016</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=43778742&bvid=BV11b411y7AW&cid=76684251&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>感谢那些苦难，正是那些苦难，塑造了如此坚强，如果优秀的你，你能够撑过来，真的是太了不起了</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.macwk.com/special" target="_blank" rel="noopener">mac软件下载的好用网站</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>珍爱生命</p><p>1月3日爆出98年拼多多买菜女员工凌晨猝死</p><p>1月9日中午拼多多一名研发人员在长沙家中跳27楼自杀(1月8号和主管请假飞回长沙)</p><p>太多的令人心痛的事情，让我们不得不深思我们的身体健康以及心理健康</p><p>所以，每天给自己一点时间进行身体锻炼和心理锻炼</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/228_汇总区间 托尼罗宾斯：做自己的大师. 感谢那些苦难，正是那些苦难，塑造了如此坚强，如果优秀的你，你能够撑过来，真的是太了不起了 mac软件下载的好用网站 珍爱生命
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第87周[87/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC87%E5%91%A8-87-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第87周-87-521/</id>
    <published>2021-01-02T08:09:25.000Z</published>
    <updated>2021-01-02T08:52:38.962Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/239_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.cpp" target="_blank" rel="noopener">LeetCode/239_滑动窗口最大值</a></p><h1 id="Reviews"><a href="#Reviews" class="headerlink" title="Reviews"></a>Reviews</h1><p>为什么你会厌恶别人？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=970866001&bvid=BV18p4y1B7yS&cid=272445600&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>视频中主要讲的点：</p><ol><li>自己的独处时间不够</li><li>和他人观点意见有不同甚至处于对立</li><li>心中有怨念，很难原谅伤害过你的人或很难释怀经历过的事</li><li>生活方式导致，工作中总有不愉快社交发生</li><li>他人触犯到自己的边界</li><li>厌恶形成了一种习惯</li><li>只是因为无法得到而嫉妒他人</li></ol><p>我觉得很有趣的一个点：<br>就是当你先入为主想着别人很讨厌的时候，那么你就会找到很多的证据佐证你的观点</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.cnblogs.com/kevingrace/p/7525200.html" target="_blank" rel="noopener">Supervisor(进程管理利器)使用说明</a></p><h1 id="Share-Linux使用新的硬盘"><a href="#Share-Linux使用新的硬盘" class="headerlink" title="Share - Linux使用新的硬盘"></a>Share - Linux使用新的硬盘</h1><p>分区—LV—格式化文件系统—挂载文件系统—呈现可访问的文件</p><ol><li>lsblk查看盘</li><li>parted操作<ol><li>parted /dev/your_dev print 查看</li><li>parted -s /dev/your_dev malabel gpt 设置分区表类型</li><li>parted -s /dev/your_dev — mkpart primary 1MB 100% 从1MB开始分这个盘的100% —- 一个设备可以设置多个分区</li><li>parted /dev/your_dev print 查看</li></ol></li><li>pvcreate /dev/your_dev 创建物理卷</li><li>pvdisplay 查看状态</li><li>vgcreate your_volume_group_name /dev/your_dev 创建卷组</li><li>vgdisplay 查看</li><li>lvcreate -L 10G your_volume_group_name -m your_logical_group_name 创建逻辑卷</li><li>lvs 查看</li><li>lsblk 查看发现如下结构，就是your_dev下创建了一个物理分区your_dev1，然后物理分区下有一个独立可用的逻辑分区your_volume_group_name-your_logical_group_name<ul><li>your_dev<ul><li>your_dev1<ul><li>your_volume_group_name-your_logical_group_name</li></ul></li></ul></li></ul></li><li>mkfs -t ext4 /dev/mapper/your_volume_group_name-your_logical_group_name 格式化成ext4格式的文件（新的逻辑分区在<code>/dev/mapper</code>下</li><li>mkdir /mnt/mytest 创建一个目录</li><li>mount /dev/mapper/your_volume_group_name-your_logical_group_name /mnt/mytest 把自己目录挂到逻辑设备上，可以针对文件的读写，就写到了磁盘上面</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/239_滑动窗口最大值 为什么你会厌恶别人？ Supervisor(进程管理利器)使用说明 Linux使用新的硬盘
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第86周[86/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC86%E5%91%A8-86-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第86周-86-521/</id>
    <published>2020-12-27T06:32:52.000Z</published>
    <updated>2020-12-27T07:06:51.297Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/205_%E5%90%8C%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2.cpp" target="_blank" rel="noopener">LeetCode/205_同构字符串</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>克服上瘾的3条准则</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=670736474&bvid=BV13a4y1p7Ee&cid=267033472&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>一、你需要一个爱好，这能带来美好的情绪<br>二、照顾好自己的身体，养成健康的饮食习惯，并且定期锻炼<br>三、主动社交，联系老朋友，结识新朋友，你会感受到与他人连结的快乐感</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="Python防止listdir阻塞"><a href="#Python防止listdir阻塞" class="headerlink" title="Python防止listdir阻塞"></a>Python防止listdir阻塞</h2><p>CPython的实现os.listdir使用特定于平台的C库调用来读取目录的内容。在类似Unix的平台上，它们是opendir(3)and readdir(3)，而在Windows上则使用FindFirstFileand FindNextFile。</p><p>在无法访问的网络文件系统的情况下，这些调用的行为将取决于操作系统。当使用Linux或Windows时，它们肯定会在系统命令（例如lshang）挂起的情况下挂起。为了防止任意长时间的停顿，可以使用专用框架，例如asyncio和twisted，它们使用非阻塞IO。但是，使用这些框架可能会让人望而生畏，并且通常需要在整个应用程序和整个程序中使用它们来构建事件驱动的模型。</p><p>确保存在网络文件系统时IO系统调用不会阻塞的一种更简单且对初学者友好的方法是使用线程。例如，这是一个safe_listdir返回目录内容的函数，或者None调用所花费的时间超过指定的超时时间：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_listdir</span><span class="params">(directory, timeout)</span>:</span></span><br><span class="line">    contents = []</span><br><span class="line">    t = threading.Thread(target=<span class="keyword">lambda</span>: contents.extend(os.listdir(directory)))</span><br><span class="line">    t.daemon = <span class="literal">True</span>  <span class="comment"># don't delay program's exit</span></span><br><span class="line">    t.start()</span><br><span class="line">    t.join(timeout)</span><br><span class="line">    <span class="keyword">if</span> t.is_alive():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># timeout</span></span><br><span class="line">    <span class="keyword">return</span> contents</span><br></pre></td></tr></table></figure><p></p><p>在Python 3中，可以使用出色的concurrent.futures软件包。它不仅简化了实现，而且还自动限制了多次safe_listdir调用时创建的线程的数量，并确保将引发的异常os.listdir正确传播到调用者：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, concurrent.futures</span><br><span class="line">pool = concurrent.futures.ThreadPoolExecutor()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_listdir</span><span class="params">(directory, timeout)</span>:</span></span><br><span class="line">    future = pool.submit(os.listdir, directory)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> future.result(timeout)</span><br><span class="line">    <span class="keyword">except</span> concurrent.futures.TimeoutError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># timeout</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.pythonheidong.com/blog/article/205417/d551d6932f331e9ec337/" target="_blank" rel="noopener">os.listdir可以挂在网络驱动器上吗？它使用什么系统调用？</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><h2 id="Pyhton防止listdir阻塞进阶"><a href="#Pyhton防止listdir阻塞进阶" class="headerlink" title="Pyhton防止listdir阻塞进阶"></a>Pyhton防止listdir阻塞进阶</h2><p>使用超时装饰器<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding : utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="string">"""Subclass of threading.Thread, with a kill() method."""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self, *args, **kwargs)</span><br><span class="line">        self.killed = <span class="literal">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Start the thread."""</span></span><br><span class="line">        self.__run_backup = self.run</span><br><span class="line">        <span class="string">"""Force the Thread to install our trace."""</span></span><br><span class="line">        self.run = self.__run</span><br><span class="line">        threading.Thread.start(self)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Hacked run function, which installs the trace."""</span></span><br><span class="line">        sys.settrace(self.globaltrace)</span><br><span class="line">        self.__run_backup()</span><br><span class="line">        self.run = self.__run_backup</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">globaltrace</span><span class="params">(self, frame, why, arg)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> why == <span class="string">'call'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.localtrace</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">localtrace</span><span class="params">(self, frame, why, arg)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.killed:</span><br><span class="line">            <span class="keyword">if</span> why == <span class="string">'line'</span>:</span><br><span class="line">                <span class="keyword">raise</span> SystemExit()</span><br><span class="line">        <span class="keyword">return</span> self.localtrace</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kill</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.killed = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_file_timeout</span><span class="params">(seconds)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeout_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_new_func</span><span class="params">(oldfunc, result, oldfunc_args, oldfunc_kwargs)</span>:</span></span><br><span class="line">            result.append(oldfunc(*oldfunc_args, **oldfunc_kwargs))</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            result = []</span><br><span class="line">            <span class="string">'''create new args for _new_funcbecause</span></span><br><span class="line"><span class="string">               we want to get the func return val to result list</span></span><br><span class="line"><span class="string">            '''</span></span><br><span class="line">            new_kwargs = &#123;</span><br><span class="line">                <span class="string">'oldfunc'</span>: func,</span><br><span class="line">                <span class="string">'result'</span>: result,</span><br><span class="line">                <span class="string">'oldfunc_args'</span>: args,</span><br><span class="line">                <span class="string">'oldfunc_kwargs'</span>: kwargs</span><br><span class="line">            &#125;</span><br><span class="line">            thd = KThread(target=_new_func, args=(), kwargs=new_kwargs)</span><br><span class="line">            thd.start()</span><br><span class="line">            thd.join(seconds)</span><br><span class="line">            alive = thd.isAlive()</span><br><span class="line">            <span class="string">'''kill the child thread'''</span></span><br><span class="line">            thd.kill()</span><br><span class="line">            <span class="keyword">if</span> alive:</span><br><span class="line">                alert_exce = <span class="string">u'list_file timeout for [%d s].'</span> % seconds</span><br><span class="line">                <span class="comment"># LOG.error(alert_exce)</span></span><br><span class="line">                <span class="keyword">print</span> alert_exce</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> result[<span class="number">0</span>]</span><br><span class="line">        _.__name__ = func.__name__</span><br><span class="line">        _.__doc__ = func.__doc__</span><br><span class="line">        <span class="keyword">return</span> _</span><br><span class="line">    <span class="keyword">return</span> timeout_decorator</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    TEST = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @list_file_timeout(TEST)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list_file</span><span class="params">(self)</span>:</span></span><br><span class="line">        sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo = Foo()</span><br><span class="line">foo.list_file()</span><br></pre></td></tr></table></figure><p></p><h2 id="单线程生成文件，并上传到S3桶中"><a href="#单线程生成文件，并上传到S3桶中" class="headerlink" title="单线程生成文件，并上传到S3桶中"></a>单线程生成文件，并上传到S3桶中</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vim gen.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">fmt=output.%05d</span><br><span class="line"><span class="built_in">cd</span> lm</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 3)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    head -c 512K /dev/urandom &gt; `<span class="built_in">printf</span> <span class="variable">$fmt</span> <span class="variable">$i</span>`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后配置s3</span></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line"><span class="comment"># endpoint是 ip:port , port可能是nginx网关,也可以直接是对应服务的port</span></span><br><span class="line">s3cmd --configure \</span><br><span class="line">        --access_key=&lt;access_key&gt; \</span><br><span class="line">        --secret_key=&lt;secret_key&gt; \</span><br><span class="line">        --region=&lt;region&gt; \</span><br><span class="line">        --host=&lt;endpoint&gt; \</span><br><span class="line">        --host-bucket=&lt;endpoint&gt; \</span><br><span class="line">        --no-ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传</span></span><br><span class="line">s3cmd put lm s3://lm-noscan-bk --recursive</span><br></pre></td></tr></table></figure><p>优化: vdbench 多线程生成文件</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/205_同构字符串 克服上瘾的3条准则 Python防止listdir阻塞以及进阶 单线程生成文件，并上传到S3桶中
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第85周[85/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC85%E5%91%A8-85-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第85周-85-521/</id>
    <published>2020-12-19T14:15:38.000Z</published>
    <updated>2020-12-20T12:52:16.441Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/48_%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F.cpp" target="_blank" rel="noopener">LeetCode/48_旋转图像</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么我们会破坏爱情？怎样才能维系一段长期的关系？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=373229199&bvid=BV1LZ4y13785&cid=267791281&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>我的看法：</p><ol><li>你想要什么，你就会找到证据去证实你想要的东西，所以你想保持距离，就很难深入交流，你认为你找不到好的伴侣，你就会不会疏远ta。所以你只有保持想要好好谈恋爱，并相信你的伴侣，你才不会找佐证去认为你的伴侣不好</li><li>和伴侣合作</li><li>一起反思</li></ol><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://my.oschina.net/leejun2005/blog/607741" target="_blank" rel="noopener">论 Python 装饰器控制函数 Timeout 的正确姿势</a></p><p><a href="https://www.jianshu.com/p/fad3339e3448" target="_blank" rel="noopener">浅析Linux中的零拷贝技术</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>gdb的一些调试技巧</p><p>pstack 9809[PID]</p><p>gdb附加或者启动： gdb attach pid； gdb xxxx, run xxxxx xxxxx；<br>给某个方法设置断点 b xxx_func delete breakpoints 删除断点<br>给某个代码位置设置断点 b xxxx.c:1210<br>layout 同步查看代码 ctrl+x +a 退出 layout<br>n 执行下一步<br>s 进入函数内部<br>p 查看 变量内容<br>x 查看内存内容<br>c 继续执行</p><p>gdb /usr/bin/xxxx core.xxxx；<br>bt 查看coredump的线程的堆栈<br>info thread 查看其他线程情况<br>thread apply all bt 查看其他所有线程的堆栈<br>p 查看 变量内容 根据变量的内容判断coredump问题的可能原因, 常见原因：<br>内存访问越界(小心 memset memcpy strcpy sprintf 等函数)<br>使用了被释放的对象或者内存<br>对象内存使用了未经过初始化的指针或者对象<br>内容被破坏(踩内存)<br>p 命令 结合c里面的指针操作符使用 p <em>(struct everythingyouwant </em>0x78dddddd)</p><p>x 查看内存内容</p><p>gdb如何把输出打印到文件中<br>(gdb) set logging file<file name><br>(gdb) set logging on<br>(gdb) thread apply all bt<br>(gdb) set logging off</file></p><p>手段1： 抓包分析，通过抓包分析客户端的问题<br>手段2： 疑难问题可以通过strace工具分析客户端的API调用序列然后进行分析。(gitlab server的问题)<br>针对可能存在的内核问题，可以通过开启nfs客户端调试日志来判断<br>sysctl –a |grep nfs<br>sysctl -w nfs_debug = 65535<br>sysctl -w rpc_debug=65535<br>journalctl –kf 查看内核日志</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/48_旋转图像 TED演讲：为什么我们会破坏爱情？怎样才能维系一段长期的关系？ 论 Python 装饰器控制函数 Timeout 的正确姿势 浅析Linux中的零拷贝技术 gdb的一些调试技巧
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第84周[84/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC84%E5%91%A8-84-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第84周-84-521/</id>
    <published>2020-12-12T16:42:56.000Z</published>
    <updated>2020-12-12T17:41:28.244Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/376_%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.cpp" target="_blank" rel="noopener">LeetCode/376_摆动序列</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>7种提升智力的方法</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=415581339&bvid=BV1dV41187kK&cid=265806990&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>第一1.5或2倍速收听播客<br>第二下象棋。不一定是象棋，只要是动脑的就可以<br>第三用不同方式做事<br>第四你的饮食<br>第五教授一项新技能给别人<br>第六忽略技术。打个比方，用脑算术而不是计算器<br>第七学习一门新语言</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html" target="_blank" rel="noopener">git cherry-pick 教程</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/111045136" target="_blank" rel="noopener">C结构体中字符串初始化</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/376_摆动序列 7种提升智力的方法 git cherry-pick 教程 C结构体中字符串初始化
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第83周[83/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC83%E5%91%A8-83-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第83周-83-521/</id>
    <published>2020-12-06T14:38:48.000Z</published>
    <updated>2020-12-06T15:54:44.184Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/621_%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8.cpp" target="_blank" rel="noopener">LeetCode/621_任务调度器</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://cmake.org/cmake/help/v3.19/command/add_library.html?highlight=add_library" target="_blank" rel="noopener">Cmake官方文档</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://coolshell.cn/articles/11377.html" target="_blank" rel="noopener">C语言结构体里的成员数组和指针</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/110285162" target="_blank" rel="noopener">指向指针数组的指针</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/621_任务调度器 Cmake官方文档 C语言结构体里的成员数组和指针 指向指针数组的指针
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第82周[82/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC82%E5%91%A8-82-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第82周-82-521/</id>
    <published>2020-11-28T12:49:13.000Z</published>
    <updated>2020-11-28T16:48:41.426Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/493_%E7%BF%BB%E8%BD%AC%E5%AF%B9.cpp" target="_blank" rel="noopener">LeetCode/493_翻转对</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：只要你有真正的信心，一切皆有可能</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=245383647&bvid=BV1hv411t7QY&cid=260639287&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>对自己有信心，直面困境，不断尝试</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.hahack.com/codes/cmake/" target="_blank" rel="noopener">CMake 入门实战</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>2020年11月28日22:15:49 突然发现自己的Hexo网站直接挂掉了，可能是前几天改了一下主机的名字，然后重启了一下主机，导致nginx的服务挂掉了，但是现在重启了nginx还是没有启动hexo网站，排查中</p><p>2020年11月28日23:37:35 感觉今天有点搞不定，脑子有点累，害</p><p>2020年11月29日00:13:56 根据<a href="https://www.jianshu.com/p/b0fad8065676" target="_blank" rel="noopener">nginx正常启动却无法访问网页</a> 重要找到了原因，</p><ol><li>是因为nginx没有随着主机重启而重启</li><li>是因为我重启了主机之后，iptables自动重启了，而我的iptables的配置文件中没有443和80端口，所以导致我的网站无法访问了</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>nginx开机自启<code>systemctl enable nginx.service</code></li><li>修改文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line"><span class="comment">## 添加如下两行</span></span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></li></ol><p>再重启，完美(<del>2.5小时，呜呜</del>)</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/493_翻转对 TED演讲：只要你有真正的信心，一切皆有可能 CMake 入门实战 nginx正常启动却无法访问网页
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第81周[81/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC81%E5%91%A8-81-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第81周-81-521/</id>
    <published>2020-11-22T07:31:05.000Z</published>
    <updated>2020-11-22T08:07:56.771Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 04 2021 15:35:35 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/242_%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.cpp" target="_blank" rel="noopener">LeetCode/242_有效的字母异位词</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>10种提升脑力的最佳食物</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=457834826&bvid=BV1c541157gx&cid=257197128&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>豆类，薄荷，西兰花，甜菜，籽（葵花籽，南瓜籽），坚果，藜麦，鳄梨，浆果，椰子油</p><p><strong>其实吃亏最长脑子</strong></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/edonlii/article/details/8877239" target="_blank" rel="noopener">likely() 和 unlikely()功能分析</a></p><p><a href="https://tanglinux.blog.csdn.net/article/details/7175517" target="_blank" rel="noopener">详解likely和unlikely函数</a></p><h1 id="Share-git-commit-提交多行注释"><a href="#Share-git-commit-提交多行注释" class="headerlink" title="Share - git commit 提交多行注释"></a>Share - git commit 提交多行注释</h1><p>网上说的 <code>git commit -m &#39;</code> 不能提交多行注释…</p><p>所以经过一番查找尝试，如下方法可以提交多行注释<br><code>git commit -m &quot;第一行: 简要概括(会在git平台目录界面展示)&quot; -m &quot;第二行: 详细信息的第一行&quot; -m &quot;第三行: 详细信息的第二行，之后还可以-m添加更多的行&quot;</code></p><h1 id="Share不再写在CSDN的原因"><a href="#Share不再写在CSDN的原因" class="headerlink" title="Share不再写在CSDN的原因"></a>Share不再写在CSDN的原因</h1><p>因为之前上课学了一个PageRank的google网站排名的规则，发现链接往外链会降低排名，所以开始转变成为CSDN往自己个人网站回链</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/242_有效的字母异位词 10种提升脑力的最佳食物 likely() 和 unlikely()功能分析 详解likely和unlikely函数 git commit 提交多行注释 Share不再写在CSDN的原因
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
</feed>
