<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>单林敏的博客</title>
  
  <subtitle>wolfdan&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wolfdan.cn/"/>
  <updated>2021-11-14T15:21:13.653Z</updated>
  <id>https://www.wolfdan.cn/</id>
  
  <author>
    <name>单林敏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ARST打卡第132周[132/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC132%E5%91%A8-132-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第132周-132-521/</id>
    <published>2021-11-14T14:32:26.000Z</published>
    <updated>2021-11-14T15:21:13.653Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc677_键值映射</p><p>感觉应该是要使用字典树，没加一个单词，对经过的节点的sum增加val</p><p>然后求sum的时候直接按字典树去找即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TrieNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TrieNode * next[<span class="number">26</span>];</span><br><span class="line">    TrieNode() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;next[i] = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapSum</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MapSum() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> delta = val;</span><br><span class="line">        <span class="keyword">if</span> (cnt.count(key)) &#123;</span><br><span class="line">            delta -= cnt[key];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[key] = val;</span><br><span class="line">        TrieNode * node = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : key) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;next[c - <span class="string">'a'</span>] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                node-&gt;next[c - <span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[c - <span class="string">'a'</span>];</span><br><span class="line">            node-&gt;val += delta;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="built_in">string</span> prefix)</span> </span>&#123;</span><br><span class="line">        TrieNode * node = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : prefix) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;next[c - <span class="string">'a'</span>] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node-&gt;next[c - <span class="string">'a'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TrieNode * root;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://www.w3.org/Protocols/rfc959/" target="_blank" rel="noopener">ftp协议文档-rfc959</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://zhuanlan.zhihu.com/p/29216091" target="_blank" rel="noopener">图解 TCMalloc</a><br><a href="https://zhuanlan.zhihu.com/p/81683409" target="_blank" rel="noopener">记一次 TCMalloc Debug 经历</a></p><h1 id="Share-ftp的多样调试"><a href="#Share-ftp的多样调试" class="headerlink" title="Share-ftp的多样调试"></a>Share-ftp的多样调试</h1><h2 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h2><h3 id="暴力对主进程"><a href="#暴力对主进程" class="headerlink" title="暴力对主进程"></a>暴力对主进程</h3><p><code>strace -ff -p $pid</code></p><h3 id="找双子进程来处理"><a href="#找双子进程来处理" class="headerlink" title="找双子进程来处理"></a>找双子进程来处理</h3><p><code>ps -ef | grep vsftpd</code> 找到双子进程<br><code>strace -ff -p $pid</code></p><h2 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h2><p><code>set follow-fork-mode &lt;mode&gt;</code> 也只能追踪到第一个子进程，基本跟不到…（可能是我技巧不到位）</p><p>所以还是像strace 一样，看到双子进程的pid，然后直接<code>gdb attach $pid</code> , 比较难跟<br><strong>最好先上传一个文件再开始ps查找双子进程跟踪</strong></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc677_键值映射 ftp协议文档-rfc959 图解TCMalloc 记一次TCMalloc Debug经历 ftp的多样调试
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第131周[131/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC131%E5%91%A8-131-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第131周-131-521/</id>
    <published>2021-11-07T14:59:32.000Z</published>
    <updated>2021-11-07T15:43:22.338Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc598_范围求和2</p><p>感觉就是求最左上方的点的坐标（最大阵的右下角），然后返回它的坐标积</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; ops)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mina = m, minb = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; op: ops) &#123;</span><br><span class="line">            mina = min(mina, op[<span class="number">0</span>]);</span><br><span class="line">            minb = min(minb, op[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mina * minb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>【TED演讲】如何摆脱颓靡，进入“心流”的状态？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=721353431&bvid=BV1iQ4y1q79Z&cid=430740882&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>“狂欢式刷剧是一种在虚拟世界里被动的投入，更高层次的心流来自于主动地参与真实世界。”</p><ol><li><p>mastery</p><p>从小的进步(small wins)中获取掌控感</p></li><li><p>mindfulness</p><p>在一件事情上全身贯注，不要轻易把时间碎片化</p></li><li><p>mattering</p><p>知道你对他人的意义</p></li></ol><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.51cto.com/viong/261291" target="_blank" rel="noopener">Vsftpd完全攻略（一）ftp原理与vsftp安装</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>strace调试vsftpd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep vsftpd</span><br><span class="line"><span class="comment"># 获得$pid</span></span><br><span class="line">strace -ff -p <span class="variable">$pid</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc598_范围求和2 【TED演讲】如何摆脱颓靡，进入“心流”的状态？ Vsftpd完全攻略（一）ftp原理与vsftp安装 strace调试vsftpd
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第130周[130/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC130%E5%91%A8-130-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第130周-130-521/</id>
    <published>2021-10-31T05:06:21.000Z</published>
    <updated>2021-10-31T06:54:46.730Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc500 键盘行</p><p>很简单，先建立每个字母对应的行数映射，然后直接遍历每个字符串，然后根据第一个所在的键盘行，<br>去判断剩下的键盘行是否在同一行，是的话加入到ans的vector中</p><p>注意大小写都一样…因为没看清，导致卡了15分钟</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ test.cpp -o test.out -std=c++11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(int i = int(a); i &lt;= int(b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, b, a) for(int i = int(b); i &gt;= int(a); --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;c=getchar();&#125;<span class="keyword">return</span> x*f;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;ll ans=<span class="number">1</span>%mod;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=ans*a%mod;a=a*a%mod;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; findWords(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words) &#123;</span><br><span class="line">        <span class="keyword">int</span> word_to_line[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">string</span> str[] = &#123;<span class="string">"qwertyuiopQWERTYUIOP"</span>, <span class="string">"asdfghjklASDFGHJKL"</span>, <span class="string">"zxcvbnmZXCVBNM"</span>&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; lines(str, str+<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">int</span> sz = lines.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> x : lines[i]) &#123;</span><br><span class="line">                word_to_line[x] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; 128; i++) &#123;</span></span><br><span class="line">        <span class="comment">//     printf("%c %d\n", i, word_to_line[i]);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> param_word_sz;</span><br><span class="line">        <span class="keyword">bool</span> flag;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> word : words) &#123;</span><br><span class="line">            param_word_sz = word.size();</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// puts(word.c_str());</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; param_word_sz - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (word_to_line[word[i]] != </span><br><span class="line">                    word_to_line[word[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">                    <span class="comment">// 尴尬，没有处理大小写，导致多调试了15分钟</span></span><br><span class="line">                    <span class="comment">// printf("word not in one line %c, %c\n", </span></span><br><span class="line">                    <span class="comment">//         word[i], word[i + 1]);</span></span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                ans.push_back(word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution sol;</span><br><span class="line">    <span class="built_in">string</span> words_str[] = &#123;<span class="string">"Hello"</span>,<span class="string">"Alaska"</span>,<span class="string">"Dad"</span>,<span class="string">"Peace"</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; words(words_str, words_str + <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">    ans = sol.findWords(words);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : ans) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(x.c_str());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://man7.org/linux/man-pages/man2/readv.2.html" target="_blank" rel="noopener">readv的文档</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/Nolikecake/article/details/103536679" target="_blank" rel="noopener">C语言：在文件的指定位置实现局部修改，而无需重写文件的其他部分</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><h2 id="找到文本中某个字符串的上下几行中的含有的其他指定字符串的方法"><a href="#找到文本中某个字符串的上下几行中的含有的其他指定字符串的方法" class="headerlink" title="找到文本中某个字符串的上下几行中的含有的其他指定字符串的方法"></a>找到文本中某个字符串的上下几行中的含有的其他指定字符串的方法</h2><p>eg:找result文件中，compound的上面十行里有create的文本块，并且向下显示10行(-B向上，-A向下)<br><code>grep compound_end result -B 10 | grep create -A 10</code></p><h2 id="iov数组中间加值"><a href="#iov数组中间加值" class="headerlink" title="iov数组中间加值"></a>iov数组中间加值</h2><h3 id="iovec的结构"><a href="#iovec的结构" class="headerlink" title="iovec的结构"></a>iovec的结构</h3><p>首先观察iovec的存储结构，就知道iovec数组一旦填充了值之后，就无法在iovec的base的尾部添加字符了<br>因为这样会破坏后面的len，所以想要加值，就要重新生成一个iovec数组然后复制，或者是在尾部添加</p><p><img data-src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/C/iovec_struct.png" alt="iovec结构"></p><h3 id="尾部添加演示"><a href="#尾部添加演示" class="headerlink" title="尾部添加演示"></a>尾部添加演示</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/uio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">iov</span>[4];</span></span><br><span class="line">    <span class="keyword">ssize_t</span> nr;</span><br><span class="line">    <span class="keyword">int</span> fd, i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *buf[] = &#123;<span class="string">"The term buccaneer comes from the word boucan.\n"</span>,</span><br><span class="line">                   <span class="string">"A boucan is a wooden frame used for cooking meat.\n"</span>,</span><br><span class="line">                   <span class="string">"Buccaneer is the West Indies name for a pirate.\n"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">"buccaneer.txt"</span>, O_WRONLY | O_CREAT | O_TRUNC);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        iov[i].iov_base = buf[i];</span><br><span class="line">        iov[i].iov_len = <span class="built_in">strlen</span>(buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> buf_tmp[<span class="number">2</span>] = <span class="string">"2"</span>;</span><br><span class="line">    buf_tmp[<span class="number">0</span>] = <span class="string">'1'</span>;</span><br><span class="line">    iov[<span class="number">3</span>].iov_base = buf_tmp;</span><br><span class="line">    iov[<span class="number">3</span>].iov_len = <span class="built_in">strlen</span>(buf_tmp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"len is %d\n"</span>, iov[<span class="number">3</span>].iov_len);</span><br><span class="line"></span><br><span class="line">    nr = writev(fd, iov, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (nr == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"writev"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"wrote %d bytes\n"</span>, nr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (close(fd)) &#123;</span><br><span class="line">        perror(<span class="string">"close"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc500 键盘行 readv的文档 C语言：在文件的指定位置实现局部修改，而无需重写文件的其他部分 找到文本中某个字符串的上下几行中的含有的其他指定字符串的方法 iov数组中间加值
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第129周[129/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC129%E5%91%A8-129-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第129周-129-521/</id>
    <published>2021-10-24T13:13:59.000Z</published>
    <updated>2021-10-24T14:44:07.197Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc_638 大礼包</p><p>链接：<a href="https://leetcode-cn.com/problems/shopping-offers/solution/da-li-bao-by-leetcode-solution-p1ww/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shopping-offers/solution/da-li-bao-by-leetcode-solution-p1ww/</a><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; memo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">shoppingOffers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; price, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; special, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; needs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = price.size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 过滤不需要计算的大礼包，只保留需要计算的大礼包</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; filterSpecial;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; sp : special) &#123;</span><br><span class="line">            <span class="keyword">int</span> totalCount = <span class="number">0</span>, totalPrice = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                totalCount += sp[i];</span><br><span class="line">                totalPrice += sp[i] * price[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (totalCount &gt; <span class="number">0</span> &amp;&amp; totalPrice &gt; sp[n]) &#123;</span><br><span class="line">                filterSpecial.emplace_back(sp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(price, special, needs, filterSpecial, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记忆化搜索计算满足购物清单所需花费的最低价格</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; price,<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp; special, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curNeeds, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp; filterSpecial, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!memo.count(curNeeds)) &#123;</span><br><span class="line">            <span class="keyword">int</span> minPrice = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                minPrice += curNeeds[i] * price[i]; <span class="comment">// 不购买任何大礼包，原价购买购物清单中的所有物品</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; curSpecial : filterSpecial) &#123;</span><br><span class="line">                <span class="keyword">int</span> specialPrice = curSpecial[n];</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxtNeeds;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (curSpecial[i] &gt; curNeeds[i]) &#123; <span class="comment">// 不能购买超出购物清单指定数量的物品</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    nxtNeeds.emplace_back(curNeeds[i] - curSpecial[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (nxtNeeds.size() == n) &#123; <span class="comment">// 大礼包可以购买</span></span><br><span class="line">                    minPrice = min(minPrice, dfs(price, special, nxtNeeds, filterSpecial, n) + specialPrice);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            memo[curNeeds] = minPrice;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[curNeeds];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>【TED演讲】休假的力量：我为什么要给自己放个长假？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=805904818&bvid=BV1C34y1U7p8&cid=420042555&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>确实，我们可以把退休生活的那几年提取出来，然后分散到我们的工作年中，让自己工作一段时间后，<br>有一个长长的假期停下来思考思考，自己到底想要什么，做做自己感兴趣的事情，然后让自己充满力量</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.cnblogs.com/fnlingnzb-learner/p/8059251.html" target="_blank" rel="noopener">gcc编译工具生成动态库和静态库介绍</a></p><p><a href="https://www.cnblogs.com/qingergege/p/6882107.html" target="_blank" rel="noopener">C语言中，隐藏结构体的细节</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>2021.1024程序员节快乐</p><p>(<del>因为感冒，在家休息了一天，一定要注意身体</del>)</p><p>所以这周的分享只有一个:(<del>想偷懒？？？</del>)</p><p><strong>身体是革命的本钱，一定要记得每周锻炼，保持身体健康，精力旺盛</strong></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc_638 大礼包 【TED演讲】休假的力量：我为什么要给自己放个长假？ gcc编译工具生成动态库和静态库介绍 C语言中，隐藏结构体的细节 1024快乐，身体是革命的本钱，一定要保护好身体
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第128周[128/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC128%E5%91%A8-128-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第128周-128-521/</id>
    <published>2021-10-17T05:26:49.000Z</published>
    <updated>2021-10-17T06:05:29.750Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc230_二叉搜索树中第K小的元素</p><p>进阶思考频繁修改的第k大</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>暴力: 中序遍历记录到第k个</p><p>进阶思考好像是用主席树…但是有点忘了…</p><p>看题解原来是bst，记录前后节点数，或者直接进阶到平衡树，可以的<br>链接：<a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/solution/er-cha-sou-suo-shu-zhong-di-kxiao-de-yua-8o07/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/solution/er-cha-sou-suo-shu-zhong-di-kxiao-de-yua-8o07/</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBst</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyBst(TreeNode *root) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;root = root;</span><br><span class="line">        countNodeNum(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回二叉搜索树中第k小的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        TreeNode *node = root;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> left = getNodeNum(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (left &lt; k - <span class="number">1</span>) &#123;</span><br><span class="line">                node = node-&gt;right;</span><br><span class="line">                k -= left + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left == k - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TreeNode *root;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;TreeNode *, <span class="keyword">int</span>&gt; nodeNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计以node为根结点的子树的结点数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countNodeNum</span><span class="params">(TreeNode * node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nodeNum[node] = <span class="number">1</span> + countNodeNum(node-&gt;left) + countNodeNum(node-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> nodeNum[node];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取以node为根结点的子树的结点数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getNodeNum</span><span class="params">(TreeNode * node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">nullptr</span> &amp;&amp; nodeNum.count(node)) &#123;</span><br><span class="line">            <span class="keyword">return</span> nodeNum[node];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode* root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="function">MyBst <span class="title">bst</span><span class="params">(root)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> bst.kthSmallest(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html" target="_blank" rel="noopener">boto3 Developer guide</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/Micha_Lu/article/details/109228043" target="_blank" rel="noopener">cosbench配置说明</a></p><p><a href="https://support.huaweicloud.com/trouble-kunpengsdss/kunpengsdss_09_0006.html" target="_blank" rel="noopener">Cosbench高并发测试失败</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/120810302" target="_blank" rel="noopener">samba共享linux目录出来写代码【共享目录有严格格式限制才能成功】</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc230_二叉搜索树中第K小的元素 boto3 Developer guide cosbench配置说明 Cosbench高并发测试失败 samba共享linux目录出来写代码【共享目录有严格格式限制才能成功】
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第127周[127/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC127%E5%91%A8-127-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第127周-127-521/</id>
    <published>2021-10-10T04:42:26.000Z</published>
    <updated>2021-10-10T05:54:09.883Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc<em>441</em>排列硬币</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>直接找规律<br>1个硬币 1行<br>1 + 2个硬币 2行<br>1 + 2 + 3 + （小于4个）个硬币 3行</p><p>所以是n个硬币，可以构造k行<br>令 sum = (1 + k) * k / 2<br>sum &lt;= n &lt; sum + k</p><p>方法一：可以先本地跑程序打表，然后用n去套，直接lower_bound</p><p>方法二：当然也可以直接二分</p><p>方法三：官方解中还有直接解方程的</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">arrangeCoins</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>, right = n;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (right - left + <span class="number">1</span>) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">long</span> <span class="keyword">long</span>) mid * (mid + <span class="number">1</span>) &lt;= (<span class="keyword">long</span> <span class="keyword">long</span>) <span class="number">2</span> * n) &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">arrangeCoins</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) ((<span class="built_in">sqrt</span>((<span class="keyword">long</span> <span class="keyword">long</span>) <span class="number">8</span> * n + <span class="number">1</span>) - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/261ec397-d692-4e3e-8bcd-c96ce02bb969" target="_blank" rel="noopener">ioctl中的协商验证</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/qq_33709508/article/details/101822329" target="_blank" rel="noopener">shell不能识别alias 解决方案</a></p><p>但是有些命名还是不行，比如s3cmd —no-check-certifacate，暂时没有找到根本原因</p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/120685506" target="_blank" rel="noopener">删除小于指定大小的文件</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/120685547" target="_blank" rel="noopener">s3cmd常用命令和使用技巧</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc_441_排列硬币 ioctl中的协商验证 shell不能识别alias解决方案 删除小于指定大小的文件 s3cmd常用命令和使用技巧
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第126周[126/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC126%E5%91%A8-126-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第126周-126-521/</id>
    <published>2021-10-03T06:36:29.000Z</published>
    <updated>2021-10-03T07:20:31.657Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc166_分数到小数</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>好像是判断有理数，然后找最小循环节<em>_</em>有点不记得怎么找了，看看答案吧<br>链接：<a href="https://leetcode-cn.com/problems/fraction-to-recurring-decimal/solution/acmjin-pai-ti-jie-mo-ni-chu-fa-yun-suan-p96vg/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/fraction-to-recurring-decimal/solution/acmjin-pai-ti-jie-mo-ni-chu-fa-yun-suan-p96vg/</a></p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">fractionToDecimal</span><span class="params">(<span class="keyword">int</span> numerator, <span class="keyword">int</span> denominator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> num = numerator, den = denominator;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> bit = num * den;</span><br><span class="line">        num = <span class="built_in">abs</span>(num), den = <span class="built_in">abs</span>(den);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bit == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bit &lt; <span class="number">0</span>)</span><br><span class="line">            ans += <span class="string">"-"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> pre = num / den;</span><br><span class="line">        ans += to_string(pre);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num % den == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">        ans += <span class="string">'.'</span>;</span><br><span class="line">        num = num - (num / den) * den;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = ans.size();</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pos;</span><br><span class="line">        <span class="keyword">while</span>(num &amp;&amp; (pos.find(num) == pos.end())) &#123;</span><br><span class="line">            pos[num] = index++;</span><br><span class="line">            num *= <span class="number">10</span>;</span><br><span class="line">            ans += <span class="keyword">char</span>(<span class="string">'0'</span> + num / den);</span><br><span class="line">            num = num - (num / den) * den;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> last_pos = pos[num];</span><br><span class="line">            ans = ans.substr(<span class="number">0</span>, last_pos) + <span class="string">'('</span> + ans.substr(last_pos) + <span class="string">')'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>【TED演讲】为什么战争结束后平民更受苦？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=548062832&bvid=BV1Mq4y1K7St&cid=411659122&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>不完善的机构和制度，会导致许多问题，我们想帮助他人，不仅仅是要给直接的物资帮助，更加要建立机构和制度去帮助他人</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="noopener">HTTP 响应代码</a></p><h1 id="Share-做开发进度感觉要延期了怎么办"><a href="#Share-做开发进度感觉要延期了怎么办" class="headerlink" title="Share-做开发进度感觉要延期了怎么办"></a>Share-做开发进度感觉要延期了怎么办</h1><p>自己从校招生到现在工作了3个多月了，目前在项目中要提前安排好工作完成的日期<br>但是中途却总是有很多的其他的事情的打断，然后可能也会有异常情况在安排计划的时候没有考虑到<br>以及测试测出了问题，然后要去查看<br>还有和别的部门合作等等操作，总有可能会导致项目的进度延误</p><p>这时候，作为一个新人，就会很着急，很焦虑地肝进度，这样一小会还好，但是久了就会疲惫<br><strong>所以，我们应该学会在每次早会，周会，以及可能私下地找PM(项目经理)及时反馈自己的工作延误的原因</strong><br>然后说明为什么延误，然后让PM识别到你的进度风险，然后让他帮助你，或者提前做工作结束日期的变更<br>这样就可以让自己能够有更多的时间从容地应对工作，并且能让项目稳定推进</p><p>而不是一个个默默承受，然后导致精疲力尽，还被PM狂喷，这样费力不讨好，最终恶性循环崩溃</p><p>最后，国庆have fun!</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc166_分数到小数 【TED演讲】为什么战争结束后平民更受苦？ HTTP响应代码 做开发进度感觉要延期了怎么办
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第125周[125/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC125%E5%91%A8-125-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第125周-125-521/</id>
    <published>2021-09-25T13:16:20.000Z</published>
    <updated>2021-09-25T13:57:13.617Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc583_两个字符串的删除操作</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>感觉是前缀匹配，可以用板子直接套，但是自己有点忘了，想想其他思路<br>就是板子，看题解回忆一下板子吧</p><p>题解发现是公共子序列，还有dp的做法，看来思路还是有偏差的…<br>链接：<a href="https://leetcode-cn.com/problems/delete-operation-for-two-strings/solution/liang-ge-zi-fu-chuan-de-shan-chu-cao-zuo-14uw/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/delete-operation-for-two-strings/solution/liang-ge-zi-fu-chuan-de-shan-chu-cao-zuo-14uw/</a></p><p>最神奇的是，dp法相当于最长公共子序列的反面法，挺奇妙的</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(<span class="built_in">string</span> word1, <span class="built_in">string</span> word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = word1.size();</span><br><span class="line">        <span class="keyword">int</span> n = word2.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c1 = word1[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">char</span> c2 = word2[j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (c1 == c2) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lcs = dp[m][n];</span><br><span class="line">        <span class="keyword">return</span> m - lcs + n - lcs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(<span class="built_in">string</span> word1, <span class="built_in">string</span> word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = word1.size();</span><br><span class="line">        <span class="keyword">int</span> n = word2.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c1 = word1[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">char</span> c2 = word2[j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (c1 == c2) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://docs.ceph.com/en/mimic/radosgw/s3/objectops/#copy-object" target="_blank" rel="noopener">对象存储的api接口_ceph文档</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://help.aliyun.com/document_detail/31979.html" target="_blank" rel="noopener">对象存储的api接口_阿里云文档</a></p><h1 id="Share-自己提交代码的几点教训"><a href="#Share-自己提交代码的几点教训" class="headerlink" title="Share-自己提交代码的几点教训"></a>Share-自己提交代码的几点教训</h1><p>在工作中，如果要和别人协作提交代码，而且不方便改<code>.gitignore</code>的情况下，提交代码的时候要十分小心</p><p>下面是自己的两次惨痛教训</p><h2 id="大工程不要直接git-add-A"><a href="#大工程不要直接git-add-A" class="headerlink" title="大工程不要直接git add -A"></a>大工程不要直接<code>git add -A</code></h2><p>有时候有许多的修改内容的时候，可能一个个提交比较麻烦，所以<code>git add -A</code>很方便</p><p>但是这个操作容易在忘记<code>git status</code>检查的时候，把大量的编译文件，或者无关的文件提交到代码仓库<br>这样会对别人造成很大的不方便，严重的时候会导致一段时间内整个分支无法继续使用</p><h2 id="编译出错的修复记得也要提交"><a href="#编译出错的修复记得也要提交" class="headerlink" title="编译出错的修复记得也要提交"></a>编译出错的修复记得也要提交</h2><p>有时候工作很多打断的时候，比如老是有人找你的时候，你可能cherry-pick了别人的代码，或者已经commit了代码之后，<br>编译了很长时间出错了，然后你在本地修改了代码，然后编程成功了，然后你<code>git stash</code>里面有许多的东西</p><p>导致你没有看清你的修改的文件，然后就漏了提交你修复后的修改</p><p>这样就会导致提交的代码无法编译通过</p><p>提交上去之后，晚上凌晨自动打包的服务器会编译出错，导致打包失败，这样就会导致一个人的错误阻塞了所有的开发测试的工作(因为白天手动打包又得几个小时)</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc583_两个字符串的删除操作 对象存储的api接口_ceph文档 对象存储的api接口_阿里云文档 自己提交代码的几点教训
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第124周[124/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC124%E5%91%A8-124-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第124周-124-521/</id>
    <published>2021-09-19T04:14:47.000Z</published>
    <updated>2021-09-19T07:27:17.200Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc650_只有两个键的键盘<br>动态规划，按照所有的因数来递归分解, 还可以分解质因数</p><p>详细题解见下面的链接<br>链接：<a href="https://leetcode-cn.com/problems/2-keys-keyboard/solution/zhi-you-liang-ge-jian-de-jian-pan-by-lee-ussa/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/2-keys-keyboard/solution/zhi-you-liang-ge-jian-de-jian-pan-by-lee-ussa/</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态规划，按照所有的因数来递归分解</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSteps</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            f[i] = INT_MAX;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j * j &lt;= i; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    f[i] = min(f[i], f[j] + i / j);</span><br><span class="line">                    f[i] = min(f[i], f[i / j] + j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 还可以分解质因数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSteps</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                n /= i;</span><br><span class="line">                ans += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            ans += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>【TED演讲】人性、名誉和爱情的思考</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=505310262&bvid=BV1hg411V7aT&cid=403058019&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>学会爱他人，爱万物，爱和怜悯</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://zhuanlan.zhihu.com/p/40572954" target="_blank" rel="noopener">让事件飞 ——Linux eventfd 原理与实践</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/120380523" target="_blank" rel="noopener">批量生成指定大小的文件</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc650_只有两个键的键盘 【TED演讲】人性、名誉和爱情的思考 让事件飞——Linux eventfd原理与实践 批量生成指定大小的文件
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第123周[123/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC123%E5%91%A8-123-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第123周-123-521/</id>
    <published>2021-09-12T07:47:47.000Z</published>
    <updated>2021-09-12T09:15:30.969Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc678_有效的括号字符串</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>直接递归，把左括号看做+1，然后有括号看做减一，<code>*</code>就遍历<code>[1, 0, -1]</code>中的一个值,如果有负数直接<br>返回false</p><p>写了一波贪心递归，但是超时了，主要和题解的差距在于，自己对于中间sum 大于 0的情况一直递归处理，导致超时<br>而题解直接容忍下大于0的状态，只处理最终的<code>minCount == 0</code>即可,妙啊</p><p><a href="https://leetcode-cn.com/problems/valid-parenthesis-string/solution/you-xiao-de-gua-hao-zi-fu-chuan-by-leetc-osi3/" target="_blank" rel="noopener">题解不止上面的贪心解法，还有动态规划和堆栈操作</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><p>79 / 83 个通过测试用例</p><p>TLE，超时了</p><p><code>&quot;**************************************************))))))))))))))))))))))))))))))))))))))))))))))))))&quot;</code><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">bool</span> m_string_valid;</span><br><span class="line">    <span class="keyword">void</span> _checkValidString(<span class="keyword">int</span> sum, <span class="keyword">int</span> index, <span class="built_in">string</span>&amp; s) &#123;</span><br><span class="line">        <span class="comment">// 递归边界</span></span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == s.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[index] == <span class="string">')'</span>) &#123;</span><br><span class="line">                m_string_valid = m_string_valid || sum == <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[index] == <span class="string">'*'</span>) &#123;</span><br><span class="line">                m_string_valid = m_string_valid || sum == <span class="number">1</span> || sum == <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        <span class="keyword">if</span> (s[index] == <span class="string">'('</span>) &#123;</span><br><span class="line">            _checkValidString(sum + <span class="number">1</span>, index + <span class="number">1</span>, s);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[index] == <span class="string">')'</span>) &#123;</span><br><span class="line">            _checkValidString(sum - <span class="number">1</span>, index + <span class="number">1</span>, s);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[index] == <span class="string">'*'</span>) &#123;</span><br><span class="line">            _checkValidString(sum + <span class="number">1</span>, index + <span class="number">1</span>, s);</span><br><span class="line">            _checkValidString(sum, index + <span class="number">1</span>, s);</span><br><span class="line">            _checkValidString(sum - <span class="number">1</span>, index + <span class="number">1</span>, s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkValidString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        m_string_valid = <span class="literal">false</span>;</span><br><span class="line">        _checkValidString(<span class="number">0</span>, <span class="number">0</span>, s);</span><br><span class="line">        <span class="keyword">return</span> m_string_valid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h3 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkValidString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minCount = <span class="number">0</span>, maxCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s[i];</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span>) &#123;</span><br><span class="line">                minCount++;</span><br><span class="line">                maxCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">')'</span>) &#123;</span><br><span class="line">                minCount = max(minCount - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                maxCount--;</span><br><span class="line">                <span class="keyword">if</span> (maxCount &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                minCount = max(minCount - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                maxCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minCount == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>【TED演讲】贫穷不是你的问题</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=207418506&bvid=BV1ph411i7Gk&cid=392727951&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>缺乏某项资源的时候，将会无法更好获取这些资源<br>正如马太效应，富人有足够的本金进行投资变得更富有，而穷人只能不断努力生存，并且不断地被资本家剥削</p><p>而且视频中的研究表明，贫穷的时候的智商会比富有的时候降低14点，所以说<br>在资源受限的计算机上没法做大数据计算</p><p>因此，保障性收入应该成为一种权力，让大家都能吃得饱，穿的暖，有学上，能做自己喜欢做的事情<br>那样的世界才是美好的世界，是我们应该实现的世界</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/cuotangu3718/article/details/107039134" target="_blank" rel="noopener">Git Stash如何帮助您处理多个分支</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://51.ruyo.net/17008.html" target="_blank" rel="noopener">MobaXterm下载注册使用</a></p><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ol><li>下载便携版本</li><li>下载在线生成的注册码文件</li><li>注册码文件放到便携版本的exe下</li><li>注册码文件的命名不要修改，或者用的时候修改回生成时的名字<code>Custom.mxtpro</code></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc678_有效的括号字符串 【TED演讲】贫穷不是你的问题 Git Stash如何帮助您处理多个分支 MobaXterm下载注册使用
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第122周[122/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC122%E5%91%A8-122-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第122周-122-521/</id>
    <published>2021-09-05T02:42:48.000Z</published>
    <updated>2021-09-05T03:41:18.089Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc470_用Rand7()实现Rand10()</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>搞10次rand7(),然后除以7，这样就能 <code>10,70</code> —&gt; <code>1,10</code><br>但是第6个样例直接挂了…而且没有看到比8大的数</p><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>直接判断有多少个0.7，结果第7个样例挂了</p><h3 id="官方思路"><a href="#官方思路" class="headerlink" title="官方思路"></a>官方思路</h3><p>要均匀,所以均匀采样<br><a href="https://leetcode-cn.com/problems/implement-rand10-using-rand7/solution/yong-rand7-shi-xian-rand10-by-leetcode-s-qbmd/" target="_blank" rel="noopener">官方链接</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rand10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, idx;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            a = rand7();</span><br><span class="line">            b = rand7();</span><br><span class="line">            idx = b + (a - <span class="number">1</span>) * <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">if</span> (idx &lt;= <span class="number">40</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span> + (idx - <span class="number">1</span>) % <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            a = idx - <span class="number">40</span>;</span><br><span class="line">            b = rand7();</span><br><span class="line">            <span class="comment">// get uniform dist from 1 - 63</span></span><br><span class="line">            idx = b + (a - <span class="number">1</span>) * <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">if</span> (idx &lt;= <span class="number">60</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span> + (idx - <span class="number">1</span>) % <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            a = idx - <span class="number">60</span>;</span><br><span class="line">            b = rand7();</span><br><span class="line">            <span class="comment">// get uniform dist from 1 - 21</span></span><br><span class="line">            idx = b + (a - <span class="number">1</span>) * <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">if</span> (idx &lt;= <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span> + (idx - <span class="number">1</span>) % <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>【TED演讲】少数科技公司如何每天控制数亿人的思想</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=589554974&bvid=BV1Gq4y197g7&cid=380756690&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>现在的科技软件会不断吸引我们花费时间在手机上，我们应该学会抗拒，学会把时间花在自己真正重要的事情上面</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="http://archive.3zso.com/archives/plantuml-quickstart.html#sec-5-1" target="_blank" rel="noopener">PlantUML快速指南</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/120094967" target="_blank" rel="noopener">yum报错网络不可达，但是配置的网络能够ping通</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc470_用Rand7()实现Rand10() 【TED演讲】少数科技公司如何每天控制数亿人的思想 PlantUML快速指南 yum报错网络不可达，但是配置的网络能够ping通
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第121周[121/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC121%E5%91%A8-121-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第121周-121-521/</id>
    <published>2021-08-29T05:23:51.000Z</published>
    <updated>2021-08-29T08:31:28.617Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc1588_所有奇数长度子数组的和</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>感觉就是记录<code>(各点 i 距离中心的的距离 + 1) / 2 * a[i]</code>的和</p><p>对于偶数还是不太成熟…只对于奇数比较有用，这个规律也没有验证，推荐还是看题解的左右奇数个包含自己的个数值</p><p><a href="https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/solution/suo-you-qi-shu-chang-du-zi-shu-zu-de-he-yoaqu/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/solution/suo-you-qi-shu-chang-du-zi-shu-zu-de-he-yoaqu/</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumOddLengthSubarrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> leftCount = i, rightCount = n - i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> leftOdd = (leftCount + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> rightOdd = (rightCount + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> leftEven = leftCount / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> rightEven = rightCount / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            sum += arr[i] * (leftOdd * rightOdd + leftEven * rightEven);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://docs.ceph.com/en/latest/radosgw/adminops/#get-usage" target="_blank" rel="noopener">https://docs.ceph.com/en/latest/radosgw/adminops/#get-usage</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.huaweicloud.com/articles/479eeb85133ad46ad2759f75e3122c09.html" target="_blank" rel="noopener">POST跟GET请求的区别</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>git加签名<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cm -s -m &quot;signed-by test by add &apos;-s&apos;&quot;</span><br></pre></td></tr></table></figure><p></p><p>markdown展示diff效果, 在代码块后面加上 <code>diff</code><br></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- a</span></span><br><span class="line"><span class="addition">+ b</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc1588_所有奇数长度子数组的和 ceph-rgw文档 POST跟GET请求的区别 git加签名 markdown展示diff效果
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第120周[120/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC120%E5%91%A8-120-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第120周-120-521/</id>
    <published>2021-08-22T04:00:23.000Z</published>
    <updated>2021-08-22T05:25:01.786Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc<em>789</em>逃脱阻碍者</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>2021年08月22日12:09:45 我觉得可以简化为，只要你的最短路比鬼魂先到终点，你就赢，否则鬼魂可以到终点等你<br>2021年08月22日12:14:03 确实如此简单</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">manhattanDistance</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; point1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; point2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(point1[<span class="number">0</span>] - point2[<span class="number">0</span>]) + <span class="built_in">abs</span>(point1[<span class="number">1</span>] - point2[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">escapeGhosts</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; ghosts, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; source(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> distance = manhattanDistance(source, target);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; ghost : ghosts) &#123;</span><br><span class="line">            <span class="keyword">int</span> ghostDistance = manhattanDistance(ghost, target);</span><br><span class="line">            <span class="keyword">if</span> (ghostDistance &lt;= distance) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>【TED演讲】亲密关系很难，但为什么？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=716443329&bvid=BV1ZX4y1c7mp&cid=364569928&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>确认偏差，合理沟通，相互理解宽容</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/liangkaiming/article/details/5866174" target="_blank" rel="noopener">同步化，同步，异步化，异步操作的区别</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/119851598" target="_blank" rel="noopener">安装git 2.x遇到undefined reference to `libiconv‘</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc_789_逃脱阻碍者 【TED演讲】亲密关系很难，但为什么？ 同步化，同步，异步化，异步操作的区别 安装git 2.x遇到undefined reference to `libiconv‘
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第119周[119/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC119%E5%91%A8-119-521-1/"/>
    <id>https://www.wolfdan.cn/ARST打卡第119周-119-521-1/</id>
    <published>2021-08-15T03:25:18.000Z</published>
    <updated>2021-08-15T06:05:59.355Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc576_出界的路径数</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>直接bfs遍历搜索max_count步，然后有出界就+1</p><p>但是到达边界之后，它可以出界也可以绕圈，所以到达边界时有很多种</p><p>max_count = 1,那么只有直接出界(add_count = 靠近的边界数)，1，2，3，4都有可能<br>max_count = 2, 包含max_count = 1的情况，也有走其他方向后继续递归到max_count = 1的情况</p><p>2021年08月15日12:41:16 搞了一个小时，然后<code>76 / 94 个通过测试用例</code>, 第76个用例超时了，自己菜了好多，看题解吧</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="超时代码分析"><a href="#超时代码分析" class="headerlink" title="超时代码分析"></a>超时代码分析</h3><p>因为可以走回头路的原因<br>朴素的层序宽搜每一层引入的路径节点的数量会随着深度呈指数数级扩张，导致最后遍历不动</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pos_count</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> m_x;</span><br><span class="line">        <span class="keyword">int</span> m_y;</span><br><span class="line">        <span class="keyword">int</span> m_rem_count;</span><br><span class="line">        pos_count(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> rem_count) : m_x(x), m_y(y), m_rem_count(rem_count) &#123;&#125;</span><br><span class="line">    &#125; <span class="keyword">pos_count_t</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算出靠近几个边界 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">edgeCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        tmp += x == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>; </span><br><span class="line">        tmp += x == m - <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>; </span><br><span class="line">        tmp += y == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>; </span><br><span class="line">        tmp += y == n - <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> tmp; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> maxMove, <span class="keyword">int</span> startRow, <span class="keyword">int</span> startColumn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (maxMove &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span> &amp;&amp; n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>; <span class="comment">// 直接4个方向一次出去</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">pos_count_t</span>&gt; Q;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">int</span> xf[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> yf[] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> fi, se, remMove;</span><br><span class="line">        Q.push(&#123;startRow, startColumn, maxMove&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">pos_count_t</span> tmp = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            fi = tmp.m_x;</span><br><span class="line">            se = tmp.m_y;</span><br><span class="line">            remMove = tmp.m_rem_count - <span class="number">1</span>;</span><br><span class="line">            ans = (ans + edgeCount(m, n, fi, se)) % mod;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (remMove == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = fi + xf[i];</span><br><span class="line">                <span class="keyword">int</span> y = se + yf[i];</span><br><span class="line">                <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; m - <span class="number">1</span> || y &lt; <span class="number">0</span> || y &gt; n - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Q.push(&#123;x, y, remMove&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="正确dp姿势"><a href="#正确dp姿势" class="headerlink" title="正确dp姿势"></a>正确dp姿势</h2><p><a href="https://leetcode-cn.com/problems/out-of-boundary-paths/solution/chu-jie-de-lu-jing-shu-by-leetcode-solut-l9dw/" target="_blank" rel="noopener">题解</a><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> MOD = <span class="number">1'000'000'007</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> maxMove, <span class="keyword">int</span> startRow, <span class="keyword">int</span> startColumn)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; directions = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> outCounts = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; dp(maxMove + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n)));</span><br><span class="line">        dp[<span class="number">0</span>][startRow][startColumn] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxMove; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> count = dp[i][j][k];</span><br><span class="line">                    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;direction : directions) &#123;</span><br><span class="line">                            <span class="keyword">int</span> j1 = j + direction[<span class="number">0</span>], k1 = k + direction[<span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span> (j1 &gt;= <span class="number">0</span> &amp;&amp; j1 &lt; m &amp;&amp; k1 &gt;= <span class="number">0</span> &amp;&amp; k1 &lt; n) &#123;</span><br><span class="line">                                dp[i + <span class="number">1</span>][j1][k1] = (dp[i + <span class="number">1</span>][j1][k1] + count) % MOD;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                outCounts = (outCounts + count) % MOD;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outCounts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h1 id="Reviews"><a href="#Reviews" class="headerlink" title="Reviews"></a>Reviews</h1><p>【TED演讲】不要为难民难过，请相信他们</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=759508817&bvid=BV1J64y1B7Nq&cid=380758541&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>没有人应该被抛弃，平等地接纳他人，不要可怜他人，要相信他人</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://docs.python.org/zh-cn/3/howto/logging.html" target="_blank" rel="noopener">python日志最佳实践</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/119574697" target="_blank" rel="noopener">字符拼接数字[最佳实践]</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/119574737?spm=1001.2014.3001.5501" target="_blank" rel="noopener">snprintf返回值判断-返回值深入实践分析</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc576_出界的路径数 【TED演讲】不要为难民难过，请相信他们 python日志最佳实践 字符拼接数字[最佳实践] snprintf返回值判断-返回值深入实践分析
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第118周[118/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC118%E5%91%A8-118-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第118周-118-521/</id>
    <published>2021-08-08T06:41:53.000Z</published>
    <updated>2021-08-08T07:24:29.225Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc1137_第N个泰波那契数</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>想到的是直接本地运算，然后打表</li><li>打表找规律，然后直接用计算式做</li></ol><p>然后发现是要<a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/solution/di-n-ge-tai-bo-na-qi-shu-by-leetcode-sol-kn16/" target="_blank" rel="noopener">用矩阵快速幂(看题解答案吧)</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">tribonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt; q = &#123;&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt; res = <span class="built_in">pow</span>(q, n);</span><br><span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt; <span class="built_in">pow</span>(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt;&amp; a, <span class="keyword">long</span> n) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt; ret = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                ret = multiply(ret, a);</span><br><span class="line">            &#125;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            a = multiply(a, a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt; multiply(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt;&amp; a, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt;&amp; b) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt; c(<span class="number">3</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;(<span class="number">3</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                c[i][j] = a[i][<span class="number">0</span>] * b[<span class="number">0</span>][j] + a[i][<span class="number">1</span>] * b[<span class="number">1</span>][j] + a[i][<span class="number">2</span>] * b[<span class="number">2</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://social.msdn.microsoft.com/Forums/office/en-US/889e7497-3bab-42dc-b4fe-1952890351af/smb2-what-is-msftewds-and-srvsvc-files?forum=os_fileservices" target="_blank" rel="noopener">SMB2: what is MsFteWds and Srvsvc files?</a></p><p><a href="https://docs.microsoft.com/en-us/windows/win32/ipc/named-pipes" target="_blank" rel="noopener">Named Pipes</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://mlog.club/article/483735" target="_blank" rel="noopener">如何在python中隐藏密码</a></p><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA" target="_blank" rel="noopener">Git分支-变基</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/119411852?spm=1001.2014.3001.5501" target="_blank" rel="noopener">python变量是否在类中-普通常规类也可以判断</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc1137_第N个泰波那契数 what is MsFteWds and Srvsvc files? Named Pipes 如何在python中隐藏密码 Git分支-变基 python变量是否在类中-普通常规类也可以判断
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第117周[117/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC117%E5%91%A8-117-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第117周-117-521/</id>
    <published>2021-08-01T04:38:02.000Z</published>
    <updated>2021-08-01T07:15:45.250Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc<em>1337</em>矩阵中战斗力最弱的K行</p><p>2021年08月01日12:41 应该就是把 count, lien_id绑定,然后排序，AC，下面给出自己的题解</p><ol><li>可以优化的地方，二分选择出行中最后的一个1的位置</li><li>可以建堆或者选择排序来优化快速排序所有元素</li></ol><p>这两个优化都可以去lc官网看题解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a, <span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.first != b.first) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2021年08月01日12:41 应该就是把 count, lien_id绑定,然后排序</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; kWeakestRows(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mat.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> lien_count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> x : mat[i]) &#123;</span><br><span class="line">                lien_count += x;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.push_back(&#123;lien_count, i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(tmp.begin(), tmp.end(), comp);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            ans.push_back(tmp[i].second);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲一个让记忆力提升3倍的技巧</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=291295023&bvid=BV1ef4y1t7En&cid=359521145&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>1.检查：检查自己现在的记忆方法有什么不好。<br>（比如只是不停的重复背诵导致毫无效果）<br>2.体验：让自己开放地接受各种不同方法，并找到适合自己最佳的记忆方法。<br>（比如演讲者现场描述的情景记忆，利用身体器官辅助记忆）<br>3.实验：将最适合自己的方法运用到实际中。<br>其实在各个领域都需要记忆，因为这样你会比其他人做得更好。让自己时刻保持开放，这样就能不断调整转换记忆方式，与时俱进。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/u010982765/article/details/79021426" target="_blank" rel="noopener">错误：reference to non-static member function must be called</a></p><p><a href="https://www.cnblogs.com/AnnieKim/archive/2011/12/04/2275589.html" target="_blank" rel="noopener">指向类成员的指针</a></p><h1 id="Share-gdb调试smb"><a href="#Share-gdb调试smb" class="headerlink" title="Share-gdb调试smb"></a>Share-gdb调试smb</h1><ol><li>windows打开共享目录，并留意当前时间<ol><li><strong>如果是脚本跑，给你的脚本下断点</strong></li></ol></li><li><code>/usr/local/samba/bin/smbstatus</code> 找出对应时间对应客户端ip的 pid</li><li><code>gdb attach ${pid}</code></li><li>b 对应函数</li><li>c（直接继续运行）</li><li>操作文件调试，看断点附近的内容<ol><li>p\x 变量 （这样可以输出16进制）</li></ol></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc_1337_矩阵中战斗力最弱的K行 TED演讲一个让记忆力提升3倍的技巧 错误：reference to non-static member function must be called 指向类成员的指针 gdb调试smb
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第116周[116/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC116%E5%91%A8-116-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第116周-116-521/</id>
    <published>2021-07-25T02:59:25.000Z</published>
    <updated>2021-07-25T03:51:45.222Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc-1743_从相邻元素对还原数组</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>想到的是直接遍历，然后用set找出只出现过一次的两个数，并记录下标，然后选择一个数开始连接</p><p>每次都遍历找出一个的，复杂度达到了O(n^2),所以记录相邻表，然后就可以降低到O(n)</p><p><a href="https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs/solution/cong-xiang-lin-yuan-su-dui-huan-yuan-shu-v55t/" target="_blank" rel="noopener">官方题解也是如此</a></p><p><del>自己没有动手实现，真懒，下不为例</del><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; restoreArray(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; adjacentPairs) &#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; adjacentPair : adjacentPairs) &#123;</span><br><span class="line">            mp[adjacentPair[<span class="number">0</span>]].push_back(adjacentPair[<span class="number">1</span>]);</span><br><span class="line">            mp[adjacentPair[<span class="number">1</span>]].push_back(adjacentPair[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组中的值除了首尾都出现了两次，那么再让首尾组成一队，再出现一次</span></span><br><span class="line">        <span class="comment">// 这样的adjacentPairs的size就和原数组size一致了，所以是+1</span></span><br><span class="line">        <span class="keyword">int</span> n = adjacentPairs.size() + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [e, adj] : mp) &#123;</span><br><span class="line">            <span class="comment">// 找到首尾中的一个，就找只有一个邻接元素的</span></span><br><span class="line">            <span class="keyword">if</span> (adj.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                ret[<span class="number">0</span>] = e;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ret[<span class="number">1</span>] = mp[ret[<span class="number">0</span>]][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp; adj = mp[ret[i - <span class="number">1</span>]];</span><br><span class="line">            <span class="comment">// 找到相邻中的另一个</span></span><br><span class="line">            ret[i] = ret[i - <span class="number">2</span>] == adj[<span class="number">0</span>] ? adj[<span class="number">1</span>] : adj[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>阅读smbprotocol的部分源码</p><p>发现几个基础，但有很经典实用的点</p><h2 id="利用子类比父类先调用构造函数，在父类构造函数中给子类赋值父指针为self"><a href="#利用子类比父类先调用构造函数，在父类构造函数中给子类赋值父指针为self" class="headerlink" title="利用子类比父类先调用构造函数，在父类构造函数中给子类赋值父指针为self"></a>利用子类比父类先调用构造函数，在父类构造函数中给子类赋值父指针为self</h2><p>smbprotocol/open.py /<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMB2CreateRequest</span><span class="params">(Structure)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    [MS-SMB2] v53.0 2017-09-15</span></span><br><span class="line"><span class="string">    2.2.13 SMB2 CREATE Request</span></span><br><span class="line"><span class="string">    The SMB2 Create Request packet is sent by a client to request either</span></span><br><span class="line"><span class="string">    creation of or access to a file.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    COMMAND = Commands.SMB2_CREATE</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># pep 80 char issues force me to define this here</span></span><br><span class="line">        create_con_req = SMB2CreateContextRequest</span><br><span class="line">        self.fields = OrderedDict([</span><br><span class="line">            (<span class="string">'structure_size'</span>, IntField(</span><br><span class="line">                size=<span class="number">2</span>,</span><br><span class="line">                default=<span class="number">57</span>,</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'security_flags'</span>, IntField(size=<span class="number">1</span>)),</span><br><span class="line">            (<span class="string">'requested_oplock_level'</span>, EnumField(</span><br><span class="line">                size=<span class="number">1</span>,</span><br><span class="line">                enum_type=RequestedOplockLevel</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'impersonation_level'</span>, EnumField(</span><br><span class="line">                size=<span class="number">4</span>,</span><br><span class="line">                enum_type=ImpersonationLevel</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'smb_create_flags'</span>, IntField(size=<span class="number">8</span>)),</span><br><span class="line">            (<span class="string">'reserved'</span>, IntField(size=<span class="number">8</span>)),</span><br><span class="line">            (<span class="string">'desired_access'</span>, IntField(size=<span class="number">4</span>)),</span><br><span class="line">            (<span class="string">'file_attributes'</span>, IntField(size=<span class="number">4</span>)),</span><br><span class="line">            (<span class="string">'share_access'</span>, FlagField(</span><br><span class="line">                size=<span class="number">4</span>,</span><br><span class="line">                flag_type=ShareAccess</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'create_disposition'</span>, EnumField(</span><br><span class="line">                size=<span class="number">4</span>,</span><br><span class="line">                enum_type=CreateDisposition</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'create_options'</span>, FlagField(</span><br><span class="line">                size=<span class="number">4</span>,</span><br><span class="line">                flag_type=CreateOptions</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'name_offset'</span>, IntField(</span><br><span class="line">                size=<span class="number">2</span>,</span><br><span class="line">                default=<span class="number">120</span>  <span class="comment"># (header size 64) + (structure size 56)</span></span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'name_length'</span>, IntField(</span><br><span class="line">                size=<span class="number">2</span>,</span><br><span class="line">                default=<span class="keyword">lambda</span> s: self._name_length(s)</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'create_contexts_offset'</span>, IntField(</span><br><span class="line">                size=<span class="number">4</span>,</span><br><span class="line">                default=<span class="keyword">lambda</span> s: self._create_contexts_offset(s)</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'create_contexts_length'</span>, IntField(</span><br><span class="line">                size=<span class="number">4</span>,</span><br><span class="line">                default=<span class="keyword">lambda</span> s: len(s[<span class="string">'buffer_contexts'</span>])</span><br><span class="line">            )),</span><br><span class="line">            <span class="comment"># Technically these are all under buffer but we split it to make</span></span><br><span class="line">            <span class="comment"># things easier</span></span><br><span class="line">            (<span class="string">'buffer_path'</span>, BytesField(</span><br><span class="line">                size=<span class="keyword">lambda</span> s: self._buffer_path_size(s),</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'padding'</span>, BytesField(</span><br><span class="line">                size=<span class="keyword">lambda</span> s: self._padding_size(s),</span><br><span class="line">                default=<span class="keyword">lambda</span> s: <span class="string">b"\x00"</span> * self._padding_size(s)</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'buffer_contexts'</span>, ListField(</span><br><span class="line">                size=<span class="keyword">lambda</span> s: s[<span class="string">'create_contexts_length'</span>].get_value(),</span><br><span class="line">                list_type=StructureField(</span><br><span class="line">                    structure_type=create_con_req</span><br><span class="line">                ),</span><br><span class="line">                unpack_func=<span class="keyword">lambda</span> s, d: self._buffer_context_list(s, d)</span><br><span class="line">            ))</span><br><span class="line">        ])</span><br><span class="line">        super(SMB2CreateRequest, self).__init__()</span><br></pre></td></tr></table></figure><p></p><p>smbprotocol/structure.py /<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Structure</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Now that self.fields is set, loop through it again and set the</span></span><br><span class="line">        <span class="comment"># metadata around the fields and set the value based on default.</span></span><br><span class="line">        <span class="comment"># This must be done outside of the OrderedDict definition as set_value</span></span><br><span class="line">        <span class="comment"># relies on the full structure (self) being available and error</span></span><br><span class="line">        <span class="comment"># messages use the field name to be helpful</span></span><br><span class="line">        <span class="keyword">for</span> name, field <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            field.structure = self</span><br><span class="line">            field.name = name</span><br><span class="line">            field.set_value(field.default)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        struct_name = self.__class__.__name__</span><br><span class="line">        raw_hex = _bytes_to_hex(self.pack(), <span class="literal">True</span>, hex_per_line=<span class="number">0</span>)</span><br><span class="line">        field_strings = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> name, field <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            <span class="comment"># the field header is slightly different for a StructureField</span></span><br><span class="line">            <span class="comment"># remove the leading space and put the value on the next line</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(field, StructureField):</span><br><span class="line">                field_header = <span class="string">"%s =\n%s"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                field_header = <span class="string">"%s = %s"</span></span><br><span class="line"></span><br><span class="line">            field_string = field_header % (field.name, str(field))</span><br><span class="line">            field_strings.append(_indent_lines(field_string, TAB))</span><br><span class="line"></span><br><span class="line">        field_strings.append(<span class="string">""</span>)</span><br><span class="line">        field_strings.append(_indent_lines(<span class="string">"Raw Hex:"</span>, TAB))</span><br><span class="line">        hex_wrapper = textwrap.TextWrapper(</span><br><span class="line">            width=<span class="number">33</span>,  <span class="comment"># set to show 8 hex values per line, 33 for 8, 56 for 16</span></span><br><span class="line">            initial_indent=TAB + TAB,</span><br><span class="line">            subsequent_indent=TAB + TAB</span><br><span class="line">        )</span><br><span class="line">        field_strings.append(hex_wrapper.fill(raw_hex))</span><br><span class="line"></span><br><span class="line">        string = <span class="string">"%s:\n%s"</span> % (to_native(struct_name), <span class="string">'\n'</span>.join([to_native(s) <span class="keyword">for</span> s <span class="keyword">in</span> field_strings]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        field = self._get_field(key)</span><br><span class="line">        field.set_value(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._get_field(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self._get_field(key)</span><br><span class="line">        <span class="keyword">del</span> self.fields[key]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> field <span class="keyword">in</span> self.fields.values():</span><br><span class="line">            length += len(field)</span><br><span class="line">        <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pack</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = <span class="string">b""</span></span><br><span class="line">        <span class="keyword">for</span> field <span class="keyword">in</span> self.fields.values():</span><br><span class="line">            field_data = field.pack()</span><br><span class="line">            data += field_data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unpack</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        mem = memoryview(data)</span><br><span class="line">        <span class="keyword">for</span> key, field <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            mem = field.unpack(mem)</span><br><span class="line">        <span class="keyword">return</span> bytes(mem)  <span class="comment"># remaining data</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_field</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        field = self.fields.get(key, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> field <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Structure does not contain field %s"</span> % key)</span><br><span class="line">        <span class="keyword">return</span> field</span><br></pre></td></tr></table></figure><p></p><h2 id="构造函数中的匿名表达式在pack-使用时确定实际值"><a href="#构造函数中的匿名表达式在pack-使用时确定实际值" class="headerlink" title="构造函数中的匿名表达式在pack()使用时确定实际值"></a>构造函数中的匿名表达式在pack()使用时确定实际值</h2><p>smbprotocol/structure.py<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_calculated_value</span><span class="params">(self, value)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Get's the final value of the field and runs the lambda functions</span></span><br><span class="line"><span class="string">    recursively until a final value is derived.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param value: The value to calculate/expand</span></span><br><span class="line"><span class="string">    :return: The final value</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(value, types.LambdaType):</span><br><span class="line">        expanded_value = value(self.structure)</span><br><span class="line">        <span class="keyword">return</span> self._get_calculated_value(expanded_value)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># perform one final parsing of the value in case lambda value</span></span><br><span class="line">        <span class="comment"># returned a different type</span></span><br><span class="line">        <span class="keyword">return</span> self._parse_value(value)</span><br></pre></td></tr></table></figure><p></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://zhuanlan.zhihu.com/p/58073103" target="_blank" rel="noopener">zsh &amp; oh-my-zsh 的配置与使用</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451447842528" target="_blank" rel="noopener">python匿名函数</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/119003240" target="_blank" rel="noopener">美化zsh，以及配置时间戳显示</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc-1743_从相邻元素对还原数组 阅读smbprotocol的部分源码 zsh &amp; oh-my-zsh 的配置与使用 python匿名函数 美化zsh，以及配置时间戳显示
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第115周[115/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC115%E5%91%A8-115-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第115周-115-521/</id>
    <published>2021-07-18T05:17:15.000Z</published>
    <updated>2021-07-18T06:15:41.558Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>leetcode_面试题 10.02. 变位词组<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; groupAnagrams(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs) &#123;</span><br><span class="line">        <span class="comment">// 可以对每个单词进行sort，然后对比是否有，无则计入list，用python写比较方便</span></span><br><span class="line">        <span class="comment">// 不行，这样就nlog(n)*n了...</span></span><br><span class="line">        <span class="comment">// 维护hash表，也要n*n，看看答案吧</span></span><br><span class="line">        <span class="comment">// 2021年07月18日13:44:48 发现自己方法对了，计算时间复杂度计算错了</span></span><br><span class="line">        <span class="comment">// 实际上是n * klog(k) ，hash表是 n * (k + 26)</span></span><br><span class="line">        <span class="comment">// 见https://leetcode-cn.com/problems/group-anagrams-lcci/solution/bian-wei-ci-zu-by-leetcode-solution-g2a8/</span></span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span>&amp; str: strs) &#123;</span><br><span class="line">            <span class="built_in">string</span> key = str;</span><br><span class="line">            sort(key.begin(), key.end());</span><br><span class="line">            mp[key].emplace_back(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = mp.begin(); it != mp.end(); ++it) &#123;</span><br><span class="line">            ans.emplace_back(it-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲-如果幸福可以衡量，你的幸福得分是多少？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=846409213&bvid=BV1g54y1p779&cid=363063641&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>我们可以换个角度思考我们是否幸福，我们可以自己决定自己是否幸福</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://cloud.tencent.com/developer/article/1603833" target="_blank" rel="noopener">5个案例让Python输出漂亮的表格</a></p><p><a href="https://blog.csdn.net/u011417820/article/details/71435031" target="_blank" rel="noopener">Linux生成core文件、core文件路径设置</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/118812311" target="_blank" rel="noopener">Python表格输出长数据自动换行[最佳实践]</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      leetcode_面试题 10.02. 变位词组 TED演讲-如果幸福可以衡量，你的幸福得分是多少？ 5个案例让Python输出漂亮的表格 Linux生成core文件、core文件路径设置 Python表格输出长数据自动换行[最佳实践]
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第114周[114/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC114%E5%91%A8-114-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第114周-114-521/</id>
    <published>2021-07-11T02:19:43.000Z</published>
    <updated>2021-07-11T02:30:08.204Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc274-H指数</p><p>简单的思路是先排序再从大到小遍历，但是计数排序更佳<br>可以看<a href="https://leetcode-cn.com/problems/h-index/solution/h-zhi-shu-by-leetcode-solution-fnhl/" target="_blank" rel="noopener">详细题解</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = citations.size(), tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; counter(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (citations[i] &gt;= n) &#123;</span><br><span class="line">                counter[n]++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                counter[citations[i]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            tot += counter[i];</span><br><span class="line">            <span class="keyword">if</span> (tot &gt;= i) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://wiki.samba.org/index.php/Samba_codebase_organization" target="_blank" rel="noopener">Samba codebase organization</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/hittata/article/details/8041329" target="_blank" rel="noopener">linux设置动态库搜索路径三种方式</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://time.geekbang.org/opencourse/intro/100077801" target="_blank" rel="noopener">极客时间-投资第一课</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc274-H指数 Samba codebase organization linux设置动态库搜索路径三种方式 极客时间-投资第一课
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第113周[113/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC113%E5%91%A8-113-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第113周-113-521/</id>
    <published>2021-07-04T06:07:25.000Z</published>
    <updated>2021-07-04T06:14:13.873Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 14 2021 23:22:15 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc645_错误的集合</p><p>标记数组查找法—直观有效<br>题解还有位运算方法，但要多次遍历，省了一点点空间，可以去参考<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findErrorNums(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> sz = nums.size();</span><br><span class="line">        <span class="keyword">bool</span> vis[sz + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, sz + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[x]) &#123;</span><br><span class="line">                ans.push_back(x);</span><br><span class="line">            &#125;</span><br><span class="line">            vis[x] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sz + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">                ans.push_back(i);</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/e8fb45c1-a03d-44ca-b7ae-47385cfd7997" target="_blank" rel="noopener">SMB协议文档</a></p><h1 id="Tips-python获取文件长度"><a href="#Tips-python获取文件长度" class="headerlink" title="Tips-python获取文件长度"></a>Tips-python获取文件长度</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file.seek(<span class="number">0</span>, os.SEEK_END)</span><br><span class="line"><span class="comment"># 这样就能移动到文件尾，然后用</span></span><br><span class="line">file.tell()</span><br><span class="line"><span class="comment"># 获得文件长度</span></span><br></pre></td></tr></table></figure><h1 id="Share-git提交代码最佳实践"><a href="#Share-git提交代码最佳实践" class="headerlink" title="Share-git提交代码最佳实践"></a>Share-git提交代码最佳实践</h1><h2 id="当推代码不顺利"><a href="#当推代码不顺利" class="headerlink" title="当推代码不顺利"></a>当推代码不顺利</h2><ul><li>先push -f,易翻车 （以后禁用）</li><li>reset再推，也易翻车 （在未pull下易翻车）</li><li>最稳妥的是先回源分支pull，然后新建分支，cherry pick老分支的东西，最后再推，然后删掉老分支</li></ul><h3 id="删掉本地分支和远程分支"><a href="#删掉本地分支和远程分支" class="headerlink" title="删掉本地分支和远程分支"></a>删掉本地分支和远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// delete branch locally</span><br><span class="line">git branch -d localBranchName</span><br><span class="line"></span><br><span class="line">// delete branch remotely</span><br><span class="line">git push origin --delete remoteBranchName</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc645_错误的集合 SMB协议文档 python获取文件长度 git提交代码最佳实践
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
</feed>
