<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>单林敏的博客</title>
  
  <subtitle>wolfdan&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wolfdan.cn/"/>
  <updated>2021-01-17T09:08:38.200Z</updated>
  <id>https://www.wolfdan.cn/</id>
  
  <author>
    <name>单林敏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ARST打卡第89周[89/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC89%E5%91%A8-89-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第89周-89-521/</id>
    <published>2021-01-15T14:14:03.000Z</published>
    <updated>2021-01-17T09:08:38.200Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/947_%E7%A7%BB%E9%99%A4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%90%8C%E8%A1%8C%E6%88%96%E5%90%8C%E5%88%97%E7%9F%B3%E5%A4%B4.c" target="_blank" rel="noopener">LeetCode/947_移除最多的同行或同列石头</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：生命只有一次，请活得灿烂</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=586235320&bvid=BV1Ez4y1S7CW&cid=282758586&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>如果苦难必将发生，那么我们唯一能做的是改变自己面对苦难的态度</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.runoob.com/w3cnote/c-assert.html" target="_blank" rel="noopener">断言(assert)的用法</a></p><h1 id="Share-正则匹配函数封装"><a href="#Share-正则匹配函数封装" class="headerlink" title="Share - 正则匹配函数封装"></a>Share - 正则匹配函数封装</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 正则表达式匹配检查</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param [in] reg_str 正则表达式</span></span><br><span class="line"><span class="comment"> * @param [in] check_str 待检测的字符串</span></span><br><span class="line"><span class="comment"> * @return int 匹配失败返回-1，匹配成功返回0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reg_check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *reg_str, <span class="keyword">const</span> <span class="keyword">char</span> *check_str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *pattern;</span><br><span class="line">    <span class="keyword">int</span> i, ret, cflags = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">regex_t</span> reg;</span><br><span class="line">    <span class="keyword">regmatch_t</span> pm[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> nmatch = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 编译正则表达式*/</span></span><br><span class="line">    pattern = reg_str;</span><br><span class="line">    ret = regcomp(&amp;reg, pattern, cflags);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        regerror(ret, &amp;reg, ebuf, <span class="keyword">sizeof</span>(ebuf));</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s: pattern '%s' \n"</span>, ebuf, pattern);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 处理输入的数据 */</span></span><br><span class="line">    <span class="keyword">char</span> *<span class="keyword">check_str_t</span> = (<span class="keyword">char</span> *)check_str;</span><br><span class="line">    <span class="keyword">if</span> ((ret = <span class="built_in">strlen</span>(<span class="keyword">check_str_t</span>)) &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">check_str_t</span>[ret - <span class="number">1</span>] == <span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">check_str_t</span>[ret - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 对每一行应用正则表达式进行匹配 */</span></span><br><span class="line">    ret = regexec(&amp;reg, <span class="keyword">check_str_t</span>, nmatch, pm, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret == REG_NOMATCH) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        regerror(ret, &amp;reg, ebuf, <span class="keyword">sizeof</span>(ebuf));</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s: regcom('%s')\n"</span>, ebuf, <span class="keyword">check_str_t</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 输出处理结果 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmatch &amp;&amp; pm[i].rm_so != <span class="number">-1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> one_match_len = pm[i].rm_eo - pm[i].rm_so;</span><br><span class="line">        <span class="keyword">int</span> str_sz = <span class="built_in">strlen</span>(<span class="keyword">check_str_t</span>);</span><br><span class="line">        <span class="keyword">if</span> (one_match_len == str_sz) &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 释放正则表达式 */</span></span><br><span class="line">    regfree(&amp;reg);</span><br><span class="line">    <span class="keyword">return</span> flag == <span class="number">1</span> ? <span class="number">0</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 对check_str做json key的参数校验</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param [in] check_str 待检测的json key</span></span><br><span class="line"><span class="comment"> * @return int 匹配失败返回-1，匹配成功返回0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">json_key_check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *check_str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *json_str = <span class="string">"[a-zA-Z_][a-zA-Z_0-9-]*"</span>;</span><br><span class="line">    <span class="keyword">return</span> reg_check(json_str, check_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/947_移除最多的同行或同列石头 如果苦难必将发生，那么我们唯一能做的是改变自己面对苦难的态度 断言(assert)的用法 正则匹配函数封装
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第88周[88/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC88%E5%91%A8-88-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第88周-88-521/</id>
    <published>2021-01-10T06:20:24.000Z</published>
    <updated>2021-01-10T07:01:24.081Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/228_%E6%B1%87%E6%80%BB%E5%8C%BA%E9%97%B4.cpp" target="_blank" rel="noopener">LeetCode/228_汇总区间</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>托尼罗宾斯：做自己的大师.Tony.Robbins.I.Am.Not.Your.Guru.2016</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=43778742&bvid=BV11b411y7AW&cid=76684251&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>感谢那些苦难，正是那些苦难，塑造了如此坚强，如果优秀的你，你能够撑过来，真的是太了不起了</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.macwk.com/special" target="_blank" rel="noopener">mac软件下载的好用网站</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>珍爱生命</p><p>1月3日爆出98年拼多多买菜女员工凌晨猝死</p><p>1月9日中午拼多多一名研发人员在长沙家中跳27楼自杀(1月8号和主管请假飞回长沙)</p><p>太多的令人心痛的事情，让我们不得不深思我们的身体健康以及心理健康</p><p>所以，每天给自己一点时间进行身体锻炼和心理锻炼</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/228_汇总区间 托尼罗宾斯：做自己的大师. 感谢那些苦难，正是那些苦难，塑造了如此坚强，如果优秀的你，你能够撑过来，真的是太了不起了 mac软件下载的好用网站 珍爱生命
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第87周[87/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC87%E5%91%A8-87-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第87周-87-521/</id>
    <published>2021-01-02T08:09:25.000Z</published>
    <updated>2021-01-02T08:52:38.962Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/239_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.cpp" target="_blank" rel="noopener">LeetCode/239_滑动窗口最大值</a></p><h1 id="Reviews"><a href="#Reviews" class="headerlink" title="Reviews"></a>Reviews</h1><p>为什么你会厌恶别人？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=970866001&bvid=BV18p4y1B7yS&cid=272445600&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>视频中主要讲的点：</p><ol><li>自己的独处时间不够</li><li>和他人观点意见有不同甚至处于对立</li><li>心中有怨念，很难原谅伤害过你的人或很难释怀经历过的事</li><li>生活方式导致，工作中总有不愉快社交发生</li><li>他人触犯到自己的边界</li><li>厌恶形成了一种习惯</li><li>只是因为无法得到而嫉妒他人</li></ol><p>我觉得很有趣的一个点：<br>就是当你先入为主想着别人很讨厌的时候，那么你就会找到很多的证据佐证你的观点</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.cnblogs.com/kevingrace/p/7525200.html" target="_blank" rel="noopener">Supervisor(进程管理利器)使用说明</a></p><h1 id="Share-Linux使用新的硬盘"><a href="#Share-Linux使用新的硬盘" class="headerlink" title="Share - Linux使用新的硬盘"></a>Share - Linux使用新的硬盘</h1><p>分区—LV—格式化文件系统—挂载文件系统—呈现可访问的文件</p><ol><li>lsblk查看盘</li><li>parted操作<ol><li>parted /dev/your_dev print 查看</li><li>parted -s /dev/your_dev malabel gpt 设置分区表类型</li><li>parted -s /dev/your_dev — mkpart primary 1MB 100% 从1MB开始分这个盘的100% —- 一个设备可以设置多个分区</li><li>parted /dev/your_dev print 查看</li></ol></li><li>pvcreate /dev/your_dev 创建物理卷</li><li>pvdisplay 查看状态</li><li>vgcreate your_volume_group_name /dev/your_dev 创建卷组</li><li>vgdisplay 查看</li><li>lvcreate -L 10G your_volume_group_name -m your_logical_group_name 创建逻辑卷</li><li>lvs 查看</li><li>lsblk 查看发现如下结构，就是your_dev下创建了一个物理分区your_dev1，然后物理分区下有一个独立可用的逻辑分区your_volume_group_name-your_logical_group_name<ul><li>your_dev<ul><li>your_dev1<ul><li>your_volume_group_name-your_logical_group_name</li></ul></li></ul></li></ul></li><li>mkfs -t ext4 /dev/mapper/your_volume_group_name-your_logical_group_name 格式化成ext4格式的文件（新的逻辑分区在<code>/dev/mapper</code>下</li><li>mkdir /mnt/mytest 创建一个目录</li><li>mount /dev/mapper/your_volume_group_name-your_logical_group_name /mnt/mytest 把自己目录挂到逻辑设备上，可以针对文件的读写，就写到了磁盘上面</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/239_滑动窗口最大值 为什么你会厌恶别人？ Supervisor(进程管理利器)使用说明 Linux使用新的硬盘
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第86周[86/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC86%E5%91%A8-86-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第86周-86-521/</id>
    <published>2020-12-27T06:32:52.000Z</published>
    <updated>2020-12-27T07:06:51.297Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/205_%E5%90%8C%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2.cpp" target="_blank" rel="noopener">LeetCode/205_同构字符串</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>克服上瘾的3条准则</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=670736474&bvid=BV13a4y1p7Ee&cid=267033472&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>一、你需要一个爱好，这能带来美好的情绪<br>二、照顾好自己的身体，养成健康的饮食习惯，并且定期锻炼<br>三、主动社交，联系老朋友，结识新朋友，你会感受到与他人连结的快乐感</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="Python防止listdir阻塞"><a href="#Python防止listdir阻塞" class="headerlink" title="Python防止listdir阻塞"></a>Python防止listdir阻塞</h2><p>CPython的实现os.listdir使用特定于平台的C库调用来读取目录的内容。在类似Unix的平台上，它们是opendir(3)and readdir(3)，而在Windows上则使用FindFirstFileand FindNextFile。</p><p>在无法访问的网络文件系统的情况下，这些调用的行为将取决于操作系统。当使用Linux或Windows时，它们肯定会在系统命令（例如lshang）挂起的情况下挂起。为了防止任意长时间的停顿，可以使用专用框架，例如asyncio和twisted，它们使用非阻塞IO。但是，使用这些框架可能会让人望而生畏，并且通常需要在整个应用程序和整个程序中使用它们来构建事件驱动的模型。</p><p>确保存在网络文件系统时IO系统调用不会阻塞的一种更简单且对初学者友好的方法是使用线程。例如，这是一个safe_listdir返回目录内容的函数，或者None调用所花费的时间超过指定的超时时间：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_listdir</span><span class="params">(directory, timeout)</span>:</span></span><br><span class="line">    contents = []</span><br><span class="line">    t = threading.Thread(target=<span class="keyword">lambda</span>: contents.extend(os.listdir(directory)))</span><br><span class="line">    t.daemon = <span class="literal">True</span>  <span class="comment"># don't delay program's exit</span></span><br><span class="line">    t.start()</span><br><span class="line">    t.join(timeout)</span><br><span class="line">    <span class="keyword">if</span> t.is_alive():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># timeout</span></span><br><span class="line">    <span class="keyword">return</span> contents</span><br></pre></td></tr></table></figure><p></p><p>在Python 3中，可以使用出色的concurrent.futures软件包。它不仅简化了实现，而且还自动限制了多次safe_listdir调用时创建的线程的数量，并确保将引发的异常os.listdir正确传播到调用者：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, concurrent.futures</span><br><span class="line">pool = concurrent.futures.ThreadPoolExecutor()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_listdir</span><span class="params">(directory, timeout)</span>:</span></span><br><span class="line">    future = pool.submit(os.listdir, directory)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> future.result(timeout)</span><br><span class="line">    <span class="keyword">except</span> concurrent.futures.TimeoutError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># timeout</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.pythonheidong.com/blog/article/205417/d551d6932f331e9ec337/" target="_blank" rel="noopener">os.listdir可以挂在网络驱动器上吗？它使用什么系统调用？</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><h2 id="Pyhton防止listdir阻塞进阶"><a href="#Pyhton防止listdir阻塞进阶" class="headerlink" title="Pyhton防止listdir阻塞进阶"></a>Pyhton防止listdir阻塞进阶</h2><p>使用超时装饰器<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding : utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="string">"""Subclass of threading.Thread, with a kill() method."""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self, *args, **kwargs)</span><br><span class="line">        self.killed = <span class="literal">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Start the thread."""</span></span><br><span class="line">        self.__run_backup = self.run</span><br><span class="line">        <span class="string">"""Force the Thread to install our trace."""</span></span><br><span class="line">        self.run = self.__run</span><br><span class="line">        threading.Thread.start(self)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Hacked run function, which installs the trace."""</span></span><br><span class="line">        sys.settrace(self.globaltrace)</span><br><span class="line">        self.__run_backup()</span><br><span class="line">        self.run = self.__run_backup</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">globaltrace</span><span class="params">(self, frame, why, arg)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> why == <span class="string">'call'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.localtrace</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">localtrace</span><span class="params">(self, frame, why, arg)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.killed:</span><br><span class="line">            <span class="keyword">if</span> why == <span class="string">'line'</span>:</span><br><span class="line">                <span class="keyword">raise</span> SystemExit()</span><br><span class="line">        <span class="keyword">return</span> self.localtrace</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kill</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.killed = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_file_timeout</span><span class="params">(seconds)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeout_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_new_func</span><span class="params">(oldfunc, result, oldfunc_args, oldfunc_kwargs)</span>:</span></span><br><span class="line">            result.append(oldfunc(*oldfunc_args, **oldfunc_kwargs))</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            result = []</span><br><span class="line">            <span class="string">'''create new args for _new_funcbecause</span></span><br><span class="line"><span class="string">               we want to get the func return val to result list</span></span><br><span class="line"><span class="string">            '''</span></span><br><span class="line">            new_kwargs = &#123;</span><br><span class="line">                <span class="string">'oldfunc'</span>: func,</span><br><span class="line">                <span class="string">'result'</span>: result,</span><br><span class="line">                <span class="string">'oldfunc_args'</span>: args,</span><br><span class="line">                <span class="string">'oldfunc_kwargs'</span>: kwargs</span><br><span class="line">            &#125;</span><br><span class="line">            thd = KThread(target=_new_func, args=(), kwargs=new_kwargs)</span><br><span class="line">            thd.start()</span><br><span class="line">            thd.join(seconds)</span><br><span class="line">            alive = thd.isAlive()</span><br><span class="line">            <span class="string">'''kill the child thread'''</span></span><br><span class="line">            thd.kill()</span><br><span class="line">            <span class="keyword">if</span> alive:</span><br><span class="line">                alert_exce = <span class="string">u'list_file timeout for [%d s].'</span> % seconds</span><br><span class="line">                <span class="comment"># LOG.error(alert_exce)</span></span><br><span class="line">                <span class="keyword">print</span> alert_exce</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> result[<span class="number">0</span>]</span><br><span class="line">        _.__name__ = func.__name__</span><br><span class="line">        _.__doc__ = func.__doc__</span><br><span class="line">        <span class="keyword">return</span> _</span><br><span class="line">    <span class="keyword">return</span> timeout_decorator</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    TEST = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @list_file_timeout(TEST)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list_file</span><span class="params">(self)</span>:</span></span><br><span class="line">        sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo = Foo()</span><br><span class="line">foo.list_file()</span><br></pre></td></tr></table></figure><p></p><h2 id="单线程生成文件，并上传到S3桶中"><a href="#单线程生成文件，并上传到S3桶中" class="headerlink" title="单线程生成文件，并上传到S3桶中"></a>单线程生成文件，并上传到S3桶中</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vim gen.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">fmt=output.%05d</span><br><span class="line"><span class="built_in">cd</span> lm</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 3)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    head -c 512K /dev/urandom &gt; `<span class="built_in">printf</span> <span class="variable">$fmt</span> <span class="variable">$i</span>`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后配置s3</span></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line"><span class="comment"># endpoint是 ip:port , port可能是nginx网关,也可以直接是对应服务的port</span></span><br><span class="line">s3cmd --configure \</span><br><span class="line">        --access_key=&lt;access_key&gt; \</span><br><span class="line">        --secret_key=&lt;secret_key&gt; \</span><br><span class="line">        --region=&lt;region&gt; \</span><br><span class="line">        --host=&lt;endpoint&gt; \</span><br><span class="line">        --host-bucket=&lt;endpoint&gt; \</span><br><span class="line">        --no-ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传</span></span><br><span class="line">s3cmd put lm s3://lm-noscan-bk --recursive</span><br></pre></td></tr></table></figure><p>优化: vdbench 多线程生成文件</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/205_同构字符串 克服上瘾的3条准则 Python防止listdir阻塞以及进阶 单线程生成文件，并上传到S3桶中
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第85周[85/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC85%E5%91%A8-85-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第85周-85-521/</id>
    <published>2020-12-19T14:15:38.000Z</published>
    <updated>2020-12-20T12:52:16.441Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/48_%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F.cpp" target="_blank" rel="noopener">LeetCode/48_旋转图像</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么我们会破坏爱情？怎样才能维系一段长期的关系？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=373229199&bvid=BV1LZ4y13785&cid=267791281&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>我的看法：</p><ol><li>你想要什么，你就会找到证据去证实你想要的东西，所以你想保持距离，就很难深入交流，你认为你找不到好的伴侣，你就会不会疏远ta。所以你只有保持想要好好谈恋爱，并相信你的伴侣，你才不会找佐证去认为你的伴侣不好</li><li>和伴侣合作</li><li>一起反思</li></ol><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://my.oschina.net/leejun2005/blog/607741" target="_blank" rel="noopener">论 Python 装饰器控制函数 Timeout 的正确姿势</a></p><p><a href="https://www.jianshu.com/p/fad3339e3448" target="_blank" rel="noopener">浅析Linux中的零拷贝技术</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>gdb的一些调试技巧</p><p>pstack 9809[PID]</p><p>gdb附加或者启动： gdb attach pid； gdb xxxx, run xxxxx xxxxx；<br>给某个方法设置断点 b xxx_func delete breakpoints 删除断点<br>给某个代码位置设置断点 b xxxx.c:1210<br>layout 同步查看代码 ctrl+x +a 退出 layout<br>n 执行下一步<br>s 进入函数内部<br>p 查看 变量内容<br>x 查看内存内容<br>c 继续执行</p><p>gdb /usr/bin/xxxx core.xxxx；<br>bt 查看coredump的线程的堆栈<br>info thread 查看其他线程情况<br>thread apply all bt 查看其他所有线程的堆栈<br>p 查看 变量内容 根据变量的内容判断coredump问题的可能原因, 常见原因：<br>内存访问越界(小心 memset memcpy strcpy sprintf 等函数)<br>使用了被释放的对象或者内存<br>对象内存使用了未经过初始化的指针或者对象<br>内容被破坏(踩内存)<br>p 命令 结合c里面的指针操作符使用 p <em>(struct everythingyouwant </em>0x78dddddd)</p><p>x 查看内存内容</p><p>gdb如何把输出打印到文件中<br>(gdb) set logging file<file name><br>(gdb) set logging on<br>(gdb) thread apply all bt<br>(gdb) set logging off</file></p><p>手段1： 抓包分析，通过抓包分析客户端的问题<br>手段2： 疑难问题可以通过strace工具分析客户端的API调用序列然后进行分析。(gitlab server的问题)<br>针对可能存在的内核问题，可以通过开启nfs客户端调试日志来判断<br>sysctl –a |grep nfs<br>sysctl -w nfs_debug = 65535<br>sysctl -w rpc_debug=65535<br>journalctl –kf 查看内核日志</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/48_旋转图像 TED演讲：为什么我们会破坏爱情？怎样才能维系一段长期的关系？ 论 Python 装饰器控制函数 Timeout 的正确姿势 浅析Linux中的零拷贝技术 gdb的一些调试技巧
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第84周[84/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC84%E5%91%A8-84-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第84周-84-521/</id>
    <published>2020-12-12T16:42:56.000Z</published>
    <updated>2020-12-12T17:41:28.244Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/376_%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.cpp" target="_blank" rel="noopener">LeetCode/376_摆动序列</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>7种提升智力的方法</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=415581339&bvid=BV1dV41187kK&cid=265806990&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>第一1.5或2倍速收听播客<br>第二下象棋。不一定是象棋，只要是动脑的就可以<br>第三用不同方式做事<br>第四你的饮食<br>第五教授一项新技能给别人<br>第六忽略技术。打个比方，用脑算术而不是计算器<br>第七学习一门新语言</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html" target="_blank" rel="noopener">git cherry-pick 教程</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/111045136" target="_blank" rel="noopener">C结构体中字符串初始化</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/376_摆动序列 7种提升智力的方法 git cherry-pick 教程 C结构体中字符串初始化
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第83周[83/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC83%E5%91%A8-83-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第83周-83-521/</id>
    <published>2020-12-06T14:38:48.000Z</published>
    <updated>2020-12-06T15:54:44.184Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/621_%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8.cpp" target="_blank" rel="noopener">LeetCode/621_任务调度器</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://cmake.org/cmake/help/v3.19/command/add_library.html?highlight=add_library" target="_blank" rel="noopener">Cmake官方文档</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://coolshell.cn/articles/11377.html" target="_blank" rel="noopener">C语言结构体里的成员数组和指针</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/110285162" target="_blank" rel="noopener">指向指针数组的指针</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/621_任务调度器 Cmake官方文档 C语言结构体里的成员数组和指针 指向指针数组的指针
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第82周[82/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC82%E5%91%A8-82-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第82周-82-521/</id>
    <published>2020-11-28T12:49:13.000Z</published>
    <updated>2020-11-28T16:48:41.426Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/493_%E7%BF%BB%E8%BD%AC%E5%AF%B9.cpp" target="_blank" rel="noopener">LeetCode/493_翻转对</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：只要你有真正的信心，一切皆有可能</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=245383647&bvid=BV1hv411t7QY&cid=260639287&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>对自己有信心，直面困境，不断尝试</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.hahack.com/codes/cmake/" target="_blank" rel="noopener">CMake 入门实战</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>2020年11月28日22:15:49 突然发现自己的Hexo网站直接挂掉了，可能是前几天改了一下主机的名字，然后重启了一下主机，导致nginx的服务挂掉了，但是现在重启了nginx还是没有启动hexo网站，排查中</p><p>2020年11月28日23:37:35 感觉今天有点搞不定，脑子有点累，害</p><p>2020年11月29日00:13:56 根据<a href="https://www.jianshu.com/p/b0fad8065676" target="_blank" rel="noopener">nginx正常启动却无法访问网页</a> 重要找到了原因，</p><ol><li>是因为nginx没有随着主机重启而重启</li><li>是因为我重启了主机之后，iptables自动重启了，而我的iptables的配置文件中没有443和80端口，所以导致我的网站无法访问了</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>nginx开机自启<code>systemctl enable nginx.service</code></li><li>修改文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line"><span class="comment">## 添加如下两行</span></span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></li></ol><p>再重启，完美(<del>2.5小时，呜呜</del>)</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/493_翻转对 TED演讲：只要你有真正的信心，一切皆有可能 CMake 入门实战 nginx正常启动却无法访问网页
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第81周[81/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC81%E5%91%A8-81-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第81周-81-521/</id>
    <published>2020-11-22T07:31:05.000Z</published>
    <updated>2020-11-22T08:07:56.771Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/242_%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.cpp" target="_blank" rel="noopener">LeetCode/242_有效的字母异位词</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>10种提升脑力的最佳食物</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=457834826&bvid=BV1c541157gx&cid=257197128&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>豆类，薄荷，西兰花，甜菜，籽（葵花籽，南瓜籽），坚果，藜麦，鳄梨，浆果，椰子油</p><p><strong>其实吃亏最长脑子</strong></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/edonlii/article/details/8877239" target="_blank" rel="noopener">likely() 和 unlikely()功能分析</a></p><p><a href="https://tanglinux.blog.csdn.net/article/details/7175517" target="_blank" rel="noopener">详解likely和unlikely函数</a></p><h1 id="Share-git-commit-提交多行注释"><a href="#Share-git-commit-提交多行注释" class="headerlink" title="Share - git commit 提交多行注释"></a>Share - git commit 提交多行注释</h1><p>网上说的 <code>git commit -m &#39;</code> 不能提交多行注释…</p><p>所以经过一番查找尝试，如下方法可以提交多行注释<br><code>git commit -m &quot;第一行: 简要概括(会在git平台目录界面展示)&quot; -m &quot;第二行: 详细信息的第一行&quot; -m &quot;第三行: 详细信息的第二行，之后还可以-m添加更多的行&quot;</code></p><h1 id="Share不再写在CSDN的原因"><a href="#Share不再写在CSDN的原因" class="headerlink" title="Share不再写在CSDN的原因"></a>Share不再写在CSDN的原因</h1><p>因为之前上课学了一个PageRank的google网站排名的规则，发现链接往外链会降低排名，所以开始转变成为CSDN往自己个人网站回链</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/242_有效的字母异位词 10种提升脑力的最佳食物 likely() 和 unlikely()功能分析 详解likely和unlikely函数 git commit 提交多行注释 Share不再写在CSDN的原因
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第80周[80/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC80%E5%91%A8-80-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第80周-80-521/</id>
    <published>2020-11-15T15:19:18.000Z</published>
    <updated>2020-11-15T15:48:14.956Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/402_%E7%A7%BB%E6%8E%89K%E4%BD%8D%E6%95%B0%E5%AD%97.cpp" target="_blank" rel="noopener">LeetCode/402_移掉K位数字</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>如何保持更长时间的专注？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=800226157&bvid=BV1wy4y1z7bp&cid=254798413&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://github.com/apache/incubator-brpc/blob/master/docs/cn/server.md" target="_blank" rel="noopener">brpc-server基础</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/105471278" target="_blank" rel="noopener">VScode无法运行中文路径的cpp文件</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/402_移掉K位数字 如何保持更长时间的专注？ brpc-server基础 VScode无法运行中文路径的cpp文件
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第79周[79/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC79%E5%91%A8-79-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第79周-79-521/</id>
    <published>2020-11-07T07:43:07.000Z</published>
    <updated>2020-11-07T09:16:34.734Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/327_%E5%8C%BA%E9%97%B4%E5%92%8C%E7%9A%84%E4%B8%AA%E6%95%B0.cpp" target="_blank" rel="noopener">LeetCode/327_区间和的个数</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>你想过自杀吗？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=287669399&bvid=BV1Df4y1i7fp&cid=252872546&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>亲爱的朋友，很抱歉听到你曾经经历的一些很艰难的时刻，希望你能释怀，珍惜自己这个生命的奇迹，你的存在就是价值</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.vediotalk.com/archives/606" target="_blank" rel="noopener">LINUX | 谷歌云开启SSH及设置root密码</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/109548418" target="_blank" rel="noopener">Please ensure you can make a proper https connection to the IAP for TCP hostname:https://tunnel.clou</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/327_区间和的个数 你想过自杀吗？ 谷歌云开启SSH及设置root密码 Please ensure you can make a proper https connection to the IAP for TCP hostname:https://tunnel.clou
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第78周[78/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC78%E5%91%A8-78-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第78周-78-521/</id>
    <published>2020-11-01T05:37:46.000Z</published>
    <updated>2020-11-07T07:43:30.328Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/140_%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%862.cpp" target="_blank" rel="noopener">LeetCode/140_单词拆分2</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么培养创业心态那么重要？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=885048654&bvid=BV1zK4y177ve&cid=250318476&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>建立创业者心态，自己对自己的人生负责，自己自负盈亏，自己享受独立做决定的自由，自己感受自己可以让世界变得更好的力量并感到快乐</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://zhuanlan.zhihu.com/p/268637430" target="_blank" rel="noopener">学CMake</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/109403926" target="_blank" rel="noopener">mac的obs录制不到全屏</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/109426068" target="_blank" rel="noopener">mac压缩视频，压缩obs录制的视频</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/140_单词拆分2 TED演讲：为什么培养创业心态那么重要？建立创业者心态，自己对自己的人生负责，自己自负盈亏，自己享受独立做决定的自由，自己感受自己可以让世界变得更好的力量并感到快乐 学CMake mac的obs录制不到全屏 mac压缩视频，压缩obs录制的视频
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第77周[77/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC77%E5%91%A8-77-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第77周-77-521/</id>
    <published>2020-10-24T09:07:15.000Z</published>
    <updated>2020-10-24T09:33:11.836Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="1024程序员节快乐"><a href="#1024程序员节快乐" class="headerlink" title="1024程序员节快乐"></a>1024程序员节快乐</h2><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/1024_%E8%A7%86%E9%A2%91%E6%8B%BC%E6%8E%A5.cpp" target="_blank" rel="noopener">LeetCode/1024_视频拼接</a></p><p>听说<br>2020 - 1024 = 996<br>2021 - 1024 = 997</p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>这2个问题，让你的生活更美好！</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=202536071&bvid=BV1sa411A7wY&cid=248077173&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>现在做什么让你的人生感到更好？<br>将来做什么让你的人生感到更好？<br>其实感觉还是制定好自己的人生目标，然后去实现</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="http://gdut_yy.gitee.io/doc-aposd/" target="_blank" rel="noopener">《软件设计的哲学》中文翻译</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/109262153" target="_blank" rel="noopener">reference to non-static member function must be called</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      1024程序员节快乐 LeetCode/1024_视频拼接 这2个问题，让你的生活更美好！ 《软件设计的哲学》中文翻译 reference to non-static member function must be called
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第76周[76/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC76%E5%91%A8-76-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第76周-76-521/</id>
    <published>2020-10-16T11:22:09.000Z</published>
    <updated>2020-10-17T10:03:42.614Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/977_%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.cpp" target="_blank" rel="noopener">LeetCode/977_有序数组的平方</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么过早专攻并不意味着成功？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=797446780&bvid=BV1Ky4y1r7JD&cid=245287706&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>我们生来就有多种兴趣，而不是像这个邪恶的世界一样只有一种兴趣，所有的希腊哲学家都不专攻任何一门学科，他们对艺术、动物学、天文学、数学、等都很感兴趣。虽然现实生活中确实有很多通过过早专攻某个领域而成功的人，但并不代表过早“刻意练习”，能够使任何人都能成为某领域的天才。而延后专攻练习，早期广泛涉猎多个领域，也许才会真正帮助我们了解自己的兴趣和能力。</p><p>找到自己的兴趣，再刻意练习往往更加有效，所以不妨广泛尝试，然后投身自己感兴趣的事业</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://github.com/apache/incubator-brpc/blob/master/docs/cn/client.md" target="_blank" rel="noopener">brpc客户端基础框架</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/109136246" target="_blank" rel="noopener">brpc第二三周学习分享</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/977_有序数组的平方 TED演讲：为什么过早专攻并不意味着成功？ brpc客户端基础框架 brpc第二三周学习分享
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第75周[75/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC75%E5%91%A8-75-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第75周-75-521/</id>
    <published>2020-10-11T12:00:39.000Z</published>
    <updated>2020-10-11T12:20:35.392Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/416_%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.cpp" target="_blank" rel="noopener">LeetCode/416_分割等和子集</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>人类的时代：当时间成为历史</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=884979833&bvid=BV19K4y1h7hp&cid=244620659&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>聚在一起，分享，创造更多的文明与进步</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/zhou373986278/article/details/82468610" target="_blank" rel="noopener">改变reduce输出文件名字的方法</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/108950960" target="_blank" rel="noopener">Mac外接磁盘使用哪种格式速度最快，NTFS?exFAT?HFS+?APFS?</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/416_分割等和子集 人类的时代：当时间成为历史 改变reduce输出文件名字的方法 Mac外接磁盘使用哪种格式速度最快，NTFS?exFAT?HFS+?APFS?
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第74周[74/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC74%E5%91%A8-74-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第74周-74-521/</id>
    <published>2020-10-03T02:53:32.000Z</published>
    <updated>2020-10-04T05:39:34.634Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.cpp" target="_blank" rel="noopener">LeetCode/1_两数之和</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么我们都是时间穷人？怎么办？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=202340881&bvid=BV1Jh41197Rb&cid=240193345&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>【时间不够用的原因】</p><ol><li>我们太过看重金钱；</li><li>我们的空闲时间变成了剩余价值，想要榨取它；</li><li>我们提前消费了未来的时间；</li></ol><p>【如何有足够的时间】</p><ol><li>把时间的优先级放在金钱之上；</li><li>尽情享受你的带薪假期；</li><li>花更多的时间享受生活；</li><li>花一些时间到有意义的活动中，锻炼、社交等，而不仅仅是工作；</li><li>把不喜欢的任务外包出去；</li><li>利用闲碎的空闲时间；</li></ol><p>【幸福货币】<br>收入等同于你做出的与时间相关的选择所体验到的幸福。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.codedump.info/post/20200605-how-to-read-code-v2020/" target="_blank" rel="noopener">如何阅读一份源代码？</a></p><p><a href="https://illx10000.github.io/2018/12/29/6.html" target="_blank" rel="noopener">brpc之iobuf</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/108918177" target="_blank" rel="noopener">brpc第一周学习分享</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/1_两数之和 TED演讲：为什么我们都是时间穷人？怎么办？ 如何阅读一份源代码？ brpc之iobuf brpc第一周学习分享
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第73周[73/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC73%E5%91%A8-73-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第73周-73-521/</id>
    <published>2020-09-26T07:27:10.000Z</published>
    <updated>2020-09-26T07:46:22.333Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/113_%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C2.cpp" target="_blank" rel="noopener">LeetCode/113_路径总和2</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：忘掉大计划，从小习惯开始做出改变</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=372152271&bvid=BV1yZ4y1N7JE&cid=237622859&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>我们想要取得巨大的进步，我们需要的是习惯，尤其是小习惯，当我们养成一点一滴的小习惯，尽管我们不可能一次完成所有的事情，但是我们将会以一种非常可靠的方式、一种不会反弹的方式、一种不会让你想要放弃的方式，达到你想要的结果。你不需要提高动力，不需要提升意志力，你所要做的就是设计好这个小习惯。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/w790634493/article/details/80525238" target="_blank" rel="noopener">安装vmware tools时出错 ，Searching for a valid kernel header path… The path “” is not valid</a></p><p><a href="https://illx10000.github.io/2018/12/22/3.html" target="_blank" rel="noopener">brpc学习(一)</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/108735072" target="_blank" rel="noopener">vscode sftp permission denied</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/113_路径总和2 TED演讲：忘掉大计划，从小习惯开始做出改变 安装vmware tools时出错 ，Searching for a valid kernel header path… The path “” is not valid brpc学习(一) vscode sftp permission denied
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第72周[72/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC72%E5%91%A8-72-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第72周-72-521/</id>
    <published>2020-09-20T09:42:00.000Z</published>
    <updated>2020-09-20T10:01:06.805Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/78_%E5%AD%90%E9%9B%86.cpp" target="_blank" rel="noopener">LeetCode/78_子集</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：当一切未竟，该怎么办？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=754664711&bvid=BV1Mk4y117hY&cid=236886459&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>一切都未结束，在你体内所有坏的东西都可以修补</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.macdo.cn/28492.html" target="_blank" rel="noopener">干货！Windows To Go 完美制作教程</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/108695827" target="_blank" rel="noopener">macOS使用bits/stdc++.h</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/78_子集 TED演讲：当一切未竟，该怎么办？ 干货！Windows To Go 完美制作教程 macOS使用bits/stdc++.h
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第71周[71/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC71%E5%91%A8-71-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第71周-71-521/</id>
    <published>2020-09-13T15:00:41.000Z</published>
    <updated>2020-09-13T15:52:33.374Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/79_%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2.cpp" target="_blank" rel="noopener">LeetCode/79_单词搜索</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么你常常感到孤独？如何克服孤独感？</p><p>观察自己的情绪，接收自己的情绪，拥抱自己的情绪</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=926952892&bvid=BV1iT4y1w7gW&cid=229958767&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://suixinblog.cn/2019/09/beautify-terminal.html" target="_blank" rel="noopener">iTerm2 + zsh + Oh My Zsh + Powerlevel10k 打造 Mac 下最强终端</a></p><p><a href="https://www.pianshen.com/article/36961148415/" target="_blank" rel="noopener">解决Mac上VSCdoe断点失效问题</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/108559551" target="_blank" rel="noopener">gyp: No Xcode or CLT version detected!问题解决</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/79_单词搜索 TED演讲_为什么你常常感到孤独？如何克服孤独感？ iTerm2 + zsh + Oh My Zsh + Powerlevel10k 打造 Mac 下最强终端 解决Mac上VSCdoe断点失效问题 gyp_No Xcode or CLT version detected!问题解决
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第70周[70/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC70%E5%91%A8-70-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第70周-70-521/</id>
    <published>2020-09-06T10:07:28.000Z</published>
    <updated>2020-09-13T13:42:58.769Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 17 2021 17:09:10 GMT+0800 (中国标准时间) --><h1 id="Algorithm-amp-Share"><a href="#Algorithm-amp-Share" class="headerlink" title="Algorithm &amp; Share"></a>Algorithm &amp; Share</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E9%A2%98/2020.9.2%E5%8D%8E%E4%B8%BA%E7%AC%94%E8%AF%95" target="_blank" rel="noopener">2020.9.2华为笔试</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：高效学习的关键</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=414472676&bvid=BV1yV41127JV&cid=232370306&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>1·番茄法<br>2·看完抬头回想学了什么<br>3·不断练习</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.jianshu.com/p/b0343bfd216e" target="_blank" rel="noopener">RPC简介及框架选择</a><br><a href="https://github.com/apache/incubator-brpc/blob/master/README_cn.md" target="_blank" rel="noopener">brpc</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      华为笔试 TED演讲：高效学习的关键 RPC简介及框架选择 brpc
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
</feed>
