<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>单林敏的博客</title>
  
  <subtitle>wolfdan&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wolfdan.cn/"/>
  <updated>2021-08-29T08:31:28.617Z</updated>
  <id>https://www.wolfdan.cn/</id>
  
  <author>
    <name>单林敏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ARST打卡第121周[121/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC121%E5%91%A8-121-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第121周-121-521/</id>
    <published>2021-08-29T05:23:51.000Z</published>
    <updated>2021-08-29T08:31:28.617Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc1588_所有奇数长度子数组的和</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>感觉就是记录<code>(各点 i 距离中心的的距离 + 1) / 2 * a[i]</code>的和</p><p>对于偶数还是不太成熟…只对于奇数比较有用，这个规律也没有验证，推荐还是看题解的左右奇数个包含自己的个数值</p><p><a href="https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/solution/suo-you-qi-shu-chang-du-zi-shu-zu-de-he-yoaqu/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/solution/suo-you-qi-shu-chang-du-zi-shu-zu-de-he-yoaqu/</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumOddLengthSubarrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> leftCount = i, rightCount = n - i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> leftOdd = (leftCount + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> rightOdd = (rightCount + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> leftEven = leftCount / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> rightEven = rightCount / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            sum += arr[i] * (leftOdd * rightOdd + leftEven * rightEven);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://docs.ceph.com/en/latest/radosgw/adminops/#get-usage" target="_blank" rel="noopener">https://docs.ceph.com/en/latest/radosgw/adminops/#get-usage</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.huaweicloud.com/articles/479eeb85133ad46ad2759f75e3122c09.html" target="_blank" rel="noopener">POST跟GET请求的区别</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>git加签名<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cm -s -m &quot;signed-by test by add &apos;-s&apos;&quot;</span><br></pre></td></tr></table></figure><p></p><p>markdown展示diff效果, 在代码块后面加上 <code>diff</code><br></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- a</span></span><br><span class="line"><span class="addition">+ b</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc1588_所有奇数长度子数组的和 ceph-rgw文档 POST跟GET请求的区别 git加签名 markdown展示diff效果
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第120周[120/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC120%E5%91%A8-120-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第120周-120-521/</id>
    <published>2021-08-22T04:00:23.000Z</published>
    <updated>2021-08-22T05:25:01.786Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc<em>789</em>逃脱阻碍者</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>2021年08月22日12:09:45 我觉得可以简化为，只要你的最短路比鬼魂先到终点，你就赢，否则鬼魂可以到终点等你<br>2021年08月22日12:14:03 确实如此简单</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">manhattanDistance</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; point1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; point2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(point1[<span class="number">0</span>] - point2[<span class="number">0</span>]) + <span class="built_in">abs</span>(point1[<span class="number">1</span>] - point2[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">escapeGhosts</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; ghosts, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; source(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> distance = manhattanDistance(source, target);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; ghost : ghosts) &#123;</span><br><span class="line">            <span class="keyword">int</span> ghostDistance = manhattanDistance(ghost, target);</span><br><span class="line">            <span class="keyword">if</span> (ghostDistance &lt;= distance) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>【TED演讲】亲密关系很难，但为什么？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=716443329&bvid=BV1ZX4y1c7mp&cid=364569928&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>确认偏差，合理沟通，相互理解宽容</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/liangkaiming/article/details/5866174" target="_blank" rel="noopener">同步化，同步，异步化，异步操作的区别</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/119851598" target="_blank" rel="noopener">安装git 2.x遇到undefined reference to `libiconv‘</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc_789_逃脱阻碍者 【TED演讲】亲密关系很难，但为什么？ 同步化，同步，异步化，异步操作的区别 安装git 2.x遇到undefined reference to `libiconv‘
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第119周[119/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC119%E5%91%A8-119-521-1/"/>
    <id>https://www.wolfdan.cn/ARST打卡第119周-119-521-1/</id>
    <published>2021-08-15T03:25:18.000Z</published>
    <updated>2021-08-15T06:05:59.355Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc576_出界的路径数</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>直接bfs遍历搜索max_count步，然后有出界就+1</p><p>但是到达边界之后，它可以出界也可以绕圈，所以到达边界时有很多种</p><p>max_count = 1,那么只有直接出界(add_count = 靠近的边界数)，1，2，3，4都有可能<br>max_count = 2, 包含max_count = 1的情况，也有走其他方向后继续递归到max_count = 1的情况</p><p>2021年08月15日12:41:16 搞了一个小时，然后<code>76 / 94 个通过测试用例</code>, 第76个用例超时了，自己菜了好多，看题解吧</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="超时代码分析"><a href="#超时代码分析" class="headerlink" title="超时代码分析"></a>超时代码分析</h3><p>因为可以走回头路的原因<br>朴素的层序宽搜每一层引入的路径节点的数量会随着深度呈指数数级扩张，导致最后遍历不动</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pos_count</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> m_x;</span><br><span class="line">        <span class="keyword">int</span> m_y;</span><br><span class="line">        <span class="keyword">int</span> m_rem_count;</span><br><span class="line">        pos_count(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> rem_count) : m_x(x), m_y(y), m_rem_count(rem_count) &#123;&#125;</span><br><span class="line">    &#125; <span class="keyword">pos_count_t</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算出靠近几个边界 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">edgeCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        tmp += x == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>; </span><br><span class="line">        tmp += x == m - <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>; </span><br><span class="line">        tmp += y == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>; </span><br><span class="line">        tmp += y == n - <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> tmp; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> maxMove, <span class="keyword">int</span> startRow, <span class="keyword">int</span> startColumn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (maxMove &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span> &amp;&amp; n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>; <span class="comment">// 直接4个方向一次出去</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">pos_count_t</span>&gt; Q;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">int</span> xf[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> yf[] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> fi, se, remMove;</span><br><span class="line">        Q.push(&#123;startRow, startColumn, maxMove&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">pos_count_t</span> tmp = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            fi = tmp.m_x;</span><br><span class="line">            se = tmp.m_y;</span><br><span class="line">            remMove = tmp.m_rem_count - <span class="number">1</span>;</span><br><span class="line">            ans = (ans + edgeCount(m, n, fi, se)) % mod;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (remMove == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = fi + xf[i];</span><br><span class="line">                <span class="keyword">int</span> y = se + yf[i];</span><br><span class="line">                <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; m - <span class="number">1</span> || y &lt; <span class="number">0</span> || y &gt; n - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Q.push(&#123;x, y, remMove&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="正确dp姿势"><a href="#正确dp姿势" class="headerlink" title="正确dp姿势"></a>正确dp姿势</h2><p><a href="https://leetcode-cn.com/problems/out-of-boundary-paths/solution/chu-jie-de-lu-jing-shu-by-leetcode-solut-l9dw/" target="_blank" rel="noopener">题解</a><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> MOD = <span class="number">1'000'000'007</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> maxMove, <span class="keyword">int</span> startRow, <span class="keyword">int</span> startColumn)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; directions = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> outCounts = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; dp(maxMove + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n)));</span><br><span class="line">        dp[<span class="number">0</span>][startRow][startColumn] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxMove; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> count = dp[i][j][k];</span><br><span class="line">                    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;direction : directions) &#123;</span><br><span class="line">                            <span class="keyword">int</span> j1 = j + direction[<span class="number">0</span>], k1 = k + direction[<span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span> (j1 &gt;= <span class="number">0</span> &amp;&amp; j1 &lt; m &amp;&amp; k1 &gt;= <span class="number">0</span> &amp;&amp; k1 &lt; n) &#123;</span><br><span class="line">                                dp[i + <span class="number">1</span>][j1][k1] = (dp[i + <span class="number">1</span>][j1][k1] + count) % MOD;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                outCounts = (outCounts + count) % MOD;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outCounts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h1 id="Reviews"><a href="#Reviews" class="headerlink" title="Reviews"></a>Reviews</h1><p>【TED演讲】不要为难民难过，请相信他们</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=759508817&bvid=BV1J64y1B7Nq&cid=380758541&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>没有人应该被抛弃，平等地接纳他人，不要可怜他人，要相信他人</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://docs.python.org/zh-cn/3/howto/logging.html" target="_blank" rel="noopener">python日志最佳实践</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/119574697" target="_blank" rel="noopener">字符拼接数字[最佳实践]</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/119574737?spm=1001.2014.3001.5501" target="_blank" rel="noopener">snprintf返回值判断-返回值深入实践分析</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc576_出界的路径数 【TED演讲】不要为难民难过，请相信他们 python日志最佳实践 字符拼接数字[最佳实践] snprintf返回值判断-返回值深入实践分析
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第118周[118/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC118%E5%91%A8-118-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第118周-118-521/</id>
    <published>2021-08-08T06:41:53.000Z</published>
    <updated>2021-08-08T07:24:29.225Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc1137_第N个泰波那契数</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>想到的是直接本地运算，然后打表</li><li>打表找规律，然后直接用计算式做</li></ol><p>然后发现是要<a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/solution/di-n-ge-tai-bo-na-qi-shu-by-leetcode-sol-kn16/" target="_blank" rel="noopener">用矩阵快速幂(看题解答案吧)</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">tribonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt; q = &#123;&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt; res = <span class="built_in">pow</span>(q, n);</span><br><span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt; <span class="built_in">pow</span>(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt;&amp; a, <span class="keyword">long</span> n) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt; ret = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                ret = multiply(ret, a);</span><br><span class="line">            &#125;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            a = multiply(a, a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt; multiply(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt;&amp; a, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt;&amp; b) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;&gt; c(<span class="number">3</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;(<span class="number">3</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                c[i][j] = a[i][<span class="number">0</span>] * b[<span class="number">0</span>][j] + a[i][<span class="number">1</span>] * b[<span class="number">1</span>][j] + a[i][<span class="number">2</span>] * b[<span class="number">2</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://social.msdn.microsoft.com/Forums/office/en-US/889e7497-3bab-42dc-b4fe-1952890351af/smb2-what-is-msftewds-and-srvsvc-files?forum=os_fileservices" target="_blank" rel="noopener">SMB2: what is MsFteWds and Srvsvc files?</a></p><p><a href="https://docs.microsoft.com/en-us/windows/win32/ipc/named-pipes" target="_blank" rel="noopener">Named Pipes</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://mlog.club/article/483735" target="_blank" rel="noopener">如何在python中隐藏密码</a></p><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA" target="_blank" rel="noopener">Git分支-变基</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/119411852?spm=1001.2014.3001.5501" target="_blank" rel="noopener">python变量是否在类中-普通常规类也可以判断</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc1137_第N个泰波那契数 what is MsFteWds and Srvsvc files? Named Pipes 如何在python中隐藏密码 Git分支-变基 python变量是否在类中-普通常规类也可以判断
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第117周[117/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC117%E5%91%A8-117-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第117周-117-521/</id>
    <published>2021-08-01T04:38:02.000Z</published>
    <updated>2021-08-01T07:15:45.250Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc<em>1337</em>矩阵中战斗力最弱的K行</p><p>2021年08月01日12:41 应该就是把 count, lien_id绑定,然后排序，AC，下面给出自己的题解</p><ol><li>可以优化的地方，二分选择出行中最后的一个1的位置</li><li>可以建堆或者选择排序来优化快速排序所有元素</li></ol><p>这两个优化都可以去lc官网看题解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a, <span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.first != b.first) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2021年08月01日12:41 应该就是把 count, lien_id绑定,然后排序</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; kWeakestRows(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mat.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> lien_count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> x : mat[i]) &#123;</span><br><span class="line">                lien_count += x;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.push_back(&#123;lien_count, i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(tmp.begin(), tmp.end(), comp);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            ans.push_back(tmp[i].second);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲一个让记忆力提升3倍的技巧</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=291295023&bvid=BV1ef4y1t7En&cid=359521145&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>1.检查：检查自己现在的记忆方法有什么不好。<br>（比如只是不停的重复背诵导致毫无效果）<br>2.体验：让自己开放地接受各种不同方法，并找到适合自己最佳的记忆方法。<br>（比如演讲者现场描述的情景记忆，利用身体器官辅助记忆）<br>3.实验：将最适合自己的方法运用到实际中。<br>其实在各个领域都需要记忆，因为这样你会比其他人做得更好。让自己时刻保持开放，这样就能不断调整转换记忆方式，与时俱进。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/u010982765/article/details/79021426" target="_blank" rel="noopener">错误：reference to non-static member function must be called</a></p><p><a href="https://www.cnblogs.com/AnnieKim/archive/2011/12/04/2275589.html" target="_blank" rel="noopener">指向类成员的指针</a></p><h1 id="Share-gdb调试smb"><a href="#Share-gdb调试smb" class="headerlink" title="Share-gdb调试smb"></a>Share-gdb调试smb</h1><ol><li>windows打开共享目录，并留意当前时间<ol><li><strong>如果是脚本跑，给你的脚本下断点</strong></li></ol></li><li><code>/usr/local/samba/bin/smbstatus</code> 找出对应时间对应客户端ip的 pid</li><li><code>gdb attach ${pid}</code></li><li>b 对应函数</li><li>c（直接继续运行）</li><li>操作文件调试，看断点附近的内容<ol><li>p\x 变量 （这样可以输出16进制）</li></ol></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc_1337_矩阵中战斗力最弱的K行 TED演讲一个让记忆力提升3倍的技巧 错误：reference to non-static member function must be called 指向类成员的指针 gdb调试smb
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第116周[116/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC116%E5%91%A8-116-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第116周-116-521/</id>
    <published>2021-07-25T02:59:25.000Z</published>
    <updated>2021-07-25T03:51:45.222Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc-1743_从相邻元素对还原数组</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>想到的是直接遍历，然后用set找出只出现过一次的两个数，并记录下标，然后选择一个数开始连接</p><p>每次都遍历找出一个的，复杂度达到了O(n^2),所以记录相邻表，然后就可以降低到O(n)</p><p><a href="https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs/solution/cong-xiang-lin-yuan-su-dui-huan-yuan-shu-v55t/" target="_blank" rel="noopener">官方题解也是如此</a></p><p><del>自己没有动手实现，真懒，下不为例</del><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; restoreArray(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; adjacentPairs) &#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; adjacentPair : adjacentPairs) &#123;</span><br><span class="line">            mp[adjacentPair[<span class="number">0</span>]].push_back(adjacentPair[<span class="number">1</span>]);</span><br><span class="line">            mp[adjacentPair[<span class="number">1</span>]].push_back(adjacentPair[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组中的值除了首尾都出现了两次，那么再让首尾组成一队，再出现一次</span></span><br><span class="line">        <span class="comment">// 这样的adjacentPairs的size就和原数组size一致了，所以是+1</span></span><br><span class="line">        <span class="keyword">int</span> n = adjacentPairs.size() + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [e, adj] : mp) &#123;</span><br><span class="line">            <span class="comment">// 找到首尾中的一个，就找只有一个邻接元素的</span></span><br><span class="line">            <span class="keyword">if</span> (adj.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                ret[<span class="number">0</span>] = e;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ret[<span class="number">1</span>] = mp[ret[<span class="number">0</span>]][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp; adj = mp[ret[i - <span class="number">1</span>]];</span><br><span class="line">            <span class="comment">// 找到相邻中的另一个</span></span><br><span class="line">            ret[i] = ret[i - <span class="number">2</span>] == adj[<span class="number">0</span>] ? adj[<span class="number">1</span>] : adj[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>阅读smbprotocol的部分源码</p><p>发现几个基础，但有很经典实用的点</p><h2 id="利用子类比父类先调用构造函数，在父类构造函数中给子类赋值父指针为self"><a href="#利用子类比父类先调用构造函数，在父类构造函数中给子类赋值父指针为self" class="headerlink" title="利用子类比父类先调用构造函数，在父类构造函数中给子类赋值父指针为self"></a>利用子类比父类先调用构造函数，在父类构造函数中给子类赋值父指针为self</h2><p>smbprotocol/open.py /<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMB2CreateRequest</span><span class="params">(Structure)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    [MS-SMB2] v53.0 2017-09-15</span></span><br><span class="line"><span class="string">    2.2.13 SMB2 CREATE Request</span></span><br><span class="line"><span class="string">    The SMB2 Create Request packet is sent by a client to request either</span></span><br><span class="line"><span class="string">    creation of or access to a file.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    COMMAND = Commands.SMB2_CREATE</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># pep 80 char issues force me to define this here</span></span><br><span class="line">        create_con_req = SMB2CreateContextRequest</span><br><span class="line">        self.fields = OrderedDict([</span><br><span class="line">            (<span class="string">'structure_size'</span>, IntField(</span><br><span class="line">                size=<span class="number">2</span>,</span><br><span class="line">                default=<span class="number">57</span>,</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'security_flags'</span>, IntField(size=<span class="number">1</span>)),</span><br><span class="line">            (<span class="string">'requested_oplock_level'</span>, EnumField(</span><br><span class="line">                size=<span class="number">1</span>,</span><br><span class="line">                enum_type=RequestedOplockLevel</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'impersonation_level'</span>, EnumField(</span><br><span class="line">                size=<span class="number">4</span>,</span><br><span class="line">                enum_type=ImpersonationLevel</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'smb_create_flags'</span>, IntField(size=<span class="number">8</span>)),</span><br><span class="line">            (<span class="string">'reserved'</span>, IntField(size=<span class="number">8</span>)),</span><br><span class="line">            (<span class="string">'desired_access'</span>, IntField(size=<span class="number">4</span>)),</span><br><span class="line">            (<span class="string">'file_attributes'</span>, IntField(size=<span class="number">4</span>)),</span><br><span class="line">            (<span class="string">'share_access'</span>, FlagField(</span><br><span class="line">                size=<span class="number">4</span>,</span><br><span class="line">                flag_type=ShareAccess</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'create_disposition'</span>, EnumField(</span><br><span class="line">                size=<span class="number">4</span>,</span><br><span class="line">                enum_type=CreateDisposition</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'create_options'</span>, FlagField(</span><br><span class="line">                size=<span class="number">4</span>,</span><br><span class="line">                flag_type=CreateOptions</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'name_offset'</span>, IntField(</span><br><span class="line">                size=<span class="number">2</span>,</span><br><span class="line">                default=<span class="number">120</span>  <span class="comment"># (header size 64) + (structure size 56)</span></span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'name_length'</span>, IntField(</span><br><span class="line">                size=<span class="number">2</span>,</span><br><span class="line">                default=<span class="keyword">lambda</span> s: self._name_length(s)</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'create_contexts_offset'</span>, IntField(</span><br><span class="line">                size=<span class="number">4</span>,</span><br><span class="line">                default=<span class="keyword">lambda</span> s: self._create_contexts_offset(s)</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'create_contexts_length'</span>, IntField(</span><br><span class="line">                size=<span class="number">4</span>,</span><br><span class="line">                default=<span class="keyword">lambda</span> s: len(s[<span class="string">'buffer_contexts'</span>])</span><br><span class="line">            )),</span><br><span class="line">            <span class="comment"># Technically these are all under buffer but we split it to make</span></span><br><span class="line">            <span class="comment"># things easier</span></span><br><span class="line">            (<span class="string">'buffer_path'</span>, BytesField(</span><br><span class="line">                size=<span class="keyword">lambda</span> s: self._buffer_path_size(s),</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'padding'</span>, BytesField(</span><br><span class="line">                size=<span class="keyword">lambda</span> s: self._padding_size(s),</span><br><span class="line">                default=<span class="keyword">lambda</span> s: <span class="string">b"\x00"</span> * self._padding_size(s)</span><br><span class="line">            )),</span><br><span class="line">            (<span class="string">'buffer_contexts'</span>, ListField(</span><br><span class="line">                size=<span class="keyword">lambda</span> s: s[<span class="string">'create_contexts_length'</span>].get_value(),</span><br><span class="line">                list_type=StructureField(</span><br><span class="line">                    structure_type=create_con_req</span><br><span class="line">                ),</span><br><span class="line">                unpack_func=<span class="keyword">lambda</span> s, d: self._buffer_context_list(s, d)</span><br><span class="line">            ))</span><br><span class="line">        ])</span><br><span class="line">        super(SMB2CreateRequest, self).__init__()</span><br></pre></td></tr></table></figure><p></p><p>smbprotocol/structure.py /<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Structure</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Now that self.fields is set, loop through it again and set the</span></span><br><span class="line">        <span class="comment"># metadata around the fields and set the value based on default.</span></span><br><span class="line">        <span class="comment"># This must be done outside of the OrderedDict definition as set_value</span></span><br><span class="line">        <span class="comment"># relies on the full structure (self) being available and error</span></span><br><span class="line">        <span class="comment"># messages use the field name to be helpful</span></span><br><span class="line">        <span class="keyword">for</span> name, field <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            field.structure = self</span><br><span class="line">            field.name = name</span><br><span class="line">            field.set_value(field.default)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        struct_name = self.__class__.__name__</span><br><span class="line">        raw_hex = _bytes_to_hex(self.pack(), <span class="literal">True</span>, hex_per_line=<span class="number">0</span>)</span><br><span class="line">        field_strings = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> name, field <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            <span class="comment"># the field header is slightly different for a StructureField</span></span><br><span class="line">            <span class="comment"># remove the leading space and put the value on the next line</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(field, StructureField):</span><br><span class="line">                field_header = <span class="string">"%s =\n%s"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                field_header = <span class="string">"%s = %s"</span></span><br><span class="line"></span><br><span class="line">            field_string = field_header % (field.name, str(field))</span><br><span class="line">            field_strings.append(_indent_lines(field_string, TAB))</span><br><span class="line"></span><br><span class="line">        field_strings.append(<span class="string">""</span>)</span><br><span class="line">        field_strings.append(_indent_lines(<span class="string">"Raw Hex:"</span>, TAB))</span><br><span class="line">        hex_wrapper = textwrap.TextWrapper(</span><br><span class="line">            width=<span class="number">33</span>,  <span class="comment"># set to show 8 hex values per line, 33 for 8, 56 for 16</span></span><br><span class="line">            initial_indent=TAB + TAB,</span><br><span class="line">            subsequent_indent=TAB + TAB</span><br><span class="line">        )</span><br><span class="line">        field_strings.append(hex_wrapper.fill(raw_hex))</span><br><span class="line"></span><br><span class="line">        string = <span class="string">"%s:\n%s"</span> % (to_native(struct_name), <span class="string">'\n'</span>.join([to_native(s) <span class="keyword">for</span> s <span class="keyword">in</span> field_strings]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        field = self._get_field(key)</span><br><span class="line">        field.set_value(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._get_field(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self._get_field(key)</span><br><span class="line">        <span class="keyword">del</span> self.fields[key]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> field <span class="keyword">in</span> self.fields.values():</span><br><span class="line">            length += len(field)</span><br><span class="line">        <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pack</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = <span class="string">b""</span></span><br><span class="line">        <span class="keyword">for</span> field <span class="keyword">in</span> self.fields.values():</span><br><span class="line">            field_data = field.pack()</span><br><span class="line">            data += field_data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unpack</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        mem = memoryview(data)</span><br><span class="line">        <span class="keyword">for</span> key, field <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            mem = field.unpack(mem)</span><br><span class="line">        <span class="keyword">return</span> bytes(mem)  <span class="comment"># remaining data</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_field</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        field = self.fields.get(key, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> field <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Structure does not contain field %s"</span> % key)</span><br><span class="line">        <span class="keyword">return</span> field</span><br></pre></td></tr></table></figure><p></p><h2 id="构造函数中的匿名表达式在pack-使用时确定实际值"><a href="#构造函数中的匿名表达式在pack-使用时确定实际值" class="headerlink" title="构造函数中的匿名表达式在pack()使用时确定实际值"></a>构造函数中的匿名表达式在pack()使用时确定实际值</h2><p>smbprotocol/structure.py<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_calculated_value</span><span class="params">(self, value)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Get's the final value of the field and runs the lambda functions</span></span><br><span class="line"><span class="string">    recursively until a final value is derived.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param value: The value to calculate/expand</span></span><br><span class="line"><span class="string">    :return: The final value</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(value, types.LambdaType):</span><br><span class="line">        expanded_value = value(self.structure)</span><br><span class="line">        <span class="keyword">return</span> self._get_calculated_value(expanded_value)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># perform one final parsing of the value in case lambda value</span></span><br><span class="line">        <span class="comment"># returned a different type</span></span><br><span class="line">        <span class="keyword">return</span> self._parse_value(value)</span><br></pre></td></tr></table></figure><p></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://zhuanlan.zhihu.com/p/58073103" target="_blank" rel="noopener">zsh &amp; oh-my-zsh 的配置与使用</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451447842528" target="_blank" rel="noopener">python匿名函数</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/119003240" target="_blank" rel="noopener">美化zsh，以及配置时间戳显示</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc-1743_从相邻元素对还原数组 阅读smbprotocol的部分源码 zsh &amp; oh-my-zsh 的配置与使用 python匿名函数 美化zsh，以及配置时间戳显示
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第115周[115/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC115%E5%91%A8-115-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第115周-115-521/</id>
    <published>2021-07-18T05:17:15.000Z</published>
    <updated>2021-07-18T06:15:41.558Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>leetcode_面试题 10.02. 变位词组<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; groupAnagrams(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs) &#123;</span><br><span class="line">        <span class="comment">// 可以对每个单词进行sort，然后对比是否有，无则计入list，用python写比较方便</span></span><br><span class="line">        <span class="comment">// 不行，这样就nlog(n)*n了...</span></span><br><span class="line">        <span class="comment">// 维护hash表，也要n*n，看看答案吧</span></span><br><span class="line">        <span class="comment">// 2021年07月18日13:44:48 发现自己方法对了，计算时间复杂度计算错了</span></span><br><span class="line">        <span class="comment">// 实际上是n * klog(k) ，hash表是 n * (k + 26)</span></span><br><span class="line">        <span class="comment">// 见https://leetcode-cn.com/problems/group-anagrams-lcci/solution/bian-wei-ci-zu-by-leetcode-solution-g2a8/</span></span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span>&amp; str: strs) &#123;</span><br><span class="line">            <span class="built_in">string</span> key = str;</span><br><span class="line">            sort(key.begin(), key.end());</span><br><span class="line">            mp[key].emplace_back(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = mp.begin(); it != mp.end(); ++it) &#123;</span><br><span class="line">            ans.emplace_back(it-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲-如果幸福可以衡量，你的幸福得分是多少？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=846409213&bvid=BV1g54y1p779&cid=363063641&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>我们可以换个角度思考我们是否幸福，我们可以自己决定自己是否幸福</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://cloud.tencent.com/developer/article/1603833" target="_blank" rel="noopener">5个案例让Python输出漂亮的表格</a></p><p><a href="https://blog.csdn.net/u011417820/article/details/71435031" target="_blank" rel="noopener">Linux生成core文件、core文件路径设置</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/118812311" target="_blank" rel="noopener">Python表格输出长数据自动换行[最佳实践]</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      leetcode_面试题 10.02. 变位词组 TED演讲-如果幸福可以衡量，你的幸福得分是多少？ 5个案例让Python输出漂亮的表格 Linux生成core文件、core文件路径设置 Python表格输出长数据自动换行[最佳实践]
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第114周[114/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC114%E5%91%A8-114-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第114周-114-521/</id>
    <published>2021-07-11T02:19:43.000Z</published>
    <updated>2021-07-11T02:30:08.204Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc274-H指数</p><p>简单的思路是先排序再从大到小遍历，但是计数排序更佳<br>可以看<a href="https://leetcode-cn.com/problems/h-index/solution/h-zhi-shu-by-leetcode-solution-fnhl/" target="_blank" rel="noopener">详细题解</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = citations.size(), tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; counter(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (citations[i] &gt;= n) &#123;</span><br><span class="line">                counter[n]++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                counter[citations[i]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            tot += counter[i];</span><br><span class="line">            <span class="keyword">if</span> (tot &gt;= i) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://wiki.samba.org/index.php/Samba_codebase_organization" target="_blank" rel="noopener">Samba codebase organization</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/hittata/article/details/8041329" target="_blank" rel="noopener">linux设置动态库搜索路径三种方式</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://time.geekbang.org/opencourse/intro/100077801" target="_blank" rel="noopener">极客时间-投资第一课</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc274-H指数 Samba codebase organization linux设置动态库搜索路径三种方式 极客时间-投资第一课
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第113周[113/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC113%E5%91%A8-113-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第113周-113-521/</id>
    <published>2021-07-04T06:07:25.000Z</published>
    <updated>2021-07-04T06:14:13.873Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc645_错误的集合</p><p>标记数组查找法—直观有效<br>题解还有位运算方法，但要多次遍历，省了一点点空间，可以去参考<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findErrorNums(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> sz = nums.size();</span><br><span class="line">        <span class="keyword">bool</span> vis[sz + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, sz + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[x]) &#123;</span><br><span class="line">                ans.push_back(x);</span><br><span class="line">            &#125;</span><br><span class="line">            vis[x] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sz + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">                ans.push_back(i);</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/e8fb45c1-a03d-44ca-b7ae-47385cfd7997" target="_blank" rel="noopener">SMB协议文档</a></p><h1 id="Tips-python获取文件长度"><a href="#Tips-python获取文件长度" class="headerlink" title="Tips-python获取文件长度"></a>Tips-python获取文件长度</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file.seek(<span class="number">0</span>, os.SEEK_END)</span><br><span class="line"><span class="comment"># 这样就能移动到文件尾，然后用</span></span><br><span class="line">file.tell()</span><br><span class="line"><span class="comment"># 获得文件长度</span></span><br></pre></td></tr></table></figure><h1 id="Share-git提交代码最佳实践"><a href="#Share-git提交代码最佳实践" class="headerlink" title="Share-git提交代码最佳实践"></a>Share-git提交代码最佳实践</h1><h2 id="当推代码不顺利"><a href="#当推代码不顺利" class="headerlink" title="当推代码不顺利"></a>当推代码不顺利</h2><ul><li>先push -f,易翻车 （以后禁用）</li><li>reset再推，也易翻车 （在未pull下易翻车）</li><li>最稳妥的是先回源分支pull，然后新建分支，cherry pick老分支的东西，最后再推，然后删掉老分支</li></ul><h3 id="删掉本地分支和远程分支"><a href="#删掉本地分支和远程分支" class="headerlink" title="删掉本地分支和远程分支"></a>删掉本地分支和远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// delete branch locally</span><br><span class="line">git branch -d localBranchName</span><br><span class="line"></span><br><span class="line">// delete branch remotely</span><br><span class="line">git push origin --delete remoteBranchName</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc645_错误的集合 SMB协议文档 python获取文件长度 git提交代码最佳实践
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第112周[112/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC112%E5%91%A8-112-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第112周-112-521/</id>
    <published>2021-06-27T04:49:35.000Z</published>
    <updated>2021-06-27T05:11:23.009Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc909_蛇梯棋<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题意难懂，直接看题解锻炼思维吧</span></span><br><span class="line"><span class="comment">// 简单的bfs，主要是题意离谱</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; id2rc(<span class="keyword">int</span> id, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> r = (id - <span class="number">1</span>) / n, c = (id - <span class="number">1</span>) % n;</span><br><span class="line">        <span class="keyword">if</span> (r % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            c = n - <span class="number">1</span> - c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;n - <span class="number">1</span> - r, c&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">snakesAndLadders</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = board.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vis(n * n + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">        q.emplace(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> p = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">int</span> nxt = p.first + i;</span><br><span class="line">                <span class="keyword">if</span> (nxt &gt; n * n) &#123; <span class="comment">// 超出边界</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">auto</span> rc = id2rc(nxt, n); <span class="comment">// 得到下一步的行列</span></span><br><span class="line">                <span class="keyword">if</span> (board[rc.first][rc.second] &gt; <span class="number">0</span>) &#123; <span class="comment">// 存在蛇或梯子</span></span><br><span class="line">                    nxt = board[rc.first][rc.second];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (nxt == n * n) &#123; <span class="comment">// 到达终点</span></span><br><span class="line">                    <span class="keyword">return</span> p.second + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!vis[nxt]) &#123;</span><br><span class="line">                    vis[nxt] = <span class="literal">true</span>;</span><br><span class="line">                    q.emplace(nxt, p.second + <span class="number">1</span>); <span class="comment">// 扩展新状态</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作者：LeetCode-Solution</span></span><br><span class="line"><span class="comment">// 链接：https://leetcode-cn.com/problems/snakes-and-ladders/solution/she-ti-qi-by-leetcode-solution-w0vl/</span></span><br></pre></td></tr></table></figure><p></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>struct python包<br><a href="https://docs.python.org/3/library/struct.html#format-characters" target="_blank" rel="noopener">https://docs.python.org/3/library/struct.html#format-characters</a></p><p>Struct is a good tool to handle the binary file.</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.zhihu.com/question/48779613/answer/649876541" target="_blank" rel="noopener">vscode 切换选中文字的大小写的快捷键</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/118112132?spm=1001.2014.3001.5501" target="_blank" rel="noopener">CVAL,PVAL,SVAL宏定义</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc909_蛇梯棋 struct-python包 vscode 切换选中文字的大小写的快捷键 CVAL,PVAL,SVAL宏定义
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第111周[111/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC111%E5%91%A8-111-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第111周-111-521/</id>
    <published>2021-06-20T06:31:24.000Z</published>
    <updated>2021-06-20T08:08:00.527Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/1600_%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F.cpp" target="_blank" rel="noopener">LeetCode/1600_皇位继承顺序</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么大多数父母的育儿方式都是错的？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=418646927&bvid=BV1EV411s7Er&cid=356622616&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>人总是会庆幸自己与父母多么不同，又总会悲伤孩子与自己多么不同</p><p>我们应该影响孩子，而不要控制孩子</p><p>我们能够做到是，感恩每一刻，去爱自己的孩子</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/117194670" target="_blank" rel="noopener">Django显示进度条_更新版</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>一个人的一生很短，每个人都只有一次活着的机会，每一刻都是独一无二的，请不要浪费在无意义的等待上面，自己考虑好，自己选择好，然后勇敢地去做，失败了自己负责，而不要太在意别人的看法和眼光（父母的眼光也一样不要太看重），去享受这种自由和自己的一切</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/1600_皇位继承顺序 TED演讲：为什么大多数父母的育儿方式都是错的 Django显示进度条_更新版 自己选择，自己负责，不要过分在意别人的眼光
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第110周[110/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC110%E5%91%A8-110-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第110周-110-521/</id>
    <published>2021-06-13T05:45:03.000Z</published>
    <updated>2021-06-13T08:37:31.002Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>lc_278第一个错误的版本</p><p>二分查找<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The API isBadVersion is defined for you.</span></span><br><span class="line"><span class="comment">// bool isBadVersion(int version);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 防止溢出的一般性思路是开大空间</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> l = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> r = n;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 优化思路</span></span><br><span class="line">            <span class="comment">// mid = l + (r - l) &gt;&gt; 1;</span></span><br><span class="line">            <span class="keyword">if</span> (isBadVersion(mid)) &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲，躺平，泰国大叔如此做</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=716081931&bvid=BV11Q4y197pP&cid=353046064&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>生活应该简单一点，减少一些不必要的期望，就可以获得更多的从容，为人生做减法，便可以减少很多的烦恼</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>一些步骤提高你与任何人闲谈的质量</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=756989155&bvid=BV1cr4y1P7oh&cid=304698927&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><ol><li>赞美。夸两句身体工作</li><li>使用“这让我想起”进行话题转换</li><li>共同话题</li><li>问为什么和推进式聊天。（深入话题）</li><li>笑就完事</li><li>模仿对方的言辞</li></ol><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>维根斯坦:<br>语言是有上下文，那么多哲学问题是因为语言词语使用不当，将用于空间词语去描述时间，所以哲学问题是不存在，哲学已死，哲学转为研究形式语言的逻辑学。他与罗素共同点是致力于发明一种无需理解词义，只要根据词语形式就能推理的形式逻辑体系，结果计算机语言或如今的人工智能都做到了，完了他们的梦想。</p><p>很多时候，大家内心其实是同一个意思，但是因为表述语言有限以及表述方式的区别，导致会产生歧义，世界上很多的问题也就是来自于这些歧义。</p><p>因此，我认为，只要认真地用心去沟通，很多问题都不是问题，要么内心观点相同，要么内心观点相反，而无需更多的争论</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc_278第一个错误的版本 TED演讲，躺平，泰国大叔如此做，降低期望，减少烦恼 一些步骤提高你与任何人闲谈的质量 维根斯坦-语言表义具有上下文，尽量耐心沟通
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第109周[109/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC109%E5%91%A8-109-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第109周-109-521/</id>
    <published>2021-06-06T08:38:52.000Z</published>
    <updated>2021-06-06T11:06:07.510Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/474_%E4%B8%80%E5%92%8C%E9%9B%B6.cpp" target="_blank" rel="noopener">LeetCode/474_一和零</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>【TED演讲】未来如何在没有工作的情况下赚钱</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=630705073&bvid=BV1F84y1F7rC&cid=342956964&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>对于整个人类世界来说，我们需要的是通过一种分配手段，让这个人类世界变得更好</p><p>对于个人来说，金钱是一般等价物，我们需要金钱来生活，但是金钱不是生活的目的，只是生活中的一个等价交换物，所以我觉得人更应该多去探索自己想要活成的样子，应该多去做自己想做的事情，去活成自己想要的样子</p><p>热爱生活，而不是热爱生活的意义</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>【自制】我把自行车做成了 自 动 驾 驶 ！！【硬核】</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=418448598&bvid=BV1fV411x72a&cid=349611037&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h1 id="Share-认清人生没有意义，尽量活成自己想要的样子"><a href="#Share-认清人生没有意义，尽量活成自己想要的样子" class="headerlink" title="Share-认清人生没有意义，尽量活成自己想要的样子"></a>Share-认清人生没有意义，尽量活成自己想要的样子</h1><p>最近网上有很多的东西涌现(躺平，衡中高三学子张锡峰的有些戾气的演讲，新冠疫情的再次兴起，南京以及安徽安庆的路上砍人撞人事件)，最近也是高考的时候，也是自己大学毕业将至的时候，自己的感慨颇多</p><p>从高三大一大二的想要成为世界上最优秀的人，每天都在焦虑迷茫地思考人生的意义</p><p>到大三大四以及实习以及不断地认知发现人生本来就没有意义，从而慢慢地选择以自己喜欢的方式去过自己的一生</p><p>很久之前就被尼采发现了生活没有意义，所以他约朋友进行文艺复兴，防止人们苏格拉底式的疯狂提问自己，以求让人们能在艺术中感受到美，而不是苦苦思考生活的意义，以及防止人们最终知道生活没有意义之后可能的虚无感</p><p>首先祝福高考的考生，希望你们能用上自己平时学会的知识，也希望你们能接纳自己的成绩，最终认清生活的无意义，并接纳自己的一切，然后活成自己想要的样子</p><p>然后是我自己也是选择了接纳自己所有的平凡，接纳生命的无意义，并选择以自己喜爱的方式去过这一生，去经历这一生的所有或快乐或痛苦的事情，去珍惜生命的每一刻</p><p>热爱生活，而不要热爱生活的意义</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/474_一和零 【TED演讲】未来如何在没有工作的情况下赚钱 我把自行车做成了自动驾驶！ 认清人生没有意义，尽量活成自己想要的样子
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第108周[108/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC108%E5%91%A8-108-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第108周-108-521/</id>
    <published>2021-05-30T06:05:52.000Z</published>
    <updated>2021-05-30T06:57:14.661Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>leetcode231_2的幂</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __builtin_popcount(n) == <span class="number">1</span> &amp;&amp; n != <span class="number">-2147483648</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：没有什么是你做不了的</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=673327555&bvid=BV1rU4y1L7xz&cid=344311707&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>充分发挥主观能动性，去做你想做的一切</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://segmentfault.com/a/1190000007214571" target="_blank" rel="noopener">Python语法糖——遍历列表时删除元素</a></p><p><a href="https://juejin.cn/post/6844903692915703815" target="_blank" rel="noopener">Python日志库logging总结</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>《做一个清醒的现代人》刘擎 读书节选</p><h2 id="为而不争的政治"><a href="#为而不争的政治" class="headerlink" title="为而不争的政治"></a>为而不争的政治</h2><p>在当时的德国，有许多标举信念伦理的政治人物，韦伯对他们持有强烈的质疑和批评。首先，固执于信念伦理的人，一味追求让“纯洁的信念之火”燃烧不熄，他们相信善良的意愿最终会导致好的后果。但韦伯指出，在政治领域中，这种想法是极为幼稚的，真实的情况往往相反，不理解这一点的人，被他称作“政治婴儿”。其次，这不仅幼稚，而且危险。政治权力往往涉及暴力的使用，遵从信念伦理的人，就逻辑而言，应当拒绝使用任何“不道德的手段”来实现理想。但在现实政治中，那些信念伦理的信徒恰恰相反，他们往往呼吁“最后一次”使用暴力来终结暴力，获得永久的和平。但这种妄想实际上造成了更持久、更恶性的暴力冲突，造成了更大的政治灾难。<br>遵循责任伦理的政治家极为重视行动的后果，这当然并非易事。</p><p>虽然成熟的政治家也并不能确保事业的成功，但是，在信念的激励下尽己所能，清醒判断，审慎行动，最大限度地达成符合意愿的后果，那么即便失败，最终也能问心无愧，值得尊敬。所以韦伯说，“能够深深打动人心的，是一个成熟的人，他意识到了对自己行为后果的责任，真正发自内心地感受着这一责任。然后他遵照责任伦理采取行动，在做到一定的时候，他说，‘这就是我的立场，我只能如此’”。</p><h2 id="接纳生命的无意义，并热爱它"><a href="#接纳生命的无意义，并热爱它" class="headerlink" title="接纳生命的无意义，并热爱它"></a>接纳生命的无意义，并热爱它</h2><p>那么，韦伯自己会如何应对现代的困境？他当然明白在世界祛魅之后个人与社会生活会面临何等艰巨的挑战，因此，他的冷峻言说时常带有悲观的色彩。但韦伯相信，逃避或掩饰现代的困境是精神上的虚弱，我们必须接受这种“萧瑟命运”。他信奉尼采的名言，“一个人能承受多少真相，是其精神强度的检验”。我们可以进一步追问，韦伯将如何面对艰难的抉择？他是一个决断论者吗？在某种意义上，韦伯具有决断论的倾向，因为他相信终极价值没有坚如磐石的理性基础，“诸神之争”无法依据理性判断做出裁决，正因如此，个人要为自己选择的人生信仰负责，政治家要为自己行动的后果负责，而且无可推脱，责无旁贷。担负这种沉重的责任，需要强健的精神意志，一种英雄主义的品格。但在另一种意义上，韦伯又显示出抵御决断论的倾向。韦伯承认主观选择是不可避免的，但“主观”并不等同于“任意”或“武断”，学术滋养的“思想的清明”在此能够发挥不可忽略的作用。学习神学知识会有益于个人选择和实践宗教信仰，理解政治学原理也必定有助于政治家的判断和决定，虽然知识终究无法代替最终的信念选择或政治决定，但抉择却因此不再是单纯的随心所欲，负责也不只是意气用事。<br>韦伯以自己一生对学术的奉献，抵达了思想清明的最高境界。于是，健全的心智结合强劲的英雄品格，构成了韦伯独有的精神气质。正如哲学家雅思贝斯所描述那样，韦伯不必诉诸幻觉，就能将自己内心的极度紧张与外部生活的多种矛盾综合在统一的状态之中，保持精神上的宁静。他称韦伯是“我们时代最伟大的德国人”。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      leetcode231_2的幂 TED演讲：没有什么是你做不了的 Python语法糖——遍历列表时删除元素 Python日志库logging总结 接纳生命的无意义，并热爱它
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第107周[107/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC107%E5%91%A8-107-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第107周-107-521/</id>
    <published>2021-05-23T05:46:08.000Z</published>
    <updated>2021-05-23T06:42:21.441Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/1707_%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC.cpp" target="_blank" rel="noopener">LeetCode/1707_与数组中元素的最大异或值</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>【TED演讲】父亲的痴呆症如何改变我对生命的理解</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=545423754&bvid=BV16q4y1J7uX&cid=335290115&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>当你的至亲陷入一些危机，你不是他们的救世主，你也不能帮别人做决定<br>你应该做好你自己能做的，以你的身份，去陪伴，去尽好你的责任即可</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/weixin_42134789/article/details/108353889" target="_blank" rel="noopener">Django实战：如何使用django-crispy-forms美化Bootstrap 4表单</a></p><p><a href="https://blog.csdn.net/yxys01/article/details/105864456" target="_blank" rel="noopener">Django知识点之urls.py路由设置</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/117194670" target="_blank" rel="noopener">Django显示进度条</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      lc1707_与数组中元素的最大异或值 【TED演讲】父亲的痴呆症如何改变我对生命的理解 Django实战：如何使用django-crispy-forms美化Bootstrap 4表单 Django知识点之urls.py路由设置 Django显示进度条
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第106周[106/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC106%E5%91%A8-106-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第106周-106-521/</id>
    <published>2021-05-16T06:24:37.000Z</published>
    <updated>2021-05-16T07:19:51.799Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/421_%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC.cpp" target="_blank" rel="noopener">LeetCode/421_数组中两个数的最大异或值</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>【TED演讲】道德经：水的哲学带给我的启示</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=886979251&bvid=BV1zK4y1J7ch&cid=304217864&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>上善若水，为而不争，利而不害</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://zhuanlan.zhihu.com/p/87114327" target="_blank" rel="noopener">人脸识别方向系列论文</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>世俗的成功眼光是很严酷的，他们渴望你快速达成他们期望的样子，然后当你扛着压力前进，并且时不时跌倒的时候，他们会催你走快点，当你被第三人指责说你让他们出丑的时候，他们会和第三人联合在一起，一起指责你，没有人会关心你累不累。哦，不，更加世俗的眼光更希望你永远是个loser，很残酷，但很真实。</p><p>有些人的职责就是确保万无一失，所以他们会不惜损失你的利益，也要你服从最严苛的安排，不准许你有变通，还不断联系你家人朋友来劝说你，说你不听话。</p><p>这也许就是世界一直存在的样子</p><p>不要活在别人的期望中，按自己想要的样子，去过自己的一生，自己选择，自己负责</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/421_数组中两个数的最大异或值 【TED演讲】道德经：水的哲学带给我的启示 人脸识别方向系列论文 不要活在别人的期望中，按自己想要的样子，去过自己的一生，自己选择，自己负责
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第105周[105/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC105%E5%91%A8-105-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第105周-105-521/</id>
    <published>2021-05-09T04:40:52.000Z</published>
    <updated>2021-05-09T08:03:51.907Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/1482_%E5%88%B6%E4%BD%9Cm%E6%9D%9F%E8%8A%B1%E6%89%80%E9%9C%80%E7%9A%84%E6%9C%80%E5%B0%91%E5%A4%A9%E6%95%B0.cpp" target="_blank" rel="noopener">LeetCode/1482_制作m束花所需的最少天数</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>【TED演讲】为什么我们必须成为“勇敢的男人”</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=930336506&bvid=BV1jK4y1Z7Wy&cid=330606812&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><h2 id="相信女生，反思潜意识的偏见"><a href="#相信女生，反思潜意识的偏见" class="headerlink" title="相信女生，反思潜意识的偏见"></a>相信女生，反思潜意识的偏见</h2><p>对不起，那些被我的潜意识行为伤害过的女性朋友</p><p>我们生活在一个”男性要强势，女生要好看”的偏见传统里</p><p>因此我们可能会无意识的行为抢夺掉自己的妻子/女友的话语权，我们可能会无意识地低估女生的力量</p><p>我们可能陷入更多的无意识地对女生的偏见</p><p>所以我们应该时刻反省自己，认真倾听女生的发言</p><h2 id="别默默承受痛苦"><a href="#别默默承受痛苦" class="headerlink" title="别默默承受痛苦"></a>别默默承受痛苦</h2><p>当你遇到很巨大的痛苦的时候，放下那传统意识里的强势，学会向他人寻求帮助，相信身边的人</p><h2 id="多探索自己的内心，别囿于世俗的偏见"><a href="#多探索自己的内心，别囿于世俗的偏见" class="headerlink" title="多探索自己的内心，别囿于世俗的偏见"></a>多探索自己的内心，别囿于世俗的偏见</h2><p>任何事情，都不要仅仅囿于世俗的看法，要自己去求证，相信自己求证的结果，而非世俗的结果</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.cnblogs.com/Yellow-ice/p/13743400.html" target="_blank" rel="noopener">Chrome使用video无法正常播放MP4视频的解决方案</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/116537635?spm=1001.2014.3001.5501" target="_blank" rel="noopener">如何把视频转化成H264编码web端可播放的MP4格式，安装带H264编码的FFmpeg_Unknown encoder ‘h264‘</a></p><p><a href="https://blog.csdn.net/neve_give_up_dan/article/details/116536972?spm=1001.2014.3001.5501" target="_blank" rel="noopener">opencv保存视频，并在web端展示视频</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/1482_制作m束花所需的最少天数 【TED演讲】为什么我们必须成为“勇敢的男人” Chrome使用video无法正常播放MP4视频的解决方案 如何把视频转化成H264编码web端可播放的MP4格式，安装带H264编码的FFmpeg_Unknown encoder ‘h264‘ opencv保存视频，并在web端展示视频
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第104周[104/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC104%E5%91%A8-104-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第104周-104-521/</id>
    <published>2021-05-01T15:20:57.000Z</published>
    <updated>2021-05-02T07:16:51.760Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/554_%E7%A0%96%E5%A2%99.cpp" target="_blank" rel="noopener">LeetCode/554_砖墙</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED:在互联网中解放自己</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=417796868&bvid=BV1ZV411J7RR&cid=330604818&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>互联网让我们很容易找到和我们观点相同的观点，从而会很容易让我们的思维变得固化僵硬，甚至变得偏激</p><p>所以我们需要自己人为的去保持自己的互联网关注的东西多样化，去关注你对立观点中被世人称赞的观点，去思考求证，去保持开放</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>Django Template双重嵌套遍历字典嵌字典:Need 2 values to unpack in for loop； got 6.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>不能仅使用Dict对象来获取信息，可能Dict对象里面有6个字段<br>然后应该使用Dict对象的 items 属性来获取key和value<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for person, query_pics in data.person_list.items %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Share-Django如何创建一个文件并将其保存到模型的FileField中"><a href="#Share-Django如何创建一个文件并将其保存到模型的FileField中" class="headerlink" title="Share-Django如何创建一个文件并将其保存到模型的FileField中"></a>Share-Django如何创建一个文件并将其保存到模型的FileField中</h1><h2 id="model定义"><a href="#model定义" class="headerlink" title="model定义"></a>model定义</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    file = models.FileField(max_length=<span class="number">255</span>)</span><br><span class="line">    project_name = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">'未命名工程'</span>)</span><br><span class="line">    <span class="comment"># 视频封面，容许为空</span></span><br><span class="line">    cover = models.ImageField(upload_to=<span class="string">'cover/'</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><h2 id="详细接口"><a href="#详细接口" class="headerlink" title="详细接口"></a>详细接口</h2><p>基本上，一个字段被声明为一个<code>FileField</code>，当被访问时，给你一个类的实例<code>FieldFile</code>，它给你几个方法来与底层文件进行交互。所以，你需要做的是：</p><p><code>self.file.save(new_name, new_contents)</code><br>new_name你希望分配的文件名在哪里，并且<code>new_contents</code>是文件的内容。</p><p>注意，<code>new_contents</code>必须是二者之一的一个实例<code>django.core.files.File</code>或<code>django.core.files.base.ContentFile</code>（见给出的链接手册的细节）。这两个选择归结为：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Using File</span></span><br><span class="line">f = open(<span class="string">'/path/to/file'</span>)</span><br><span class="line">self.file.save(new_name, File(f))</span><br><span class="line"><span class="comment"># Using ContentFile</span></span><br><span class="line">self.file.save(new_name, ContentFile(<span class="string">'A string with the file content'</span>))</span><br></pre></td></tr></table></figure><p></p><h2 id="仍可能遇到问题"><a href="#仍可能遇到问题" class="headerlink" title="仍可能遇到问题"></a>仍可能遇到问题</h2><p>UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 0x89 in position 0: invalid start byte</p><p>搜了一下发现，直接修改一下open为rb就行</p><h2 id="最终的views-py中的处理函数"><a href="#最终的views-py中的处理函数" class="headerlink" title="最终的views.py中的处理函数"></a>最终的views.py中的处理函数</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = File(open(</span><br><span class="line">    <span class="string">'/root/graduate_work/web_my/videoproject/media/iron_man_stack.png'</span>, <span class="string">'rb'</span>))</span><br><span class="line">tmp_result = Result.objects.create(</span><br><span class="line">    file=<span class="literal">None</span>,</span><br><span class="line">    name=f.name,</span><br><span class="line">    project_name=project_context[<span class="string">'project'</span>].name)</span><br><span class="line">project_context[<span class="string">'project'</span>].result = tmp_result</span><br><span class="line">project_context[<span class="string">'project'</span>].result.file.save(<span class="string">"iron_man_stack.png"</span>, (f))</span><br></pre></td></tr></table></figure><h2 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h2><p><a href="https://cloud.tencent.com/developer/ask/84584" target="_blank" rel="noopener">https://cloud.tencent.com/developer/ask/84584</a><br><a href="https://docs.djangoproject.com/zh-hans/3.1/ref/models/fields/#django.db.models.FileField" target="_blank" rel="noopener">https://docs.djangoproject.com/zh-hans/3.1/ref/models/fields/#django.db.models.FileField</a><br><a href="https://stackoverflow.com/questions/42339876/error-unicodedecodeerror-utf-8-codec-cant-decode-byte-0xff-in-position-0-in" target="_blank" rel="noopener">https://stackoverflow.com/questions/42339876/error-unicodedecodeerror-utf-8-codec-cant-decode-byte-0xff-in-position-0-in</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/554_砖墙 互联网让我们很容易找到和我们观点相同的观点，从而会很容易让我们的思维变得固化僵硬，甚至变得偏激 Django Template双重嵌套遍历字典嵌字典:Need 2 values to unpack in for loop； got 6. Django如何创建一个文件并将其保存到模型的FileField中
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第103周[103/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC103%E5%91%A8-103-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第103周-103-521/</id>
    <published>2021-04-25T14:06:18.000Z</published>
    <updated>2021-04-25T15:06:51.267Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/LeetCode/897_%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2%E6%A0%91.cpp" target="_blank" rel="noopener">LeetCode/897_递增顺序搜索树</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：为什么我们需要“尚未”的思维模式？</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=930143002&bvid=BV17K4y1o7iW&cid=327628734&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>面对难题，困难和失败，我们保持”尚未”成功的心态，有成长，有收获的心态</p><p>去珍视自己在过程中的坚持，不放弃，耐心，毅力，韧性<br>去多种策略尝试<br>去养成一种为而不争的习惯<br>从而培养自己的心态，能力</p><p>天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，增益其所不能</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://cloud.tencent.com/developer/article/1099760" target="_blank" rel="noopener">基于类的通用视图：ListView 和 DetailView</a></p><h1 id="Share-将变量从get-context-data-传递到post"><a href="#Share-将变量从get-context-data-传递到post" class="headerlink" title="Share-将变量从get_context_data()传递到post()"></a>Share-将变量从get_context_data()传递到post()</h1><p>你应该把它倒过来。如果在bar中需要post()，则需要在此处创建它：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooView</span><span class="params">(TemplateView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        bar = self.bar</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, id, *args, **kwargs)</span>:</span></span><br><span class="line">        self.bar = Bar.objects.get(id=id)</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p></p><p>post()是在get_context_data之前调用的，这就是如果在post中定义它，则get_context_data看不到它的原因。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.coder.work/article/2034853" target="_blank" rel="noopener">https://www.coder.work/article/2034853</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/897_递增顺序搜索树 TED演讲：为什么我们需要“尚未”的思维模式？ 基于类的通用视图：ListView 和 DetailView 将变量从get_context_data()传递到post()
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第102周[102/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC102%E5%91%A8-102-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第102周-102-521/</id>
    <published>2021-04-18T15:22:21.000Z</published>
    <updated>2021-04-18T15:41:38.257Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 29 2021 16:32:24 GMT+0800 (中国标准时间) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/3bc2864bcdb177c38b73f71c4ff4ac20a4a903d2/LeetCode/31_%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97.cpp" target="_blank" rel="noopener">LeetCode/31_下一个排列</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>TED演讲：努力之外，运气也很重要！</p><div align="center"><iframe width="100%" height="700" src="//player.bilibili.com/player.html?aid=930162592&bvid=BV1eK4y1o7kR&cid=325946075&page=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div><p>敬重那些本来应该和我们一样成功但是没有我们幸运的人</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://docs.djangoproject.com/zh-hans/3.1/topics/forms/modelforms/" target="_blank" rel="noopener">model_form的官方文档</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>想了很多天，想到使用model添加很多备用的Person数据，如下<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    video = models.ForeignKey(Video, on_delete=models.CASCADE, null=<span class="literal">True</span>)</span><br><span class="line">    person = models.ForeignKey(Person, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br><span class="line">    person_1 = models.ForeignKey(Person, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br><span class="line">    person_2 = models.ForeignKey(Person, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br><span class="line">    person_3 = models.ForeignKey(Person, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br><span class="line">    person_4 = models.ForeignKey(Person, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br><span class="line">    person_5 = models.ForeignKey(Person, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br><span class="line">    <span class="comment"># 结果一开始容许为空 null=True</span></span><br><span class="line">    result = models.ForeignKey(Result, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br></pre></td></tr></table></figure><p></p><p>可是报错，不能这样搞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@lm videoproject]# python manage.py makemigrations</span><br><span class="line">SystemCheckError: System check identified some issues:</span><br><span class="line"></span><br><span class="line">ERRORS:</span><br><span class="line">cut.Project.person: (fields.E304) Reverse accessor for &apos;Project.person&apos; clashes with reverse accessor for &apos;Project.person_1&apos;.</span><br><span class="line">        HINT: Add or change a related_name argument to the definition for &apos;Project.person&apos; or &apos;Project.person_1&apos;.</span><br><span class="line">cut.Project.person: (fields.E304) Reverse accessor for &apos;Project.person&apos; clashes with reverse accessor for &apos;Project.person_2&apos;.</span><br><span class="line">        HINT: Add or change a related_name argument to the definition for &apos;Project.person&apos; or &apos;Project.person_2&apos;.</span><br><span class="line">cut.Project.person: (fields.E304) Reverse accessor for &apos;Project.person&apos; clashes with reverse accessor for &apos;Project.person_3&apos;.</span><br></pre></td></tr></table></figure><p>解决方案(如上所述，添加一个related_name)：</p><p>原理解释：<br>如果不加related_name，那么Project有多个Person外键，当某一个Person反向查找遍历的时候，都是查找person_set,由于两个反向关系使用相同的名称，因此将导致歧义。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    video = models.ForeignKey(Video, on_delete=models.CASCADE, null=<span class="literal">True</span>)</span><br><span class="line">    person = models.ForeignKey(Person, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL, related_name=<span class="string">'person_0'</span>)</span><br><span class="line">    person_1 = models.ForeignKey(Person, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL, related_name=<span class="string">'person_1'</span>)</span><br><span class="line">    person_2 = models.ForeignKey(Person, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL, related_name=<span class="string">'person_2'</span>)</span><br><span class="line">    person_3 = models.ForeignKey(Person, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL, related_name=<span class="string">'person_3'</span>)</span><br><span class="line">    person_4 = models.ForeignKey(Person, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL, related_name=<span class="string">'person_4'</span>)</span><br><span class="line">    person_5 = models.ForeignKey(Person, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL, related_name=<span class="string">'person_5'</span>)</span><br><span class="line">    <span class="comment"># 结果一开始容许为空 null=True</span></span><br><span class="line">    result = models.ForeignKey(Result, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/58788480/python-error-fields-e304-reverse-accessor-for-field-clashes-with-reverse-acc" target="_blank" rel="noopener">https://stackoverflow.com/questions/58788480/python-error-fields-e304-reverse-accessor-for-field-clashes-with-reverse-acc</a></p><p><a href="https://blog.csdn.net/m0_37156322/article/details/86691765" target="_blank" rel="noopener">https://blog.csdn.net/m0_37156322/article/details/86691765</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      LeetCode/31_下一个排列 TED演讲：努力之外，运气也很重要！ model_form的官方文档 Django-HINT-Add or change a related_name argument to the definition for ‘x.person_1‘ or ‘x.person‘.
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
</feed>
